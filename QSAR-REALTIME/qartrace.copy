 /******************************************************************/
 /*                                                                */
 /* MACRO NAME = QARTRACE                                          */
 /*                                                                */
 /* FUNCTION = QSAR TRACE MACRO (USED TO WRITE TRACE INFORMATION   */
 /*            TO THE QSAR TRACE FILE, QARTRCE).                   */
 /*                                                                */
 /* INVOCATION =                                                   */
 /*               ?QARTRACE OP(OPCODE)                             */
 /*                         TYPE(TYPEFLD)                          */
 /*                         PGMINDX(INDEX)                         */
 /*                         PGMN(PGMNAME)      (OPTIONAL)          */
 /*                         UID(USERID)        (OPTIONAL)          */
 /*                         DATE(DATE)         (OPTIONAL)          */
 /*                         PRTLPTR(REGPTR)    (OPTIONAL)          */
 /*                         DATA(USERDATA);    (OPTIONAL)          */
 /*                                                                */
 /*        OPCODE - THE OPERATION BEING TRACED                     */
 /*        TYPEFLD - THE TYPE OF OPERATION BEING PERFORMED         */
 /*        INDEX - THIS PROGRAMS INDEX INTO THE TRACE SETTINGS     */
 /*                IN THE QSAR ANCHOR BLOCK                        */
 /*        PGMNAME - NAME OF THE PROGRAM ISSUING THE MACRO         */
 /*                  INVOCATION                                    */
 /*        USERID - A USERID TO COMPARE WITH THE THREE USER IDS IN */
 /*                 THE QSAR ANCHOR BLOCK                          */
 /*        REGPTR - IF PRTLINE IS A BASED STRUCTURE OR IS NOT IN   */
 /*                 DYNAMIC STORAGE, THEN THIS PARAMETER MUST BE   */
 /*                 CODED. THIS PARAMETER MUST BE A REGISTER       */
 /*                 BETWEEN 2 AND 13 THAT CAN BE CHANGED.          */
 /*                 THE MACRO WILL RESTRICT THE REGISTER AND SET   */
 /*                 IT TO THE ADDRESS OF PRTLINE.                  */
 /*        DATE - FIELD USED TO INDICATE WHETHER THE DATE AND      */
 /*               TIME SHOULD BE PRINTED WITH THE TRACE            */
 /*               INFORMATION (DEFAULT IS NO)                      */
 /*                                                                */
 /******************************************************************/
 %QARTRACE: MACRO KEYS(OP,TYPE,PGMN,UID,PGMINDX,DATE,DATA,PRTLPTR);
 DCL PARMWRD1 CHAR;             /* PARAMETER                       */
 DCL PARMWRD2 CHAR;             /* WORK AREA                       */
 DCL PARMWRD3 CHAR;             /* WORK AREA                       */
 DCL PARMWRD4 CHAR;             /* WORK AREA                       */
 DCL PARMLEN FIXED;             /* PARAMETER LENGTH                */
 ANS('     /*(QARTRACE) QSAR TRACE MACRO  VERSION 1.0 '||MACINDEX||'*/')
  SKIP;
 ANS('/* INPUT PARMS = '||MACKEYS||' */') SKIP;
 /******************************************************************/
 /* INSERT LABEL STATEMENT IF ONE IS PRESENT                       */
 /******************************************************************/
 IF MACLABEL^='' THEN
    ANS(MACLABEL) SKIP;
 /******************************************************************/
 /* DECLARE WORK AREAS                                             */
 /******************************************************************/
 PARMWRD2 = 'WRKA'||MACINDEX;
 PARMWRD3 = 'WRKB'||MACINDEX;
 PARMWRD4 = 'WRKC'||MACINDEX;
 ANS('DCL '||PARMWRD2||' CHAR(8) BASED;  /* WORK AREA */') SKIP;
 ANS('DCL '||PARMWRD3||' CHAR(8) BASED;  /* WORK AREA */') SKIP;
 ANS('DCL '||PARMWRD4||' FIXED(31) BASED(ADDR(PRTLINE)) BDY(WORD);')
 SKIP;
 ANS('RFY '||PARMWRD2||' BASED(ADDR(PRTLINE)+60);') SKIP;
 ANS('RFY '||PARMWRD3||' BASED(ADDR(PRTLINE)+68);') SKIP;
 ANS('RFY R1 RSTD;') SKIP;
 ANS('DO;') SKIP;
 /******************************************************************/
 /* INSERT STATEMENT TO BLANK OUT PRINT LINE                       */
 /******************************************************************/
 ANS('   PRTLINE='' '';') SKIP;
 /******************************************************************/
 /* IF UID KEY PRESENT, THEN INSERT CODE TO CHECK THE PARM PASSED  */
 /* WITH THE THREE QARTRUID'S IN THE QSAR ANCHOR BLOCK             */
 /******************************************************************/
 IF UID ^= '' THEN DO;
    ANS('IF QARTRUID(1) = '||UID(1)||' | QARTRUID(2) = '||UID(1))
     SKIP;
    ANS(' | QARTRUID(3) = '||UID(1)||' THEN DO; /* CHECK USER ID */');
    END;
 /******************************************************************/
 /* INSERT CODE TO COMPARE THE TRACE SETTING IN THE ANCHOR BLOCK   */
 /* (INDEXED BY PARM PGMINDX) WITH THE TRACE LEVEL ARRAY (INDEXED  */
 /* BY TYPE,OP)                                                    */
 /******************************************************************/
 IF PGMINDX(1,1:1) = '''' THEN DO;           /* IF PARM IS A       */
    PARMWRD1 = '  ';                         /* LITERAL, REMOVE THE*/
    PARMLEN=LENGTH(PGMINDX(1))-1;            /* QUOTES BEFORE      */
    PARMWRD1=PGMINDX(1,2:PARMLEN);           /* INSERTING          */
    ANS('IF QARTRSET('||PARMWRD1||') >= ') SKIP;
    END;
 ELSE
    ANS('IF QARTRSET('||PGMINDX(1)||') >= ' ) SKIP;
 IF TYPE(1,1:1) = '''' THEN DO;
    PARMWRD1 = '  ';
    PARMLEN=LENGTH(TYPE(1))-1;
    PARMWRD1=TYPE(1,2:PARMLEN);
    ANS('QARTRLVL('||PARMWRD1||',');
    END;
 ELSE
    ANS('QARTRLVL('||TYPE(1)||',');
 IF OP(1,1:1) = '''' THEN DO;
    PARMWRD1 = '  ';
    PARMLEN=LENGTH(OP(1))-1;
    PARMWRD1=OP(1,2:PARMLEN);
    ANS(PARMWRD1||') THEN DO;        /* PERFORM TRACE? */') SKIP;
    END;
 ELSE
    ANS(OP(1)||') THEN DO;           /* PERFORM TRACE? */') SKIP;
 /*******************************************************************/
 /* IF PGMN PARM IS PRESENT, INSERT CODE TO MOVE PGMN TO CORRECT    */
 /* PLACE IN PRTLINE                                                */
 /*******************************************************************/
 IF PGMN ^='' THEN
    ANS('PRTLINE(2:9)='||PGMN(1)||';  /* MOVE PGM NAME TO LINE */')
     SKIP;
 /*******************************************************************/
 /* INSERT CODE TO MOVE OP CODE TO PRTLINE. IF OP CODE IS NOT A     */
 /* A LITERAL, NEED TO CONVERT OP TO A CHARACTER VALUE BEFORE       */
 /* MOVING TO PRTLINE                                               */
 /*******************************************************************/
 IF OP(1,1:1) = '''' THEN
    ANS('PRTLINE(25:26) = '||OP(1)||';  /* MOVE OP CODE TO LINE */')
     SKIP;
 ELSE DO;
    IF OP(1) > '0' & OP(1) < '9999' THEN
       ANS('PRTLINE(25:26) = '''||OP(1)||'''; /* MOVE OP TO PRTLINE */')
        SKIP;
    ELSE DO;
       ANS('CVD('||OP(1)||','||PARMWRD2||'); /* CONVERT OP CODE TO */')
        SKIP;
       ANS(PARMWRD2||'(8:8) = '||PARMWRD2||'(8:8) | ''0F''X; /* CHAR*/')
        SKIP;
       ANS('UNPK('||PARMWRD3||','||PARMWRD2||');') SKIP;
       ANS('PRTLINE(25:26) = '||PARMWRD3||'(7:8);') SKIP;
       ANS(PARMWRD2||' = '' '';  /* BLANK OUT WORK AREAS  */') SKIP;
       ANS(PARMWRD3||' = '' '';  /* BLANK OUT WORK AREAS  */') SKIP;
       END;
    END;
 /*******************************************************************/
 /* INSERT CODE TO MOVE TYPE CODE TO PRTLINE. IF TYPE CODE IS NOT A */
 /* A LITERAL, NEED TO CONVERT TYPE TO A CHARACTER VALUE BEFORE     */
 /* MOVING TO PRTLINE                                               */
 /*******************************************************************/
 IF TYPE(1,1:1) = '''' THEN
    ANS('PRTLINE(27:28) = '||TYPE(1)||'; /* MOVE TYPE CODE TO LINE */')
     SKIP;
 ELSE DO;
    IF TYPE(1) > '0' & TYPE(1) < '9999' THEN DO;
       ANS('PRTLINE(27:28) = '''||TYPE(1)||''';') SKIP;
       ANS(' /* MOVE TYPE CODE TO LINE */');
       END;
    ELSE DO;
       ANS('CVD('||TYPE(1)||','||PARMWRD2||'); ') SKIP;
       ANS('/* CONVERT TYPE CODE TO CHAR */');
       ANS(PARMWRD2||'(8:8) = '||PARMWRD2||'(8:8) | ''0F''X;') SKIP;
       ANS('UNPK('||PARMWRD3||','||PARMWRD2||');') SKIP;
       ANS('PRTLINE(27:28) = '||PARMWRD3||'(7:8);') SKIP;
       ANS(PARMWRD2||' = '' '';  /* BLANK OUT WORK AREAS */') SKIP;
       ANS(PARMWRD3||' = '' '';') SKIP;
       END;
    END;
 /********************************************************************/
 /* IF DATE FIELD IS PRESENT, INSERT CODE TO CALL RAMTOD AND MOVE    */
 /* DATE AND TIME TO PRTLINE                                         */
 /********************************************************************/
 IF DATE^='' THEN DO;
    IF DATE(1,1:1) = '''' THEN
       IF DATE(1,2:2) = 'Y' THEN DO;
          ANS('R1 = ADDR(TODAREA);    /* SET POINTER TO DATA AREA */')
           SKIP;
          ANS('TODTYPE = 0;    /* GET CURRENT DATE AND TIME */') SKIP;
          ANS('CALL RAMTOD;') SKIP;
          ANS('PRTLINE(10:15) = TODGREGO(1:6);  /* GET DATE */') SKIP;
          ANS('PRTLINE(16:22) = TODTIMEC(1:7);  /* GET TIME */') SKIP;
          END;
       ELSE;
    ELSE DO;
       ANS('IF '||DATE(1)||' = ''Y'' THEN DO;  /* PRINT DATE & TIME */')
        SKIP;
       ANS('R1 = ADDR(TODAREA);    /* SET POINTER TO DATA AREA */')
        SKIP;
       ANS('TODTYPE = 0;    /* GET CURRENT DATE AND TIME */') SKIP;
       ANS('CALL RAMTOD;') SKIP;
       ANS('PRTLINE(10:15) = TODGREGO(1:6);  /* GET DATE */') SKIP;
       ANS('PRTLINE(16:22) = TODTIMEC(1:7);  /* GET TIME */') SKIP;
       ANS('END; /* IF '||DATE(1)||' = Y */ ') SKIP;
       END;
    END;
 /*******************************************************************/
 /* IF DATA FIELD IS PRESENT, INSERT CODE TO MOVE DATA FIELD TO     */
 /* PRTLINE                                                         */
 /*******************************************************************/
 IF DATA ^= '' THEN
    ANS('PRTLINE(29:130) = '||DATA(1)||';  /* STORE DATA LINE */')
     SKIP;
 /*******************************************************************/
 /* INSERT CODE TO WRITE THE PRTLINE TO THE TRACE DATA SET          */
 /*******************************************************************/
 IF PRTLPTR ^= '' THEN DO;     /* USE REG POINTER IF PRTLPTR PRESENT*/
    ANS('RFY '||PRTLPTR(1)||' RSTD;') SKIP;
    ANS(PRTLPTR(1)||' = ADDR(PRTLINE);  /* SET PTR TO PRTLINE */')
     SKIP;
    ANS('                      /* WRITE RECORD TO TRACE FILE */') SKIP;
    ANS('GEN CODE;') SKIP;
    ANS(' EXEC CICS IGNORE CONDITION IOERR NOSPACE NOTOPEN ILLOGIC')
     SKIP COL(3);
    ANS(' EXEC CICS WRITE DATASET(''QARTRCE'') FROM(0('||PRTLPTR(1))
     SKIP COL(3);
    ANS(')) RIDFLD(0('||PRTLPTR(1)||'))');
    ANS('X') COL(72);
    ANS(' LENGTH(132) RBA');
    ANS(' EXEC CICS HANDLE CONDITION IOERR NOSPACE NOTOPEN ILLOGIC')
     SKIP COL(3);
    ANS('@ENDGEN') SKIP;
    ANS('RFY '||PRTLPTR(1)||' UNRSTD;') SKIP;
    END; /* IF PRTLPTR ^= '' */
 ELSE DO;                      /* REFER DIRECTLY TO PRTLINE         */
    ANS('                      /* WRITE RECORD TO TRACE FILE */') SKIP;
    ANS('GEN CODE REFS(PRTLINE);') SKIP;
    ANS(' EXEC CICS IGNORE CONDITION IOERR NOSPACE NOTOPEN ILLOGIC')
     SKIP COL(3);
    ANS(' EXEC CICS WRITE DATASET(''QARTRCE'') FROM(PRTLINE) ') SKIP
     COL(3);
    ANS(' RIDFLD(PRTLINE)   X');
    ANS(' LENGTH(132) RBA');
    ANS(' EXEC CICS HANDLE CONDITION IOERR NOSPACE NOTOPEN ILLOGIC')
     SKIP COL(3);
    ANS('@ENDGEN;') SKIP;
    END; /* PRTLPTR = '' */
 ANS('RFY R1 UNRSTD;') SKIP;
 ANS('END; ') SKIP;
 /*******************************************************************/
 /* IF UID FIELD WAS PRESENT, INSERT AN EXTRA END                   */
 /*******************************************************************/
 IF UID ^='' THEN
    ANS('END;') SKIP;
 ANS('END; /* QARTRACE MACRO */') SKIP;
 % END QARTRACE;


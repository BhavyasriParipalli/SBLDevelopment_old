        /* CREATED - 09/18/81    ------------------------------------
           CHANGED - 09/08/83  ADDED DCS FNE CONFIG PGM ID         JJ
           CHANGED - 07/31/84  ADDED QSAR PROGRAMS           RCS D048
           CHANGED - 09/23/86  ADDED SEC LOCATOR PROGRAM     JCP D048
           CHANGED - 04/25/88  REMOVED RAMS/AMS ACTIVE FLAGS RLH D956
           THIS IS A MAPPING OF THE INPUT PARAMETER LIST USED TO PASS
           REQUESTS TO AMSPOOL (THE NATIONAL SPOOL MANAGER ROUTINE).
           THE INTERFACE TO THE ROUTINE IS CONTAINED COMPLETELY WITHIN
           THIS PARAMETER LIST.  THE ADDRESS OF THIS LIST IS PASSED IN
           REGISTER 1 ON A BRANCH ENTRY TO THE CWAMSPOL ENTRY POINT.
           IN ADDITION REGISTER 13 MUST POINT TO A REGISTER SAVE AREA
           WITH REG 14 BEING THE RETURN ADDRESS AND REG 15 MUST CONTAIN
           THE ENTRY POINT ADDRESS.
           NOTE THAT THE PARAMETER LIST MUST BE IN DYNAMIC STORAGE
           BECAUSE THE SPOOL MANAGER WILL ALTER THE PARAMETER LIST.
           IN EFFECT THE PARMLIST WILL CONTAIN THE REQUEST ON INPUT
           AND IT WILL CONTAIN THE RESPONSE DATA UPON RETURN.
           THE MAX LENGTH OF THE ENTIRE RECORD IS 3000 BYTES.  THE
           RECORD IS SET UP IN TWO SECTIONS - THE PREFIX AND THE DATA.
           THE LENGTH FIELD (IN THE PREFIX) MUST INDICATE THE TOTAL
           LENGTH OF THE RECORD
           INCLUDING THE PREFIX.  THE DATA PORTION OF THE RECORD MAY
           BE 2982 BYTES LONG.  ANY LENGTH GREATER THAN 2982 WILL BE
           TRUNCATED AT 2982.   */
 %DCL BATCK CHAR EXTERNAL;
 DCL
   1 SPOOLRCD CHAR(3000) BDY(DWORD) BASED,
      /*  THE FIRST SECTION OF THE PARM LIST CONTAINS THE SPOOL PREFIX
          WHICH WILL BE CREATED BY THE SPOOL MANAGER.  THE USER MAY
          OPTIONALLY PROVIDE THE FIRST THREE BYTES.  THE FIRST THREE
          BYTES MAY CONTAIN A TARGET REGION NUMBER IF THE ACTION FLAGS
          INDICATE THAT THIS REQUEST IS TARGETED TO A REGION OR A SUB
          NODE IN THE RAMS HIERARCHY.
          THE SPLRTCDE  FIELD WILL PROVIDE A RETURN CODE AS TO THE
          RESULT OF THE REQUEST.  */
     2 SPLPREFX BDY(DWORD),
       3 SPLHDR CHAR(15) BDY(DWORD),
         4 SPLREG CHAR(3),            /* IF REGION THE FIRST TWO BYTES
                                         ARE THE REGION WITH BYTE 3 A
                                         BLANK.  A BO MUST BE 3 BYTES*/
         4 SPLGMT CHAR(11),           /* GMT OF REQUEST BUILT BY SPOOL
                                         MANAGER YYDDDHHMMSS  */
         4 SPLRTCDE FIXED(8),         /* RETURN CODES */
                                      /* 00 = OKAY.*/
                                      /* 04 = INVALID LENGTH, RECORD IS
                                         TRUNCATED.*/
                                      /* 08 = INVALID NODE ID OR BRANCH
                                         OFFICE NOT FOUND.*/
                                      /* 12 = SPOOL FILE IS DOWN CANNOT
                                         PROCESS THE REQUEST.*/
                                      /* 14 = DESTID Not found in
                                         RBROUTE, do not process. */
                                      /* 16 = UNEXPECTED ERROR.*/
           5 SPLRQFLG BIT(8),        /* REQUEST FLAGS*/
             6 SPLTRGET BIT(1),      /* OFF = GO TO NATIONAL HUB NODE.*/
                                     /* ON = SEND RECORD TO NODE
                                        IDENTIFIED IN SPLREG.*/
                                     /* THE NODE MAY BE A BRANCH OFFICE
                                        NUMBER IN WHICH CASE FLAG
                                        SPLBOID IS ALSO ON.*/
             6 SPLBOID BIT(1),       /* ON = CONTENTS OF SPLREG IS B/O
                                        NUMBER WHICH MUST BE LOOKED UP
                                        AND CONVERTED TO CORRECT NODE ID
                                        FOR ROUTING.*/
                                     /* OFF = CONTROL BY SPLTRGET*/
             6 * BIT(6),               /* UNUSED   */
      3 SPLDAT  BDY(DWORD,8),
        4 SPLPGMDX FIXED(8),           /* INDEX NUMBER OF BATCH PROGRAM
                                          TO BE RUN. SEE CONSTANTS ON
                                          PAGE FOLLOWING THIS DSECT */
        4 SPLRECLN FIXED(16),          /* LENGTH OF THE ENTIRE RECORD
                                          INCLUDING THE PREFIX. */
    2 SPLDATA CHAR(2982) BDY(DWORD,3); /* USER DEFINED DATA RECORD    */
 DCL
   1 SPLDTBSE BIT(8) DEF(SPLPGMDX), /*OVERLAY PGM INDEX FOR MIRROR DB*/
     2 SPLDBRCD BIT(1),             /*IF ON RECORD = MIRROR DB RCD*/
     2 * BIT(7);
 @EJECT;
       /* THE FOLLOWING CONSTANTS DEFINE THE VALID PROGRAM INDEXES
       THAT MAY BE USED IN THE SPOOL QUEUE RECORDS.*/

         /****  INDEX NUMBERS '03' THRU '08' DEFINE PROGRAMS WHICH RUN
          IN THE NATIONAL HUB SYSTEM. */

         /****  INDEX NUMBERS '09' THRU '0F' DEFINE PROGRAMS WHICH RUN
          IN THE REGION SYSTEM. */
 DCL
   SPLIMS BIT(8) CONSTANT('03'X); /*EMF/IMS UPLINE RECORD PROCESSOR*/
 DCL
   SPLBLDR BIT(8) CONSTANT('04'X); /* BLDR/TAE UPLINE RECORD PROCESSOR*/
 DCL
   SPLTAE BIT(8) CONSTANT('05'X);  /* DP/TAE UPLINE RECORD PROCESSOR*/
 DCL
   SPLTEMF BIT(8) CONSTANT('06'X); /* EMF TRANSFER EMPLOYEE
                                              RECORD PROCESSOR*/
 DCL
   SPLUTLR BIT(8) CONSTANT('07'X);  /* RAMUTILR STAT RECORD RECEIVER */
 DCL
   SPLORGD BIT(8) CONSTANT('08'X);  /* REG RE-ORG DOWNLINE PROCESSOR */
 DCL
   SPLORGM BIT(8) CONSTANT('09'X);  /* REG RE-ORG TRANSFER PROCESSOR */
 DCL
   SPLEMFU BIT(8) CONSTANT('0A'X);  /* EMF DWNLINE RECORD PROCESSOR*/
 DCL
   SPLBOTU BIT(8) CONSTANT('0B'X);  /* BOT DWNLINE RECORD PROCESSOR*/
 DCL
   SPLTAEU BIT(8) CONSTANT('0C'X);  /* TAE DWNLINE RECORD PROCESSOR*/
 DCL
   SPLFCSTU BIT(8) CONSTANT('0D'X); /* FCS DWNLINE RECORD PROCESSOR*/
 DCL
   SPLCADV BIT(8) CONSTANT('0E'X);  /* IDA CAD UPLINE PROCESSOR*/
 DCL
   SPLNODE BIT(8) CONSTANT('0F'X);  /* NODE RECORD DOWNLINE PROCESSOR*/
 DCL
   SPLPMLU BIT(8) CONSTANT('10'X);  /* PLANT MAILING LABEL UPDATE*/
 DCL
   SPLFDBK BIT(8) CONSTANT('11'X);  /* FEEDBACK HUB RECEIVER*/
 DCL
   SPLDUM3 BIT(8) CONSTANT('12'X);  /* AVAILABLE */
 DCL
   SPLIMSG BIT(8) CONSTANT('13'X);  /* IMS SPOOL MSG RECEIVER*/
 DCL
   SPLQSRUP BIT(8) CONSTANT('14'X); /* QSTAR QUESTIONARE UPDATE PGM */
 DCL
   SPLQSRHR BIT(8) CONSTANT('15'X); /* QSTAR HUB RECEIVER PGM */
 DCL
   SPLQSRRR BIT(8) CONSTANT('16'X); /* QSTAR REGION RECEIVER PGM */
 DCL
   SPLDCSFN BIT(8) CONSTANT('17'X); /* DCS FNE CONFIG RECEIVE PGM */
 DCL
   SPLDUM4  BIT(8) CONSTANT('18'X); /* DCS LOST/STOLEN RECEIVE PGM */
 DCL
   SPLQARRR BIT(8) CONSTANT('19'X); /* QSAR REGION RECEIVE PGM */
 DCL
   SPLQARHR BIT(8) CONSTANT('1A'X); /* QSAR HUB RECEIVE PGM */
 DCL
   SPLQARTR BIT(8) CONSTANT('1B'X); /* QSAR TABLE DISTRIBUTION PGM */
 DCL
   SPLSECTR BIT(8) CONSTANT('1C'X); /* SEC LOCATOR DISTRIBUTOR PGM */
 DCL
   SPLMAX  BIT(8) CONSTANT('1D'X);  /* USED TO DETERMINE IF
                                                  VALID INDEX REQUEST */
      /* THE FOLLOWING DECLARES ARE USED TO IDENTIFY THE FILE NAMES
         USED IN THE SPOOLING OF AMS APPLICATION RECORDS
         THROUGHOUT THE RAMS NETWORK */
 DCL
   AMSUPSPL CHAR(8) CONSTANT('SPXMTDS '); /* UPWARD SPOOL FILE IN RGN*/
 DCL
   AMSDNSPL CHAR(8) CONSTANT('SPXMTDL '); /* DOWNWARD SPOOL FILE*/
    /* THE FOLLOWING MACRO CODE IS TO DETECT AND AVOID MULTIPLE
      DECLARES OF THE SAME 2 VARIABLES: "BATUPSPL" & "BATRCSPL"
      BY TWO INCLUDED DCL MACROS: "BATCHREC" & "SPOOLRCD" WHICH
      RESULTED IN RC12 IN COMPILE FOR CADIDCLR & PQSRHUB. (JAM) */
 %IF BATCK = 'ON' %THEN %GOTO SKIP1;
 %BATCK = 'ON';
 DCL
   BATUPSPL CHAR(8) CONSTANT('BTXMTDS ');/* UPWARD SPOOL FILE IN H2,H3*/
 DCL
   BATRCSPL CHAR(8) CONSTANT('BTRCVDS '); /* INPUT RECEIVER FILE*/
 %SKIP1:;
      /* NATIONAL SPOOL MANAGER BRANCHES OVERLAY*/
 DCL
   AMSPOOL ENTRY VALRG(*) BASED(CWAASPL);
 @EJECT;


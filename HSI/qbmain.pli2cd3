 QBMAIN :    PROC (@COMM)    OPTIONS(MAIN,REENTRANT) REORDER;
 /********************************************************************/
 /*                                                                  */
 /*                                               TIME:  09:11:20    */
 /*                                                                  */
 /*  TITLE:  CONTROLLER FOR CROSS LAR ACTIVITY PROCESSOR             */
 /*                                                                  */
 /*  FUNCTION:  THIS MODULE CALLS VARIOUS EXTERNAL SUBROUTINES TO    */
 /*             READ FROM MQSERIES QUEUE, VALIDATE THE RECORDS IN THE*/
 /*             QUEUES,PROCESS THEM AND WRITE THEM INTO OUT-GOING    */
 /*             MESSAGE QUEUE. THE UNIT OF WORK IS ONE MQSERIES      */
 /*             MESSAGE/RECORD READ.                                 */
 /*             THIS IS INITIATED BY THE TRANSACTION 'QBCR'          */
 /*                                                                  */
 /*  LANGUAGE:  PL/I                                                 */
 /*                                                                  */
 /*  MODULE TYPE:  REALTIME (CICS)                                   */
 /*                                                                  */
 /*  PARM:  NONE                                                     */
 /*                                                                  */
 /*                                                                  */
 /*  LINKED TO MODULES:                                              */
 /*     QBMQVL - DOES THE VALIDATION/VERIFICATION OF QUEUE DATA      */
 /*     QBMQMV - FORMATS THE RECORD FOR PROCESSING IN HSI            */
 /*     QBBIL1 - PROCESS THE HSI/HSD RECORD                          */
 /*     QBOVR1 - PROCESS THE OVERRIDE MESSAGE                        */
 /*     QBMQWR - FORMATS MESSAGE AND WRITES TO OUTBOUND QUEUE        */
 /*                                                                  */
 /*                                                                  */
 /*  INPUTS:   @COMM - THE COMMAREA                                  */
 /*                                                                  */
 /*  OUTPUTS:                                                        */
 /*                                                                  */
 /*  REPORTS:  NONE                                                  */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /*  CHRONOLOGICAL UPDATE LOG:                                       */
 /*  DATE:    REASON:  DRIVER: DESCRIPTION:            PROGRAMMER:   */
 /*---------- -------- ------- -------------------------------- ---- */
 /*06/20/2010 HSICROSS 0NSE    INITIAL VERSION             NIRANJANAA*/
 /*           IT0317104211                                           */
 /*11/23/2010 IT4211   0NSE    ASCA CHANGES                NIRANJANAA*/
 /*02/16/2012 RCQ1882  2HSC   COMMENTED CWA_COR_SYSID            NAK */
 /*                           ASSIGN 31 FOR BACKUP                   */
 /********************************************************************/
 DCL VERSION      CHAR(17) STATIC INIT('2HSC - 02/16/2012');
 DCL MODULE       CHAR( 6) STATIC INIT('QBMAIN');

 %DCL LANG CHAR;
 %LANG = 'PLI';
 %DCL INTEGER  CHAR;
 %INTEGER  = 'FIXED BIN(31,0)';
 %DCL SHORTINT CHAR;
 %SHORTINT = 'FIXED BIN(15,0)';
 %DCL CLLDATE  CHAR;
 %CLLDATE  = 'CHAR(3)';

 %PAGE;
 /*------------------------------------------------------------------*/
 /* THE COMPILE TIMESTAMP IS RETRIEVED USING THE FOLLOWING           */
 /* PREPROCESSOR STATEMENTS:                                         */
 /*                                                                  */
 /*    %DCL CMPTIME CHAR                                             */
 /*    %DCL COMPILETIME BUILTIN                                      */
 /*    %CMPTIME = ''''||COMPILETIME||''''                            */
 /*                                                                  */
 /* (SHOWN HERE SINCE PREPROCSSOR CODE DOESN'T PRINT WITH DEFAULT    */
 /*  COMPILE OPTIONS.  NOTE:  STATEMENT SEMICOLONS ARE NOT SHOWN     */
 /*  TO AVOID A COMPILER WARNING MESSAGE.)                           */
 /*                                                                  */
 /*------------------------------------------------------------------*/
 %DCL CMPTIME CHAR;
 %DCL COMPILETIME BUILTIN;
 %CMPTIME = ''''||COMPILETIME||'''';

 DCL COMPILE  CHAR(18) INIT(CMPTIME);
 %PAGE;
 /********************************************************************/
 /*   BEGIN DECLARES
 /********************************************************************/

 /*------------------------------------------------------------------*/
 /*   BUILTIN FUNCTION DECLARES                                      */
 /*   NOTE:  THE FOLLOWING CANNOT BE USED UNDER CICS:                */
 /*          DATE, TIME                                              */
 /*------------------------------------------------------------------*/

 DCL  ADDR         BUILTIN;
 DCL  CSTG         BUILTIN;         /* CURRENT STORAGE               */
 DCL  HIGH         BUILTIN;         /* HEX 'FF...'                   */
 DCL  LENGTH       BUILTIN;
 DCL  LOW          BUILTIN;         /* HEX '00...'                   */
 DCL  NULL         BUILTIN;         /* NULL POINTER VALUE            */
 DCL  ONLOC        BUILTIN;         /* NAME OF ENTRY-POINT WITH ERROR*/
 DCL  STG          BUILTIN;         /* STORAGE                       */
 DCL  STRING       BUILTIN;
 DCL  SUBSTR       BUILTIN;
 DCL  TRANSLATE    BUILTIN;

 /*------------------------------------------------------------------*/
 /*  FILE DECLARES                                                   */
 /*  NOTE:  SYSPRINT IS THE ONLY FILE THAT PL/I CAN WRITE TO         */
 /*         UNDER CICS.  SYSPRINT OUTPUT IS ASSIGNED TO THE 'CPLI'   */
 /*         TRANSIENT DATA QUEUE.  SYSPRINT NEED NOT BE DECLARED,    */
 /*         BUT IF IT IS, IT SHOULD BE DECLARED AS ...               */
 /*------------------------------------------------------------------*/

 DCL SYSPRINT FILE STREAM PRINT OUTPUT;


 %PAGE;
 /*------------------------------------------------------------------*/
 /*  POINTERS                                                        */
 /*------------------------------------------------------------------*/

 DCL @CWA           PTR INIT(NULL); /* POINTER TO CWA                */
 DCL @COMM          PTR;            /* INPUT COMMAREA POINTER        */
 
 DCL @COMM_QBMQIN1 PTR INIT(NULL);
 DCL @COMM_QBMQIN5 PTR INIT(NULL);
 DCL @COMM_QBERR1  PTR INIT(NULL);
 
 DCL @COMM_VALUE           FIXED BIN(31) BASED(ADDR(@COMM));
 DCL @COMM_QBMQIN1_VALUE   FIXED BIN(31) BASED(ADDR(@COMM_QBMQIN1));
 DCL @COMM_QBMQIN5_VALUE   FIXED BIN(31) BASED(ADDR(@COMM_QBMQIN5));


 %PAGE;
 DCL 1 ERROR_TXT  UNALIGNED,
    %INCLUDE AEQERRT;;

 %PAGE;
 DCL 1 COMM_FORMAT UNALIGNED, 
       2 TYPE_1,
         %INCLUDE QBMQIN1;,
       2 TYPE_5,
         %INCLUDE QBMQIN5;,
       2 COMMON_VARIABLES,
         %INCLUDE QBCROSS;,
       2 OUT_AEQCOMM,
         %INCLUDE AEQCOMM;,
       2 OUT_QBOVIN,
         %INCLUDE QBOVIN;;  


 DCL 1 COMM_QBMQIN1 UNALIGNED BASED(ADDR(COMM_FORMAT.TYPE_1)),
       %INCLUDE QBMQIN1;;
       
 %PAGE;
 DCL 1 COMM_QBMQIN5 UNALIGNED BASED(ADDR(COMM_FORMAT.TYPE_5)),
       %INCLUDE QBMQIN5;;
 %PAGE;
 DCL 1 COMM_QBCROSS UNALIGNED BASED(ADDR(COMM_FORMAT.COMMON_VARIABLES)),
       %INCLUDE QBCROSS;;

 %PAGE;
 DCL 1 COMM_AEQCOMM UNALIGNED BASED(ADDR(COMM_FORMAT.OUT_AEQCOMM)),
      %INCLUDE AEQCOMM ; ;

 %PAGE;       
 DCL 1 COMM_QBDBU3 UNALIGNED BASED(ADDR(COMM_FORMAT.OUT_AEQCOMM)),
       %INCLUDE AEQCOMM ; ;

 %PAGE;

 DCL 1 COMM_QBMQOVR UNALIGNED BASED(ADDR(COMM_FORMAT.OUT_QBOVIN)),
       %INCLUDE QBOVIN;;
 %PAGE;

 DCL 1 COMM_QBMQACK UNALIGNED BASED(ADDR(COMM_ERROR.TYPE_2)),
       %INCLUDE QBMQACK;;
 
 %PAGE;
 
 @COMM_QBERR1 = ADDR(COMM_FORMAT.COMMON_VARIABLES);
 
 DCL 1 COMM_ERROR UNALIGNED BASED(@COMM_QBERR1),
	2 COMMON_VARIABLES,
          %INCLUDE QBCROSS;,
	2 CP_AEQCOMM,
          %INCLUDE AEQCOMM;,
	2 TYPE_2,
          %INCLUDE QBMQACK;;
 
 %PAGE;

 DCL 1 STATS           UNALIGNED,
    %INCLUDE AEQQSRC ; ;
 %PAGE;
 /*------------------------------------------------------------------*/
 /*   COMMON WORK AREA FOR THE QSAR CICS REGION (OPTIONAL-IF NEEDED) */
 /*------------------------------------------------------------------*/
 DCL 1 CWA  UNALIGNED BASED(@CWA),
       %INCLUDE CWA ;

 %PAGE;
 
 /* ---------------------------------------------------------------- */
 /* IMS DECLARES                                                     */
 /* ---------------------------------------------------------------- */
 DCL 1 SSA_CAASCRSC_QUAL UNALIGNED,
       2 CAASCRSC_NAME     CHAR(8)  INIT('CAASCRSC'),
       2 CAASCRSC_QUAL     CHAR(1)  INIT('('),
       2 CAASCRSC_KEYNAME  CHAR(8)  INIT('IINTAREA'),
       2 CAASCRSC_OPR      CHAR(2)  INIT(' ='),
       2 CAASCRSC_KEYVAL   CHAR(31) INIT(''),
       2 CAASCRSC_ENDCHAR  CHAR(1)  INIT(')');

 %PAGE;
 
 /*------------------------------------------------------------------*/
 /*   MISCELLANEOUS DECLARES                                         */
 /*------------------------------------------------------------------*/
 DCL COMLENGTH       FIXED BIN(15)   INIT(0);
 DCL DIAG_TEXT             CHAR(80)  INIT('');
 DCL ERR1                  CHAR( 9)  INIT('QBCR001: ');
 DCL ERR2                  CHAR( 9)  INIT('QBCR002: ');
 DCL PIC_DATE              PIC'(8)9' INIT(0);
 DCL PIC_TIME              PIC'(6)9' INIT(0);
 DCL 1 PIC_TIME_OVER       BASED(ADDR(PIC_TIME)),
		3 PIC_HR   PIC'99',
		3 PIC_MIN  PIC'99',
		3 PIC_SEC  PIC'99';
 DCL PIC_RESP              PIC'(4)9'  INIT(0);
 DCL PIC_RESP2             PIC'(3)9'  INIT(0);

 DCL TEST_SW               BIT(1)   INIT('0'B);

 DCL ABSHHMMSS         CHAR(6)    INIT('');
 DCL ABSMMDD           CHAR(4)    INIT('');
 DCL ABSOLTIME   FIXED DEC(15)    INIT(0);
 DCL ABSTIME     FIXED DEC(15)    INIT(0);
 DCL ABSYEAR     FIXED BIN(31)    INIT(0);
 DCL ABSYEAR_PIC       PIC'9999'  INIT(0);
 DCL ABSYYMMDD         CHAR(6)    INIT('');
 DCL AREA_CHAR         CHAR(2)    INIT('');
 DCL AREA_PIC          PIC '99'   BASED(ADDR(AREA_CHAR));
 DCL DATE_YYYYMMDD     CHAR(10)   INIT('');
 DCL AREA_CROSS        PIC '99'   INIT('01');
 %PAGE;
 /*------------------------------------------------------------------*/
 /* IN CICS 1.7, THE EIB IS 85 BYTES.  THIS STRING IS USED TO SAVE   */
 /* AN EIB IMAGE AT THE TIME AN ERROR OCCURS BEFORE AN ERROR MODULE  */
 /* IS INVOKED...                                                    */
 /*------------------------------------------------------------------*/
 DCL EIB_STRING         CHAR(85)  BASED(DFHEIPTR);
 DCL RESPONSE     FIXED BIN(31)   INIT(0);
 DCL RESPONSE2    FIXED BIN(31)   INIT(0);

 /********************************************************************/
 /* ERROR PROCESSING                                                 */
 /* ----------------                                                 */
 /* IT IS THE PROGRAMMER'S RESPONSIBILITY TO CHECK THE RETURN CODE   */
 /* FROM EACH COMMAND LEVEL CALL, AS APPROPRIATE.                    */
 /********************************************************************/

 EXEC CICS
    IGNORE CONDITION ERROR;

 ON ERROR
  BEGIN;
   ON ERROR SYSTEM;                  /* PREVENT RECURSION ERROR */
   ET_PROGRAM_ID = ' QBMAIN';
   PIC_DATE = EIBDATE;
   PIC_TIME = EIBTIME;
   ET_EIB = EIB_STRING;
   ET_DUMPCODE = 'Y';
   
   DIAG_TEXT = ET_TEXT1;
   CALL WRITE_TO_OPERATOR;
   
   DIAG_TEXT = ERR1||MODULE||' ENTRY POINT '||ONLOC;
   CALL WRITE_TO_OPERATOR;
   
   DIAG_TEXT = 'DATE: '||PIC_DATE||' TIME: '||PIC_HR||':'||
   		PIC_MIN||' TRANSID '||EIBTRNID||' TASK NUM '||
   		EIBTASKN;
   CALL WRITE_TO_OPERATOR;
   
   COMM_QBCROSS.CERROR = '300';
   COMM_QBCROSS.TERROR = 'INTERNAL ERROR :'||
   				' CONTACT HSI DEVLOPMENT';
   
   DIAG_TEXT = MODULE||': ERROR - '||COMM_QBCROSS.CERROR||'-'||
   				COMM_QBCROSS.TERROR;
   CALL WRITE_TO_OPERATOR;
   
   ET_TEXT5 = ERR2||MODULE||' ABEND IN PROC: '||ONLOC;

   EXEC CICS XCTL PROGRAM('AEQERRP')
                    COMMAREA(ERROR_DATA)
                    RESP(RESPONSE);

   IF RESPONSE ^= DFHRESP(NORMAL)
       THEN DO;
         /* IF ALL ELSE FAILS, DUMP AND RETURN TO CICS */
         EXEC CICS ABEND
              ABCODE('MAIN')
              CANCEL;
       END;

   EXEC CICS RETURN; 

   END;

 %PAGE;
 /********************************************************************/
 /* MAIN PROCESSING                                                  */
 /********************************************************************/

 /*------------------------------------------------------------------*/
 /* GET ADDRESSABILITY TO THE CWA (OPTIONAL - IF NEEDED)             */
 /*------------------------------------------------------------------*/
 EXEC CICS ADDRESS CWA(@CWA)  RESP(RESPONSE); /* GET ADDR OF CWA     */

 IF CWA.CWA_QSAR_TRACE = 'Y' |
    CWA.CWA_QSAR_TRACE = 'T'
	
   THEN DO;
     TEST_SW = '1'B;
     DIAG_TEXT = MODULE||' ENTERED';
     CALL WRITE_TO_OPERATOR;
   END;

 IF RESPONSE ^= DFHRESP(NORMAL)      /* IF ABNORMAL RESPONSE THEN  */
   THEN DO;                           /* PASS CONTROL TO ERROR PGM  */
     ET_TEXT1 = ERR2 || MODULE || 'FAILURE TO GET ADDRESS OF CWA';
     SIGNAL ERROR;
   END;


 COMLENGTH = CSTG(COMM_FORMAT);

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': comm length '||COMLENGTH;
     CALL WRITE_TO_OPERATOR;
   END;

 EXEC CICS RETRIEVE INTO(COMM_FORMAT)
                    LENGTH(COMLENGTH)
                    RESP(RESPONSE)
                    RESP2(RESPONSE2);
 
 CALL SCHEDULE_PSB;
 
 IF(COMM_FORMAT.CERROR='') THEN
    DO;
      IF(COMM_FORMAT.CMSGIND='01') THEN
		CALL VALIDATE_RECORD;           /* FOR LINKING TO QBMQVL */
	ELSE;
    END;
 ELSE DO;
    IF (COMM_FORMAT.CMSGIND='01') THEN
    DO;
	CALL CREATE_ERROR_RECORD;
	CALL WRITE_RECORD;                 /* FOR LINKING TO QBMQWR */
	CALL TERM_PSB;
    END;
 END;


 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': FVALID '||COMM_QBCROSS.FVALID||
                         ' CERROR '||COMM_QBCROSS.CERROR||
                         ' CMSGIND '||COMM_QBCROSS.CMSGIND||
                         ' PART TRLR '||COMM_AEQCOMM.S0IPARTR;
     CALL WRITE_TO_OPERATOR;
   END;
 
 IF(COMM_FORMAT.FVALID='Y') THEN
 DO;
    CALL FORMAT_RECORD;                /* FOR LINKING TO QBMQMV */
    IF (COMM_FORMAT.CERROR='') THEN 
    DO;
	    CALL TERM_PSB;
        IF (COMM_FORMAT.CMSGIND = '01') THEN
        DO;
		    IF (COMM_AEQCOMM.S0IPARTR ^= ' ') THEN
				CALL PART_TRAILER_PROCESSING;
            ELSE CALL HSI_PROCESS;       /* FOR LINKING TO QBBIL1 */
        END;
        ELSE CALL OVR_PROCESS;           /* FOR LINKING TO QBOVR1 */
    END;
    ELSE DO;
        IF (COMM_FORMAT.CMSGIND='01') THEN
        DO;
          CALL CREATE_ERROR_RECORD;
          CALL WRITE_RECORD;
		  CALL TERM_PSB;
        END;
    END;
 END;  
 ELSE DO;
   IF (COMM_FORMAT.CMSGIND='01') THEN
   DO;
     CALL CREATE_ERROR_RECORD;
     CALL WRITE_RECORD;                 /* FOR LINKING TO QBMQWR */
	 CALL TERM_PSB;
   END;
 END;

 CALL FREE_STORAGE;   
 CALL IT_QUITS;
 
 %PAGE;

 VALIDATE_RECORD: PROC;
 /********************************************************************/
 /*PASS CONTROL TO QBMQVL TO VALIDATE THE RECORDS READ FROM THE QUEUE*/
 /********************************************************************/

   IF TEST_SW                     /* ********** TEST ONLY ********** */
   THEN DO;
     DIAG_TEXT = MODULE||': LINK TO QBMQVL TO VALIDATE RECORD';
     CALL WRITE_TO_OPERATOR;
   END;

   EXEC CICS LINK PROGRAM('QBMQVL')
                  COMMAREA(COMM_FORMAT)
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC_RESP  = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBMQVL RESP '||
                             PIC_RESP|| ' RESP2 '||PIC_RESP2;
       SIGNAL ERROR;
     END;

   IF TEST_SW & RESPONSE = DFHRESP(NORMAL)
     THEN DO;
	DIAG_TEXT = MODULE||': FVALID = '||COMM_FORMAT.FVALID;
	CALL WRITE_TO_OPERATOR;
     END;

 END VALIDATE_RECORD;

 %PAGE;

 FORMAT_RECORD: PROC;
 /********************************************************************/
 /* PASS CONTROL TO QBMQMV TO FORMAT RECORDS TO PASS TO HSI          */
 /********************************************************************/

   IF TEST_SW                     /* ********** TEST ONLY ********** */
   THEN DO;
	DIAG_TEXT = MODULE||': LINK TO QBMQMV TO FORMAT RECORDS';
	CALL WRITE_TO_OPERATOR;
   END;
   
   
   EXEC CICS LINK PROGRAM('QBMQMV')
                  COMMAREA(COMM_FORMAT)
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
   THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
     PIC_RESP  = RESPONSE;
     PIC_RESP2 = RESPONSE2;
     ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBMQMV RESP '||
                       PIC_RESP|| ' RESP2 '||PIC_RESP2;
     SIGNAL ERROR;
   END;
   
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': AFTER QBMQMV';
       CALL WRITE_TO_OPERATOR;
     END;

      
 END FORMAT_RECORD;

 %PAGE;
 HSI_PROCESS: PROC;
 /********************************************************************/
 /* PASS CONTROL TO QBBIL1 TO START HSI PROCESSING                   */
 /********************************************************************/

   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': LINK TO QBBIL1 TO START HSI PROCESSING';
       CALL WRITE_TO_OPERATOR;
     END;
    
   EXEC CICS XCTL PROGRAM('QBBIL1')
                  COMMAREA(COMM_AEQCOMM)
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC_RESP  = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBBIL1 RESP '||
                     PIC_RESP|| ' RESP2 '||PIC_RESP2;
       SIGNAL ERROR;
     END;

 END HSI_PROCESS;

 %PAGE;
 PART_TRAILER_PROCESSING: PROC;
 /********************************************************************/
 /* PASS CONTROL TO QBDBU3 TO START PART TRAILER PROCESSING          */
 /********************************************************************/
 DCL PICLENGTH   PIC'(9)9' INIT(0);
 
   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': LINK TO QBDBU3 FOR PART TRAILER '||
                           'PROCESSING';
       CALL WRITE_TO_OPERATOR;
       PICLENGTH = CSTG(COMM_QBDBU3);
       DIAG_TEXT = MODULE||': COMM LENGTH '||PICLENGTH;
       CALL WRITE_TO_OPERATOR;
     END;

   EXEC CICS XCTL PROGRAM('QBDBU3')
                  COMMAREA(COMM_QBDBU3)
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC_RESP  = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBDBU3 RESP '||
                        PIC_RESP|| ' RESP2 '||PIC_RESP2;
       SIGNAL ERROR;
     END;

 END PART_TRAILER_PROCESSING;

 %PAGE;
 OVR_PROCESS: PROC;
 /********************************************************************/
 /* PASS CONTROL TO QBOVR1 TO START OVR PROCESSING                   */
 /********************************************************************/

   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': START QBOVR1 TO PROCESS OVERRIDE RECS';
       CALL WRITE_TO_OPERATOR;
     END;

   EXEC CICS START TRANSID('QBVR')
                   FROM(COMM_QBMQOVR)
                   RESP(RESPONSE)
                   RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC_RESP  = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON STARTING QBVR. RESP '||
                        PIC_RESP|| ' RESP2 '||PIC_RESP2;
       SIGNAL ERROR;
     END;

 END OVR_PROCESS;

 %PAGE;
 CREATE_ERROR_RECORD: PROC;
 /********************************************************************/
 /* PASS CONTROL TO QBERR1 TO CREATE THE ACKNOWLEDGEMENT RECORD WITH */
 /* ERROR MESSAGE                                                    */
 /********************************************************************/

   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': LINK TO QBERR1 TO CREATE ACK '||
                           'ERROR RECORD';
       CALL WRITE_TO_OPERATOR;
       DIAG_TEXT = MODULE||': MQ-S0IDOCMN = '||COMM_QBMQIN1.S0IDOCMN;
       CALL WRITE_TO_OPERATOR;
       DIAG_TEXT = MODULE||': CERROR = '||
                               COMM_FORMAT.COMMON_VARIABLES.CERROR;
       CALL WRITE_TO_OPERATOR;
     END;
  
   COMM_QBMQACK = '';
   
   EXEC CICS LINK PROGRAM('QBERR1')
                  COMMAREA(COMM_ERROR)
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */
				  
   IF TEST_SW                    /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||
                  ': CERROR = '||COMM_FORMAT.COMMON_VARIABLES.CERROR||
		       'TERROR='||COMM_FORMAT.COMMON_VARIABLES.TERROR;
     END;
					
   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC_RESP  = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBMQMV RESP '||
                        PIC_RESP|| ' RESP2 '||PIC_RESP2;
       SIGNAL ERROR;
     END;
     ELSE DO;
       COMM_QBMQACK.IDOCNUM   = COMM_QBMQIN1.S0IDOCMN;
       COMM_QBMQACK.CHIGHSEV  = COMM_QBMQIN1.CGQHIGSE;
       COMM_QBMQACK.ICEBRANCH = COMM_QBMQIN1.CMIBOCE;
       COMM_QBMQACK.ICETERR   = COMM_QBMQIN1.CIICETER;
       COMM_QBMQACK.IEMPSER   = COMM_QBMQIN1.S0IEMPSE;
       COMM_QBMQACK.DACTVTY   = COMM_QBMQIN1.EMPL_DATE;
       COMM_QBMQACK.DAUDIT    = COMM_QBMQIN1.AUDIT_DATE;
       COMM_QBMQACK.TAUDIT    = COMM_QBMQIN1.AUDIT_TIME;
	   
	   /* INCREMENT QSRCQBN VALUE OF QSARLARC TO DENOTE TYPE 1     */
	   /* RECORDS IN ERROR                                         */
	   CALL UPDATE_CTLDB('QSARLARC');
     END;     

 END CREATE_ERROR_RECORD;

 %PAGE;

 WRITE_RECORD: PROC;
 /********************************************************************/
 /* PASS CONTROL TO QBMQWR TO WRITE RECORDS TO QUEUE                 */
 /********************************************************************/

   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': CRECERR = '||COMM_QBMQACK.CRECERR||
       	                   ' TERRDESC='||COMM_QBMQACK.TERRDESC;
       CALL WRITE_TO_OPERATOR;
       DIAG_TEXT = MODULE||': LINK TO QBMQWR TO WRITE RECORDS';
       CALL WRITE_TO_OPERATOR;
     END;

   EXEC CICS LINK PROGRAM('QBMQWR')
      /*          SYSID(CWA_COR_SYSID)  RCQ1882 */
                  COMMAREA(COMM_QBMQACK)
                  SYNCONRETURN
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC_RESP  = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBMQWR RESP '||
                        PIC_RESP|| ' RESP2 '||PIC_RESP2;

       ET_PROGRAM_ID = 'QBMAIN ';
       PIC_DATE = EIBDATE;
       PIC_TIME = EIBTIME;
       ET_EIB = EIB_STRING;
       
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBMQWR RESP '||
                        PIC_RESP|| ' RESP2 '||PIC_RESP2;
       SIGNAL ERROR;

   END;

   /* INCREMENT QSRCQBN VALUE OF QSARACKC TO DENOTE TYPE 2     */
   /* RECORDS SENT FOR ERROR                                   */
   CALL UPDATE_CTLDB('QSARACKC');
	   
 END WRITE_RECORD;
 %PAGE;
 
 SCHEDULE_PSB : PROC;
 /********************************************************************/
 /* THIS PROCEDURE SCHEDULES THE AEQDBU3 PSB                         */
 /********************************************************************/
 
   IF TEST_SW
    THEN DO;
      DIAG_TEXT = MODULE||': SCHEDULE PSB AEQDU3';
      CALL WRITE_TO_OPERATOR();
    END;
   
   ET_TEXT1 = ERR2||MODULE||' ABOUT TO SCHEDULE PSB AEQDBU3';
   
   EXEC DLI SCHD PSB(AEQDU3);
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': EXEC DLI SCHD PSB(AEQDU3) DIBSTAT ('||
                   DIBSTAT||')';
       CALL WRITE_TO_OPERATOR();
     END;

   IF DIBSTAT = ''
     THEN ;
     ELSE DO;
       DIAG_TEXT = ERR2||MODULE||
                ' UNABLE TO SCHEDULE PSB AEQDU3, STAT = '
                 ||DIBSTAT;
       EXEC CICS WRITE OPERATOR TEXT(DIAG_TEXT);
	   SIGNAL ERROR;
     END;
 
 END SCHEDULE_PSB;
   
 /********************************************************************/
 /* THIS PROCEDURE INCREMENTS THE QSRCQBN COUNTER IN IMS DB FOR THE  */
 /* CORRESPONDING RECORD TYPE - QSARLARC FOR TYPE1 AND QSARACKC FOR  */
 /* TYPE2 TO DENOTE THE COUNT OF ERRORED TYPE1 RECORDS               */
 /********************************************************************/
 UPDATE_CTLDB : PROC(DB_KEY);
 
 DCL DB_KEY CHAR(8);
 
 /* RCQ1882 :   Assign AREA_CROSS */
   
   IF CWAPRIHB = 'H' THEN AREA_CROSS='31';

   IF TEST_SW
     THEN DO;
        DIAG_TEXT = MODULE||': UPDATE_CTLDB';
        CALL WRITE_TO_OPERATOR();
		DIAG_TEXT = MODULE||': DB_KEY-'||DB_KEY;
		CALL WRITE_TO_OPERATOR();
     END;

   EXEC CICS ASKTIME ABSTIME(ABSTIME);
   EXEC CICS FORMATTIME ABSTIME(ABSTIME) YYMMDD(ABSYYMMDD)
                                         YEAR(ABSYEAR)
                                         TIME(ABSHHMMSS)
                                         YYYYMMDD(DATE_YYYYMMDD)
                                         RESP(RESPONSE);

   IF TEST_SW
     THEN DO;
        DIAG_TEXT = MODULE||': DATE-'||SUBSTR(DATE_YYYYMMDD,1,8);
        CALL WRITE_TO_OPERATOR();
     END;

   CAASCRSC_KEYVAL = DB_KEY || AREA_CROSS ||
                     SUBSTR(DATE_YYYYMMDD,1,8);

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CONTROL KEY '||CAASCRSC_KEYVAL;
       CALL WRITE_TO_OPERATOR;
     END;

   EXEC DLI GU USING PCB(2)
               SEGMENT('CAASCRSC')
               INTO(STATS)
               WHERE (IINTAREA= CAASCRSC_KEYVAL);

   IF DIBSTAT = ''              /* RECORD FOUND */
     THEN DO;
       STATS.QSRCDATE = ABSYYMMDD;
       STATS.QSRCTIME = ABSHHMMSS;
       STATS.QSRCQBN  = STATS.QSRCQBN + 1;

       ET_TEXT1 = ERR1||MODULE||' UNABLE TO REPL CONTROL DATA BASE ';

       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': REPL CONTROL DB '||CAASCRSC_KEYVAL;
           CALL WRITE_TO_OPERATOR;  /* ******** TEST ONLY ******** */
         END;


       EXEC DLI REPL USING PCB(2)
                     SEGMENT('CAASCRSC')
                     FROM(STATS);

       ET_TEXT1 = SUBSTR(ET_TEXT1,1,50) || ' STAT = ' || DIBSTAT;
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': DIBSTAT = '||DIBSTAT;
           CALL WRITE_TO_OPERATOR;
         END;
       IF DIBSTAT ^= ''
         THEN SIGNAL ERROR;
     END;
     ELSE
       IF DIBSTAT = 'GE'                     /* NO RECORD FOUND */
       THEN DO;
         STATS = '';
         STATS.QSRCDATE = ABSYYMMDD;
         STATS.QSRCTIME = ABSHHMMSS;
	 STATS.QSRCKEY1 = DB_KEY;
	 STATS.QSRCACTD = SUBSTR(DATE_YYYYMMDD,1,8);

         STATS.QSRCAREA = AREA_CROSS;

	 STATS.QSRCQBN = STATS.QSRCQBN + 1;

         ET_TEXT1 = ERR1||MODULE||' UNABLE TO ISRT CONTROL DATA BASE';

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': INSERT CONTROL DB '||
                                            QSRCAREA||QSRCACTD;
             CALL WRITE_TO_OPERATOR;
             DCL CHAR80 CHAR(80) BASED(ADDR(STATS));
             DIAG_TEXT = MODULE||' ISRT CONTROL REC '||
                                 SUBSTR(CHAR80,1,40);
             CALL WRITE_TO_OPERATOR;
           END;

         EXEC DLI INSERT USING PCB(2)
                         SEGMENT('CAASCRSC')
                         FROM(STATS);

         ET_TEXT1 = SUBSTR(ET_TEXT1,1,50) || ' STAT= ' || DIBSTAT;
         ET_TEXT2 = ERR2||MODULE||' 3 CNTL KEY = ' ||
                     QSRCKEY1||QSRCAREA||QSRCACTD;

         IF DIBSTAT ^= '  '
           THEN SIGNAL ERROR;
       END;

     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': CONTROL DB DIBSTAT: ('||DIBSTAT||')';
         CALL WRITE_TO_OPERATOR();
         DIAG_TEXT = MODULE||': OUT OF UPDATE CONTROL ' ;
         CALL WRITE_TO_OPERATOR();
       END;

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CONTROL KEY '||CAASCRSC_KEYVAL;
       CALL WRITE_TO_OPERATOR;
	   DIAG_TEXT = MODULE||': QSRCQBN= '||QSRCQBN;
       CALL WRITE_TO_OPERATOR;
     END;

 END UPDATE_CTLDB;

 %PAGE;

 TERM_PSB : PROC;
 /********************************************************************/
 /* TERMINATE PSB                                                    */
 /********************************************************************/

    IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': TERMINATE PSB';
       CALL WRITE_TO_OPERATOR;
     END;
	 
    EXEC DLI TERMINATE;
	
 END TERM_PSB;
 
 FREE_STORAGE: PROC;
 /********************************************************************/
 /* FREE THE STORAGE                                                 */
 /********************************************************************/

   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': IN FREE_STORAGE PROC';
       CALL WRITE_TO_OPERATOR;
   END;

   IF @COMM_QBMQIN1 ^= NULL
		THEN CALL CICS_FREEMAIN(@COMM_QBMQIN1);
   IF @COMM_QBMQIN5 ^= NULL
		THEN CALL CICS_FREEMAIN(@COMM_QBMQIN5);

 END FREE_STORAGE;

 %PAGE;
 /********************************************************************/
 /* FREE THE STORAGE                                                 */
 /********************************************************************/
 CICS_FREEMAIN: PROC(@PTR);

   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': IN FREEMAIN PROC';
       CALL WRITE_TO_OPERATOR;
   END;

   DCL @PTR POINTER;
   DCL AREA CHAR(1) BASED(@PTR);

   IF @PTR ^= NULL THEN
     EXEC CICS FREEMAIN DATA(AREA);

   @PTR = NULL;

 END CICS_FREEMAIN;

 %PAGE;

 IT_QUITS: PROC;
 /********************************************************************/
 /* RETURN TO CICS                                                   */
 /********************************************************************/

   EXEC CICS RETURN;

 END IT_QUITS;

 %PAGE;
 WRITE_TO_OPERATOR: PROC;
 /********************************************************************/
 /* WRITE TO OPERATOR                   ** FOR TEST ONLY **          */
 /********************************************************************/

   EXEC CICS WRITEQ TD QUEUE('CESE') FROM(DIAG_TEXT) LENGTH(80);

 END WRITE_TO_OPERATOR;


 END QBMAIN ;


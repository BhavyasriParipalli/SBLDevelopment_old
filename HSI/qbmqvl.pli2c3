 QBMQVL  :
    PROC(@COMM) OPTIONS(MAIN,REENTRANT) REORDER;
 /********************************************************************/
 /*                                                                  */
 /*  PROGRAM:  QBMQVL      VERSION NR:  01        DATE:  06/22/10    */
 /*                                                                  */
 /*  TITLE:  CROSS/AR DATA VALIDATION MODULE                         */
 /*                                                                  */
 /*  FUNCTION:  VALIDATE DATA RECEIVED FROM CROSS/LAR                */
 /*                                                                  */
 /*                                                                  */
 /*  LANGUAGE:  PL/I                                                 */
 /*                                                                  */
 /*  MODULE TYPE:  REALTIME (CICS)                                   */
 /*                                                                  */
 /*  PARM:  @COMM - POINTER TO THE COMMAREA                          */
 /*                                                                  */
 /*                                                                  */
 /*  INTERFACES:  NONE                                               */
 /*                                                                  */
 /*                                                                  */
 /*  INPUTS:   QBMQIN1, QBMQIN5, QBCROSS FROM QBMAIN                 */
 /*                                                                  */
 /*                                                                  */
 /*  OUTPUTS:  QBMAIN1, QBMQIN5, QBCROSS                             */
 /*                                                                  */
 /*                                                                  */
 /*  REPORTS:  NONE                                                  */
 /*                                                                  */
 /*                                                                  */
 /*  CHRONOLOGICAL UPDATE LOG:                                       */
 /*  DATE:    REASON:  DRIVER: DESCRIPTION:                     PGMR:*/
 /* --------- -------- ------ --------------------------------- -----*/
 /*  06/22/10 IT4211   0NSE    INITIAL VERSION                   AM  */
 /*01/27/2012 RCQ1882  2HSC   RECOMPILED TO USE THE NEW CWA      NAK */
 /********************************************************************/
 DCL VERSION    CHAR(17) STATIC INIT('2HSC - 01/27/2012');
 DCL MODULE     CHAR( 7) STATIC INIT('QBMQVL');

 %PAGE;
 /*------------------------------------------------------------------*/
 /* THE PREPROCESSOR IS USED TO DECLARE THE FOLLOWING CONSTANTS:     */
 /*                                                                  */
 /*    YES    = 'Y'                                                  */
 /*    NO     = 'N'                                                  */
 /*    BILL   = 'B'                                                  */
 /*    NOBILL = 'N'                                                  */
 /*    REVIEW = 'R'                                                  */
 /*    NOT_ELIGIBLE = 'X'                                            */
 /*------------------------------------------------------------------*/
 %DCL LANG CHAR;
 %LANG = 'PLI';
 %DCL INTEGER  CHAR;
 %INTEGER  = 'FIXED BIN(31,0)';
 %DCL SHORTINT CHAR;
 %SHORTINT = 'FIXED BIN(15,0)';
 %DCL CLLDATE  CHAR;
 %CLLDATE  = 'CHAR(3)';
 %DCL YES      CHAR;
 %YES = '''Y''';
 %DCL NO       CHAR;
 %NO  = '''N''';
 %DCL BILL     CHAR;
 %BILL   = '''B''';
 %DCL NOBILL   CHAR;
 %NOBILL = '''N''';
 %DCL REVIEW   CHAR;
 %REVIEW = '''R''';
 %DCL NOT_ELIGIBLE CHAR;
 %NOT_ELIGIBLE = '''X''';

 %PAGE;
 /*------------------------------------------------------------------*/
 /* THE COMPILE TIMESTAMP IS RETRIEVED USING THE FOLLOWING           */
 /* PREPROCESSOR STATEMENTS:                                         */
 /*                                                                  */
 /*    %DCL CMPTIME CHAR                                             */
 /*    %DCL COMPILETIME BUILTIN                                      */
 /*    %CMPTIME = ''''||COMPILETIME||''''                            */
 /*                                                                  */
 /* (SHOWN HERE SINCE PREPROCSSOR CODE DOESN'T PRINT WITH DEFAULT    */
 /*  COMPILE OPTIONS.  NOTE:  STATEMENT SEMICOLONS ARE NOT SHOWN     */
 /*  TO AVOID A COMPILER WARNING MESSAGE.)                           */
 /*                                                                  */
 /*------------------------------------------------------------------*/
 %DCL CMPTIME CHAR;
 %DCL COMPILETIME BUILTIN;
 %CMPTIME = ''''||COMPILETIME||'''';

 DCL COMPILE  CHAR(18) INIT(CMPTIME);
 %PAGE;
 /********************************************************************/
 /*   BEGIN DECLARES
 /********************************************************************/

 /*------------------------------------------------------------------*/
 /*   BUILTIN FUNCTION DECLARES                                      */
 /*   NOTE:  THE FOLLOWING CANNOT BE USED UNDER CICS:                */
 /*          DATE, TIME                                              */
 /*------------------------------------------------------------------*/

 DCL  ADDR         BUILTIN;
 DCL  CSTG         BUILTIN;         /* CURRENT STORAGE               */
 DCL  NULL         BUILTIN;         /* NULL POINTER VALUE            */
 DCL  ONLOC        BUILTIN;         /* NAME OF ENTRY-POINT WITH ERROR*/
 DCL  SUBSTR       BUILTIN;
 DCL  VERIFY       BUILTIN;


 /*------------------------------------------------------------------*/
 /*  FILE DECLARES                                                   */
 /*  NOTE:  SYSPRINT IS THE ONLY FILE THAT PL/I CAN WRITE TO         */
 /*         UNDER CICS.  SYSPRINT OUTPUT IS ASSIGNED TO THE 'CPLI'   */
 /*         TRANSIENT DATA QUEUE.  SYSPRINT NEED NOT BE DECLARED,    */
 /*         BUT IF IT IS, IT SHOULD BE DECLARED AS ...               */
 /*------------------------------------------------------------------*/

 DCL SYSPRINT FILE STREAM PRINT OUTPUT;

 /*------------------------------------------------------------------*/
 /*  SET RUN-TIME OPTIONS                                            */
 /*------------------------------------------------------------------*/

 /*  DCL PLIXOPT CHAR(25) VAR STATIC EXTERNAL         */
 /*                  INIT('STAE,NR,ISA(12K)')    */
 DCL PLIXOPT      CHAR(250)
 INIT('STACK(12K,2K,ANY,FREE),HEAP(2K,2K,ANYWHERE,KEEP),
 MSGFILE(CEEMSG),THREADHEAP(2K,2K,ANY,),LIBSTACK(2K,2K,FREE),
 ANYHEAP(2K,2K,ANY,FREE),,BELOWHEAP(4K,2K,FREE),
 TRAP(ON),RPTOPTS(OFF),RPTSTG(OFF)')
                                   STATIC VARYING EXTERNAL;

 %PAGE;
 /*------------------------------------------------------------------*/
 /*  POINTERS                                                        */
 /*------------------------------------------------------------------*/
 DCL @COMM         PTR;             /* POINTER TO COMMAREA --        */
                                    /* (PASSED FROM CALLING PROGRAM) */
                                    
 DCL @CWA          PTR INIT(NULL);  /* POINTER TO CWA                */
 
 %PAGE;

 DCL 1 MQ_IN  UNALIGNED BASED(@COMM),
		2 TYPE_1,
			%INCLUDE QBMQIN1;,
		2 TYPE_5,
			%INCLUDE QBMQIN5;,
		2 COMMON_VARIABLES,
			%INCLUDE QBCROSS;,
	        2 OUT_AEQCOMM,
		  %INCLUDE AEQCOMM;  ,
                2 OUT_QBOVIN,
		   %INCLUDE QBOVIN;; 
 %PAGE;
 DCL 1 ABEND_CD UNALIGNED,
    % INCLUDE QBABEND;
 
 %PAGE;
 DCL 1 ERROR_TXT  UNALIGNED,
    %INCLUDE AEQERRT ; ;
  
 %PAGE;
 /*------------------------------------------------------------------*/
 /*   COMMON WORK AREA FOR THE QSAR CICS REGION (OPTIONAL-IF NEEDED) */
 /*------------------------------------------------------------------*/
 DCL 1 CWA  UNALIGNED BASED(@CWA),
       %INCLUDE CWA ;

 %PAGE;
 /*------------------------------------------------------------------*/
 /*   MISCELLANEOUS DECLARES                                         */
 /*------------------------------------------------------------------*/
 
 DCL DIAG_TEXT               CHAR(80)   INIT('');
 DCL I                 FIXED BIN (15)   INIT(0);
 DCL J                 FIXED BIN (15)   INIT(0);
 DCL DEFAULT_DATE            CHAR(8)    INIT('19000101');
 DCL PIC_DATE                PIC'(6)9'  INIT(0); 
 DCL PIC_PARTPR              PIC'(10)9' INIT(0);
 DCL PIC_PARTCS              PIC'(10)9' INIT(0);
 DCL PIC_TIME                 PIC'(6)9' INIT(0);  
 DCL 1 PIC_TIME_OVER   BASED(ADDR(PIC_TIME)),
       3 PIC_HR        PIC'99',
       3 PIC_MIN       PIC'99',
       3 PIC_SEC       PIC'99'; 

 DCL TEST_SW           BIT(1)    INIT('0'B);
 DCL FOUND             BIT(1)    INIT('0'B);
 
 %PAGE;
 /*------------------------------------------------------------------*/
 /* IN CICS 1.7, THE EIB IS 85 BYTES.  THIS STRING IS USED TO SAVE   */
 /* AN EIB IMAGE AT THE TIME AN ERROR OCCURS BEFORE AN ERROR MODULE  */
 /* IS INVOKED...                                                    */
 /*------------------------------------------------------------------*/
 DCL EIB_STRING         CHAR(85) BASED(DFHEIPTR);
 DCL RESPONSE           FIXED BIN(31) INIT(0);

 /********************************************************************/
 /* ERROR PROCESSING                                                 */
 /* ----------------                                                 */
 /* IT IS THE PROGRAMMER'S RESPONSIBILITY TO CHECK THE RETURN CODE   */
 /* FROM EACH COMMAND LEVEL CALL, AS APPROPRIATE.                    */
 /********************************************************************/

 EXEC CICS
      IGNORE CONDITION ERROR;

 ON ERROR
   BEGIN;
     ON ERROR SNAP SYSTEM;                /* PREVENT RECURSION ERROR */
     PIC_DATE = EIBDATE;
     PIC_TIME = EIBTIME;
     ET_PROGRAM_ID = 'QBMQVL';
     ET_EIB = EIB_STRING;
     /*WTO_FLAG = 'Y';
     ET_DUMPCODE = 'N';*/
     
     IF TEST_SW
       THEN DO;
            DIAG_TEXT = 'Date :'   || PIC_DATE ||
                        'Time :'   || PIC_TIME ||
                        'Module :' || ET_PROGRAM_ID
                        || 'ON ERROR BLOCK';
            CALL WRITE_TO_OPER;
       END;
     CERROR = '300';
     TERROR = 'INTERNAL ERROR : CONTACT HSI DEVLOPMENT';

     DIAG_TEXT = MODULE||': ERROR - '||CERROR||'-'||TERROR;
     CALL WRITE_TO_OPER;

     EXEC CICS RETURN;

   END;

 %PAGE;
 /********************************************************************/
 /* MAIN PROCESSING                                                  */
 /********************************************************************/
 /*------------------------------------------------------------------*/
 /* GET ADDRESSABILITY TO THE CWA (OPTIONAL - IF NEEDED)             */
 /*------------------------------------------------------------------*/
 EXEC CICS ADDRESS                     /* GET ADDR OF CWA            */
      CWA(@CWA)  RESP(RESPONSE);

 IF RESPONSE ^= DFHRESP(NORMAL)        /* IF ABNORMAL RESPONSE THEN  */
   THEN DO;                            /* PASS CONTROL TO ERROR PGM  */
     DIAG_TEXT = MODULE||': ENTERED'||' FAILURE TO GET ADDRESS OF CWA';
     CALL WRITE_TO_OPER;
     SIGNAL ERROR;
   END;


 IF CWA_QSAR_TRACE = 'Y' | 
    CWA_QSAR_TRACE = 'T'
   THEN DO;
     TEST_SW = '1'B;
     DIAG_TEXT = MODULE||': ENTERED' ;
     CALL WRITE_TO_OPER;
     DIAG_TEXT = MODULE||': TYPE OF MESSAGE '||MQ_IN.CMSGIND;
     CALL WRITE_TO_OPER;
   END;

 IF MQ_IN.CMSGIND = '01' THEN
       CALL VALIDATE_01;
   ELSE;
     
 EXEC CICS RETURN;
   
 /*------------------------------------------------------------------*/
 /*  END OF MAIN PROCESSING                                          */
 /*------------------------------------------------------------------*/
 
 %PAGE;
 /*------------------------------------------------------------------*/
 /* MOVE INPUT DATA INTO THE AEQCOMM STRUCTURE FOR QBBIL1            */
 /*------------------------------------------------------------------*/
 VALIDATE_01 : PROC;
 
   CALL CHECK_DATES;
   CALL CHECK_PART_DATA;
   CALL CHECK_BIT_FIELDS;
   
 END VALIDATE_01;


 %PAGE;
 /********************************************************************/
 /* CHECK ALL DATE FIELDS RECEIVED FROM CROSS AND INCASE BLANK       */
 /* POPULATE 1900/01/01                                              */
 /********************************************************************/
 CHECK_DATES : PROC;

   IF TEST_SW
     THEN DO;
        DIAG_TEXT = MODULE||': INSIDE CHECK DATE LOGIC';
        CALL WRITE_TO_OPER;
     END;

   IF MQ_IN.TYPE_1.EMPL_DATE = ' ' THEN
       MQ_IN.TYPE_1.EMPL_DATE = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.AUDIT_DATE = ' ' THEN
        MQ_IN.TYPE_1.AUDIT_DATE = DEFAULT_DATE;
    
   IF MQ_IN.TYPE_1.CS1BSRYY = ' ' & MQ_IN.TYPE_1.CS1BSRMM = ' ' & 
      MQ_IN.TYPE_1.CS1BSRDD = ' ' THEN
    DO;
         MQ_IN.TYPE_1.CS1BSRYY = SUBSTR(DEFAULT_DATE,1,4);
         MQ_IN.TYPE_1.CS1BSRMM = SUBSTR(DEFAULT_DATE,5,2);
         MQ_IN.TYPE_1.CS1BSRYY = SUBSTR(DEFAULT_DATE,7,2);
    END;

   IF MQ_IN.TYPE_1.S0DCALCM = ' ' & MQ_IN.TYPE_1.S0DCALCD = ' ' &
      MQ_IN.TYPE_1.S0DCALCY = ' ' THEN
    DO;
        MQ_IN.TYPE_1.S0DCALCY = SUBSTR(DEFAULT_DATE,1,4);
        MQ_IN.TYPE_1.S0DCALCM = SUBSTR(DEFAULT_DATE,5,2);
        MQ_IN.TYPE_1.S0DCALCD = SUBSTR(DEFAULT_DATE,7,2);
    END;

   IF MQ_IN.TYPE_1.CHDSCAPR = ' ' THEN
              MQ_IN.TYPE_1.CHDSCAPR = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.CHDORIRR  = ' ' THEN
              MQ_IN.TYPE_1.CHDORIRR = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.CIDEFFST = ' ' THEN
              MQ_IN.TYPE_1.CIDEFFST = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDEFFRE = ' ' THEN
              MQ_IN.TYPE_1.GJDEFFRE = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDPMLAS  = ' ' THEN
              MQ_IN.TYPE_1.GJDPMLAS  = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDTYPEQ = ' ' THEN
              MQ_IN.TYPE_1.GJDTYPEQ = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDMFGDT = ' ' THEN
              MQ_IN.TYPE_1.GJDMFGDT = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDOINST = ' ' THEN
              MQ_IN.TYPE_1.GJDOINST = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDRECON = ' ' THEN
              MQ_IN.TYPE_1.GJDRECON = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDSTEFF = ' ' THEN
              MQ_IN.TYPE_1.GJDSTEFF = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDCINST = ' ' THEN
              MQ_IN.TYPE_1.GJDCINST = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDWAREX = ' ' THEN
              MQ_IN.TYPE_1.GJDWAREX = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDDISC = ' ' THEN
              MQ_IN.TYPE_1.GJDDISC = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.GJDACTV = ' ' THEN
              MQ_IN.TYPE_1.GJDACTV = DEFAULT_DATE;

   IF MQ_IN.TYPE_1.DRECCALL = ' ' THEN
              MQ_IN.TYPE_1.DRECCALL = DEFAULT_DATE;
             
  
 END CHECK_DATES;

 %PAGE;
 /********************************************************************/
 /* VALIDATE VALUE RECEIVD IN PART UNIT PRICE AND PART UNIT COST     */
 /* FIELDS                                                           */
 /********************************************************************/
 CHECK_PART_DATA : PROC;

    DO I = 1 TO 4;

      IF TEST_SW
        THEN DO;
           DIAG_TEXT = MODULE||': PART UNIT PRICE '|| 
           MQ_IN.TYPE_1.PARTS.CGPARTPR(I);
           CALL WRITE_TO_OPER;
        END;
      
      PIC_PARTPR = MQ_IN.TYPE_1.PARTS.CGPARTPR(I);

      IF PIC_PARTPR > 99999999 
        THEN CALL ASSIGN_ERROR('P01');

      IF TEST_SW
        THEN DO;
          DIAG_TEXT = MODULE||': PART UNIT COST '|| 
                               MQ_IN.TYPE_1.PARTS.CGPARTCS(I);
          CALL WRITE_TO_OPER;
        END;

      PIC_PARTCS = MQ_IN.TYPE_1.PARTS.CGPARTCS(I);

      IF PIC_PARTCS > 99999999 
        THEN CALL ASSIGN_ERROR('P02');
        
    END;
             

 END CHECK_PART_DATA;


  %PAGE;
 /********************************************************************/
 /* CHECK ALL BIT FIELDS WHICH CROSS WILL SEND AS CHAR 1 - 'Y' OR 'N'*/
 /********************************************************************/
 CHECK_BIT_FIELDS : PROC;

    IF TEST_SW
      THEN DO;
        DIAG_TEXT = MODULE||': INSIDE CHECK CROSS FLAGS LOGIC';
        CALL WRITE_TO_OPER;
      END;

    IF MQ_IN.TYPE_1.S0IERSFG = 'Y' | MQ_IN.TYPE_1.S0IERSFG = 'N' | 
       MQ_IN.TYPE_1.S0IERSFG = ' ' THEN ;
    ELSE CALL  ASSIGN_ERROR('B01');

    IF MQ_IN.TYPE_1.S0ISRCPT = 'Y' | MQ_IN.TYPE_1.S0ISRCPT = 'N' |
       MQ_IN.TYPE_1.S0ISRCPT = ' ' THEN ;
    ELSE CALL  ASSIGN_ERROR('B02');

    IF MQ_IN.TYPE_1.S0ISRCNS = 'Y' | MQ_IN.TYPE_1.S0ISRCNS = 'N' |
       MQ_IN.TYPE_1.S0ISRCNS = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B03');
    
    IF MQ_IN.TYPE_1.S0IRESUB = 'Y' | MQ_IN.TYPE_1.S0IRESUB = 'N' |
       MQ_IN.TYPE_1.S0IRESUB = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B04');

    IF MQ_IN.TYPE_1.S0IRECYC = 'Y' | MQ_IN.TYPE_1.S0IRECYC = 'N' |
       MQ_IN.TYPE_1.S0IRECYC = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B05');

    IF MQ_IN.TYPE_1.FHOLDFILE = 'Y'| MQ_IN.TYPE_1.FHOLDFILE = 'N'|
       MQ_IN.TYPE_1.FHOLDFILE = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B06');

    IF MQ_IN.TYPE_1.FMPIBUSY = 'Y' | MQ_IN.TYPE_1.FMPIBUSY = 'N' |
       MQ_IN.TYPE_1.FMPIBUSY = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B07');

    IF MQ_IN.TYPE_1.FSAVBUSY = 'Y' | MQ_IN.TYPE_1.FSAVBUSY = 'N' |
       MQ_IN.TYPE_1.FSAVBUSY = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B08');

    IF MQ_IN.TYPE_1.FSPWN08 = 'Y' |   MQ_IN.TYPE_1.FSPWN08 = 'N' |
       MQ_IN.TYPE_1.FSPWN08 = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B09');

    IF MQ_IN.TYPE_1.FPTCORR = 'Y' |   MQ_IN.TYPE_1.FPTCORR = 'N' |
       MQ_IN.TYPE_1.FPTCORR = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B10');

    IF MQ_IN.TYPE_1.FSYSSPWN = 'Y' |  MQ_IN.TYPE_1.FSYSSPWN = 'N'|
       MQ_IN.TYPE_1.FSYSSPWN = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B11');

    IF MQ_IN.TYPE_1.FOEMTYPE = 'Y' |  MQ_IN.TYPE_1.FOEMTYPE = 'N'|
       MQ_IN.TYPE_1.FOEMTYPE = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B12');
    
    IF MQ_IN.TYPE_1.FOEMCNTR = 'Y' |  MQ_IN.TYPE_1.FOEMCNTR = 'N'|
       MQ_IN.TYPE_1.FOEMCNTR = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B13');

    IF MQ_IN.TYPE_1.FAUDUNAV= 'Y' | MQ_IN.TYPE_1.FAUDUNAV = 'N' |
       MQ_IN.TYPE_1.FAUDUNAV = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B14');
	
    IF MQ_IN.TYPE_1.FAUDBUNA = 'Y' | MQ_IN.TYPE_1.FAUDBUNA = 'N' |
       MQ_IN.TYPE_1.FAUDBUNA = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B14');

    IF MQ_IN.TYPE_1.FMPIDBUN = 'Y' | MQ_IN.TYPE_1.FMPIDBUN = 'N' |
       MQ_IN.TYPE_1.FMPIDBUN = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B15');

    IF MQ_IN.TYPE_1.FISSCNTR = 'Y' | MQ_IN.TYPE_1.FISSCNTR = 'N' |
       MQ_IN.TYPE_1.FISSCNTR = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B16');
    
    IF MQ_IN.TYPE_1.FIBM = 'Y'   |    MQ_IN.TYPE_1.FIBM = 'N' |
       MQ_IN.TYPE_1.FIBM = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B17');

    IF MQ_IN.TYPE_1.FONMA = 'Y'  |  MQ_IN.TYPE_1.FONMA = 'N'  |
       MQ_IN.TYPE_1.FONMA = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B18');

    IF MQ_IN.TYPE_1.FWARRNTY = 'Y' | MQ_IN.TYPE_1.FWARRNTY = 'N' |
       MQ_IN.TYPE_1.FWARRNTY = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B19');

    IF MQ_IN.TYPE_1.FOEEUNA = 'Y'  | MQ_IN.TYPE_1.FOEEUNA = 'N'  |
       MQ_IN.TYPE_1.FOEEUNA = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B20'); 
    
    IF MQ_IN.TYPE_1.FECICALL = 'Y' | MQ_IN.TYPE_1.FECICALL = 'N' |
       MQ_IN.TYPE_1.FECICALL = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B21');

    IF  MQ_IN.TYPE_1.FEBCONT = 'Y' | MQ_IN.TYPE_1.FEBCONT = 'N'  |
        MQ_IN.TYPE_1.FEBCONT = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B22');

    IF MQ_IN.TYPE_1.FRSTCNTR = 'Y' | MQ_IN.TYPE_1.FRSTCNTR = 'N' |
       MQ_IN.TYPE_1.FRSTCNTR = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B23');

    IF MQ_IN.TYPE_1.FCADMTCH = 'Y' | MQ_IN.TYPE_1.FCADMTCH = 'N' |
       MQ_IN.TYPE_1.FCADMTCH = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B24');

    IF MQ_IN.TYPE_1.FSRCNSS = 'Y' | MQ_IN.TYPE_1.FSRCNSS = 'N'   |
       MQ_IN.TYPE_1.FSRCNSS = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B25');

    IF MQ_IN.TYPE_1.FTSSMACH = 'Y' | MQ_IN.TYPE_1.FTSSMACH = 'N' |
       MQ_IN.TYPE_1.FTSSMACH = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B26');

    IF MQ_IN.TYPE_1.FPETMSG = 'Y'  | MQ_IN.TYPE_1.FPETMSG = 'N'  |
       MQ_IN.TYPE_1.FPETMSG = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B27');
 
    IF MQ_IN.TYPE_1.FSYSBILL = 'Y' | MQ_IN.TYPE_1.FSYSBILL = 'N' |
       MQ_IN.TYPE_1.FSYSBILL = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B28');

    IF MQ_IN.TYPE_1.FMICRO  = 'Y' | MQ_IN.TYPE_1.FMICRO = 'N'  |
       MQ_IN.TYPE_1.FMICRO  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B29');

    IF MQ_IN.TYPE_1.FMES  = 'Y' | MQ_IN.TYPE_1.FMES = 'N' |
       MQ_IN.TYPE_1.FMES  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B30');

    IF  MQ_IN.TYPE_1.FECA = 'Y' | MQ_IN.TYPE_1.FECA = 'N' |
        MQ_IN.TYPE_1.FECA = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B31');

    IF  MQ_IN.TYPE_1.FREA = 'Y' | MQ_IN.TYPE_1.FREA = 'N' |
        MQ_IN.TYPE_1.FREA = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B32');

    IF  MQ_IN.TYPE_1.FCTRBUSY = 'Y' | MQ_IN.TYPE_1.FCTRBUSY = 'N' |
        MQ_IN.TYPE_1.FCTRBUSY = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B33');

    IF MQ_IN.TYPE_1.FCTRDBUN  = 'Y' | MQ_IN.TYPE_1.FCTRDBUN = 'N' |
       MQ_IN.TYPE_1.FCTRDBUN  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B34');

    IF MQ_IN.TYPE_1.FSPCCNTR  =  'Y' | MQ_IN.TYPE_1.FSPCCNTR = 'N'|
       MQ_IN.TYPE_1.FSPCCNTR  =  ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B35');

    IF MQ_IN.TYPE_1.FPREPEND  = 'Y'  | MQ_IN.TYPE_1.FPREPEND = 'N' |
       MQ_IN.TYPE_1.FPREPEND  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B36');

    IF MQ_IN.TYPE_1.FMPI24X7  = 'Y' | MQ_IN.TYPE_1.FMPI24X7 = 'N' |
       MQ_IN.TYPE_1.FMPI24X7  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B37');

    IF MQ_IN.TYPE_1.FCNT24X7  = 'Y' | MQ_IN.TYPE_1.FCNT24X7 = 'N' |
       MQ_IN.TYPE_1.FCNT24X7  = ' '  THEN ;
    ELSE CALL ASSIGN_ERROR('B38');

    IF MQ_IN.TYPE_1.FWAR24X7  = 'Y' | MQ_IN.TYPE_1.FWAR24X7 = 'N' |
       MQ_IN.TYPE_1.FWAR24X7  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B39');

    IF MQ_IN.TYPE_1.FSOMACH = 'Y' | MQ_IN.TYPE_1.FSOMACH = 'N' |
       MQ_IN.TYPE_1.FSOMACH = ' ' THEN ;
    ELSE CALL  ASSIGN_ERROR('B40');

    IF MQ_IN.TYPE_1.FOEE = 'Y' | MQ_IN.TYPE_1.FOEE = 'N' |
       MQ_IN.TYPE_1.FOEE = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B41');
    
    IF MQ_IN.TYPE_1.FLNVEMPL = 'Y' | MQ_IN.TYPE_1.FLNVEMPL = 'N' |
       MQ_IN.TYPE_1.FLNVEMPL = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B42');

    IF MQ_IN.TYPE_1.GJFCMFEA = 'Y' | MQ_IN.TYPE_1.GJFCMFEA = 'N' |
       MQ_IN.TYPE_1.GJFCMFEA = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B43');
     
    IF MQ_IN.TYPE_1.GJFDCMFE = 'Y' | MQ_IN.TYPE_1.GJFDCMFE = 'N' |
       MQ_IN.TYPE_1.GJFDCMFE = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B44');

    IF MQ_IN.TYPE_1.GJFSYST  = 'Y' | MQ_IN.TYPE_1.GJFSYST = 'N'  |
       MQ_IN.TYPE_1.GJFSYST  = 'N' THEN ;
    ELSE CALL ASSIGN_ERROR('B45');

    IF MQ_IN.TYPE_1.GJF30PCT = 'Y' | MQ_IN.TYPE_1.GJF30PCT = 'N' | 
       MQ_IN.TYPE_1.GJF30PCT = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B46');

    IF MQ_IN.TYPE_1.GJF40PCT = 'Y' | MQ_IN.TYPE_1.GJF40PCT = 'N' |
       MQ_IN.TYPE_1.GJF40PCT = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B47');    
    
    IF  MQ_IN.TYPE_1.GJFDEMO = 'Y' | MQ_IN.TYPE_1.GJFDEMO = 'N'  |
        MQ_IN.TYPE_1.GJFDEMO = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B48');

    IF  MQ_IN.TYPE_1.GJFCELOA = 'Y'| MQ_IN.TYPE_1.GJFCELOA = 'N' |
        MQ_IN.TYPE_1.GJFCELOA = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B49');
     
    IF MQ_IN.TYPE_1.GJFMLCAU = 'Y' | MQ_IN.TYPE_1.GJFMLCAU = 'N' |
       MQ_IN.TYPE_1.GJFMLCAU = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B50');

    IF MQ_IN.TYPE_1.GJFAUTOR = 'Y' | MQ_IN.TYPE_1.GJFAUTOR = 'N' |
       MQ_IN.TYPE_1.GJFAUTOR = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B51');

    IF MQ_IN.TYPE_1.GJFDCFTS = 'Y' | MQ_IN.TYPE_1.GJFDCFTS = 'N' |
       MQ_IN.TYPE_1.GJFDCFTS = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B52');

    IF MQ_IN.TYPE_1.GJFSOLIC = 'Y' | MQ_IN.TYPE_1.GJFSOLIC = 'N' |
       MQ_IN.TYPE_1.GJFSOLIC = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B53');

    IF MQ_IN.TYPE_1.GJFARBI  = 'Y' | MQ_IN.TYPE_1.GJFARBI = 'N'  |
       MQ_IN.TYPE_1.GJFARBI  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B54');

    IF MQ_IN.TYPE_1.GJFPAD04 = 'Y' | MQ_IN.TYPE_1.GJFPAD04 = 'N' |
       MQ_IN.TYPE_1.GJFPAD04 = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B55');
    
    IF MQ_IN.TYPE_1.GJFIMI   = 'Y' | MQ_IN.TYPE_1.GJFIMI = 'N'   |
       MQ_IN.TYPE_1.GJFIMI   = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B56');

    IF MQ_IN.TYPE_1.GJFROPS  = 'Y' | MQ_IN.TYPE_1.GJFROPS = 'N'  |
       MQ_IN.TYPE_1.GJFROPS  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B57');

    IF MQ_IN.TYPE_1.GJFDSI   = 'Y' | MQ_IN.TYPE_1.GJFDSI = 'N'   |
       MQ_IN.TYPE_1.GJFDSI   = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B58');

    IF MQ_IN.TYPE_1.GJFPMD   = 'Y' | MQ_IN.TYPE_1.GJFPMD =  'N'  |
       MQ_IN.TYPE_1.GJFPMD   = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B59');

    IF MQ_IN.TYPE_1.GJFBTH   = 'Y' | MQ_IN.TYPE_1.GJFBTH = 'N'   |
       MQ_IN.TYPE_1.GJFBTH   = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B60');
    
    IF MQ_IN.TYPE_1.GJFBRV  = 'Y'  | MQ_IN.TYPE_1.GJFBRV = 'N'   |
       MQ_IN.TYPE_1.GJFBRV  = ' '  THEN ;
    ELSE CALL ASSIGN_ERROR('B61');

    IF MQ_IN.TYPE_1.GJFBSF  = 'Y'  | MQ_IN.TYPE_1.GJFBSF = 'N'   |
       MQ_IN.TYPE_1.GJFBSF  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B62');

    IF MQ_IN.TYPE_1.GJFBSO  = 'Y'  | MQ_IN.TYPE_1.GJFBSO = 'N'   |
       MQ_IN.TYPE_1.GJFBSO  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B63');

    IF MQ_IN.TYPE_1.GJFPAD06 = 'Y' | MQ_IN.TYPE_1.GJFPAD06 = 'N' |
       MQ_IN.TYPE_1.GJFPAD06 = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B64');

    IF MQ_IN.TYPE_1.GJFRT    = 'Y' | MQ_IN.TYPE_1.GJFRT = 'N'    |
       MQ_IN.TYPE_1.GJFRT    = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B65');

    IF MQ_IN.TYPE_1.GJFNUS   =  'Y' | MQ_IN.TYPE_1.GJFNUS = 'N'  |
       MQ_IN.TYPE_1.GJFNUS   = ' ' THEN ;
    ELSE  CALL ASSIGN_ERROR('B66');

    IF MQ_IN.TYPE_1.CGFOCL  = 'Y'  |  MQ_IN.TYPE_1.CGFOCL = 'N'  |
       MQ_IN.TYPE_1.CGFOCL  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B67');

    IF MQ_IN.TYPE_1.CGFCOD  = 'Y'  |  MQ_IN.TYPE_1.CGFCOD  = 'N' |
       MQ_IN.TYPE_1.CGFCOD  = ' ' THEN ;
    ELSE CALL ASSIGN_ERROR('B68');

    IF MQ_IN.TYPE_1.CGFIIC  = 'Y'  |  MQ_IN.TYPE_1.CGFIIC  = 'N' |
       MQ_IN.TYPE_1.CGFIIC  =  '' THEN ;
    ELSE CALL ASSIGN_ERROR('B69');       
       
       
       
 END CHECK_BIT_FIELDS;

 /*-------------------------------------------------------------------*/
 /* ASSIGN ERROR CODE AND DESCRIPTIONS                                */
 /*-------------------------------------------------------------------*/
 ASSIGN_ERROR : PROC(ERR);
   DCL  ERR           CHAR(3);
   
   FVALID = 'N';

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': INSIDE ASSIGN ERR '|| ERR;
       CALL WRITE_TO_OPER;
     END;
  
   SELECT(ERR);
     WHEN('P01') CERROR = PRICE_ERR;
     WHEN('P02') CERROR = COST_ERR;
     WHEN('B01') CERROR = PT_ERR ;
     WHEN('B02') CERROR = PT_SOURCE_ERR;
     WHEN('B03') CERROR = NSD_SOURCE_ERR;
     WHEN('B04') CERROR = RESUBMIT_ERR ;
     WHEN('B05') CERROR = RECYCL_ERR;
     WHEN('B06') CERROR = HOLD_ERR;
     WHEN('B07') CERROR = MPI_ERR ;
     WHEN('B08') CERROR = SAV_ERR;
     WHEN('B09') CERROR = SPWN_ERR;
     WHEN('B10') CERROR = FPT_ERR ;
     WHEN('B11') CERROR = FSYSS_ERR;
     WHEN('B12') CERROR = FOEM_ERR;
     WHEN('B13') CERROR = FOEM_CNTR_ERR;
     WHEN('B14') CERROR = FAUD_ERR ;
     WHEN('B15') CERROR = FMPI_DB_ERR ;
     WHEN('B16') CERROR = FISS_CNTR_ERR ;
     WHEN('B17') CERROR = FIBM_ERR;
     WHEN('B18') CERROR = FONMA_ERR;
     WHEN('B19') CERROR = FWARR_ERR;
     WHEN('B20') CERROR = FOEE_ERR ;
     WHEN('B21') CERROR = FECI_ERR ;
     WHEN('B22') CERROR = FEBCONT_ERR ;
     WHEN('B23') CERROR = FRSTCNTR_ERR;
     WHEN('B24') CERROR = FCAD_ERR ;
     WHEN('B25') CERROR = FSRCNSS_ERR ;
     WHEN('B26') CERROR = FTSSMACH_ERR ;
     WHEN('B27') CERROR = FPETMSG_ERR ;
     WHEN('B28') CERROR = FSYSBILL_ERR ;
     WHEN('B29') CERROR = FMICRO_ERR ;
     WHEN('B30') CERROR = FMES_ERR ;
     WHEN('B31') CERROR = FECA_ERR ;
     WHEN('B32') CERROR = FREA_ERR ;
     WHEN('B33') CERROR = FCTRBUSY_ERR ;
     WHEN('B34') CERROR = FCTRDBUN_ERR ;
     WHEN('B35') CERROR = FSPCCNTR_ERR ;
     WHEN('B36') CERROR = FPREPEND_ERR ;
     WHEN('B37') CERROR = FMPI24X7_ERR ;
     WHEN('B38') CERROR = FCNT24X7_ERR ;
     WHEN('B39') CERROR = FWAR24X7_ERR ;
     WHEN('B40') CERROR = FSOMACH_ERR ;
     WHEN('B41') CERROR = FOEE_ERR2 ;
     WHEN('B42') CERROR = FLNVEMPL_ERR ;
     WHEN('B43') CERROR = GJFCMFEA_ERR ;
     WHEN('B44') CERROR = GJFDCMFE_ERR ;
     WHEN('B45') CERROR = GJFSYST_ERR  ;
     WHEN('B46') CERROR = GJF30PCT_ERR ;
     WHEN('B47') CERROR = GJF40PCT_ERR ;
     WHEN('B48') CERROR = GJFDEMO_ERR ;
     WHEN('B49') CERROR = GJFCELOA_ERR ;
     WHEN('B50') CERROR = GJFMLCAU_ERR ;
     WHEN('B51') CERROR = GJFAUTOR_ERR ;
     WHEN('B52') CERROR = GJFDCFTS_ERR ;
     WHEN('B53') CERROR = GJFSOLIC_ERR ;
     WHEN('B54') CERROR = GJFARBI_ERR ;
     WHEN('B55') CERROR = GJFPAD04_ERR ;
     WHEN('B56') CERROR = GJFIMI_ERR ;
     WHEN('B57') CERROR = GJFROPS_ERR ;
     WHEN('B58') CERROR = GJFDSI_ERR ;
     WHEN('B59') CERROR = GJFPMD_ERR ;
     WHEN('B60') CERROR = GJFBTH_ERR ;
     WHEN('B61') CERROR = GJFBRV_ERR ;
     WHEN('B62') CERROR = GJFBSF_ERR ;
     WHEN('B63') CERROR = GJFBSO_ERR ;
     WHEN('B64') CERROR = GJFPAD06_ERR ;
     WHEN('B65') CERROR = GJFRT_ERR ;
     WHEN('B66') CERROR = GJFNUS_ERR ;
     WHEN('B67') CERROR = CGFOCL_ERR ;
     WHEN('B68') CERROR = CGFCOD_ERR ;
     WHEN('B69') CERROR = CGFCOD_ERR2 ;
     OTHERWISE;
     
   END; 
    
   EXEC CICS RETURN;
            
 END ASSIGN_ERROR;
 
 %PAGE;
 /********************************************************************/
 /*  WRITE DIAGNOSTIC MESSAGE TO OPERATOR CONSOLE                    */
 /********************************************************************/
 WRITE_TO_OPER: PROC;

   EXEC CICS WRITEQ TD QUEUE('CESE') FROM(DIAG_TEXT) LENGTH(80);

 END WRITE_TO_OPER;

 END QBMQVL;

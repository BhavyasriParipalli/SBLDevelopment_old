  QBMQWR:  PROC(@COMM) OPTIONS(MAIN,REENTRANT) REORDER;
 /*******************************************************************/
 /*                                                                 */
 /*  PROGRAM:  QBMQWR                             DATE:  08/10/2010 */
 /*                                                                 */
 /*  TITLE:  MQSERIES WRITE(HSI) - SEND MESSAGE TO CROSS/LAR        */
 /*                                                                 */
 /*  FUNCTION:  THIS MODULE BUILDS THE MQSERIES RECORDS FOR THE OUT */
 /*             GOING QUEUE TO CROSS LAR.                           */
 /*                                                                 */
 /*  LANGUAGE:  PL/I                                                */
 /*                                                                 */
 /*  MODULE TYPE:  REALTIME (CICS)                                  */
 /*                                                                 */
 /*  PARM:  @COMM - POINTER TO THE COMMAREA                         */
 /*                                                                 */
 /*  INPUTS:   COMMAREA - QBMQACK FROM QBMAIN & QBDBU3  MODULES     */
 /*            COMMAREA - QBCRCOM FROM QBMSG1 & QBOVR1  MODULES     */
 /*                                                                 */
 /*                                                                 */
 /*  REPORTS:  NONE                                                 */
 /*                                                                 */
 /*  CHRONOLOGICAL UPDATE LOG:                                      */
 /*                                                                 */
 /*  DATE:    REASON:    DRIVER:  DESCRIPTION:                PGMR: */
 /*---------- ---------- ------ ------------------------------ ---- */
 /*08/10/2010 FITSIT1411 10NSE  SEND MQ DATA TO CROSS       RAJASREE*/
 /*                                                                 */
 /*05/20/2010 FITSIT1411 10NSE  Stop printing messages         NM   */
 /*                               in spool                          */
 /*06/02/2010 FITSIT1411 10NSE  Added code to print       Susmitha  */
 /*                             reason code in spool                */
 /*                             after calling MQPUT1                */
 /*02/03/2012 RCQ1882    2HSC   REMOVE NQUEUE,CWADCSTB          NAK */
 /*02/27/2012 RCQ1882    2HSC   add write to journal 7          LBS */
 /*                                                                 */
 /*******************************************************************/
 DCL VERSION      CHAR(17) STATIC INIT('2HSC - 02/27/2012');
 DCL MODULE       CHAR( 6) STATIC INIT('QBMQWR');

 %DCL LANG CHAR;
 %LANG = 'PLI';
 
 %PAGE;
 /*-----------------------------------------------------------------*/
 /* THE COMPILE TIMESTAMP IS RETRIEVED USING THE FOLLOWING          */
 /* PREPROCESSOR STATEMENTS:                                        */
 /*                                                                 */
 /*    %DCL CMPTIME CHAR                                            */
 /*    %DCL COMPILETIME BUILTIN                                     */
 /*    %CMPTIME = ''''||COMPILETIME||''''                           */
 /*                                                                 */
 /* (SHOWN HERE SINCE PREPROCSSOR CODE DOESN'T PRINT WITH DEFAULT   */
 /*  COMPILE OPTIONS.  NOTE:  STATEMENT SEMICOLONS ARE NOT SHOWN    */
 /*  TO AVOID A COMPILER WARNING MESSAGE.)                          */
 /*                                                                 */
 /*-----------------------------------------------------------------*/
 %DCL CMPTIME CHAR;
 %DCL COMPILETIME BUILTIN;
 %CMPTIME = ''''||COMPILETIME||'''';

 DCL COMPILE  CHAR(18) INIT(CMPTIME);

 %PAGE;
 /*******************************************************************/
 /*   BEGIN DECLARES                                                */
 /*******************************************************************/

 /*-----------------------------------------------------------------*/
 /*   BUILTIN FUNCTION DECLARES                                     */
 /*   NOTE:  THE FOLLOWING CANNOT BE USED UNDER CICS:               */
 /*          DATE, TIME                                             */
 /*-----------------------------------------------------------------*/
 DCL  ADDR         BUILTIN;
 DCL  CSTG         BUILTIN;         /* CURRENT STORAGE              */
 DCL  HIGH         BUILTIN;         /* HEX 'FF...'                  */
 DCL  INDEX        BUILTIN;
 DCL  LENGTH       BUILTIN;
 DCL  LOW          BUILTIN;         /* HEX '00...'                  */
 DCL  MOD          BUILTIN;
 DCL  NULL         BUILTIN;         /* NULL POINTER VALUE           */
 DCL  ONLOC        BUILTIN;         /* NAME OF ENTRY-POINT WITHERROR*/
 DCL  ONSOURCE     BUILTIN;         /* NAME OF ENTRY-POINT WITHERROR*/
 DCL  PLIRETV      BUILTIN;
 DCL  PLIDUMP      BUILTIN;
 DCL  STG          BUILTIN;         /* STORAGE                      */
 DCL  SUBSTR       BUILTIN;
 DCL  TRANSLATE    BUILTIN;
 DCL  VERIFY       BUILTIN;

 /*-----------------------------------------------------------------*/
 /*  FILE DECLARES                                                  */
 /*  NOTE:  SYSPRINT IS THE ONLY FILE THAT PL/I CAN WRITE TO        */
 /*         UNDER CICS.  SYSPRINT OUTPUT IS ASSIGNED TO THE 'CPLI'  */
 /*         TRANSIENT DATA QUEUE.  SYSPRINT NEED NOT BE DECLARED,   */
 /*         BUT IF IT IS, IT SHOULD BE DECLARED AS ...              */
 /*-----------------------------------------------------------------*/

 DCL SYSPRINT FILE STREAM PRINT OUTPUT;

 /*-----------------------------------------------------------------*/
 /*  SET RUN-TIME OPTIONS                                           */
 /*-----------------------------------------------------------------*/
 DCL PLIXOPT      CHAR(250)
 INIT('STACK(24K,2K,ANY,FREE),HEAP(2K,2K,ANYWHERE,KEEP,2K,2K),
 MSGFILE(CEEMSG),THREADHEAP(2K,2K,ANY,),LIBSTACK(2K,2K,FREE),
 ANYHEAP(2K,2K,ANY,FREE),BELOWHEAP(4K,2K,FREE),
 TRAP(ON),RPTOPTS(OFF),RPTSTG(OFF)')
                                   STATIC VARYING EXTERNAL;

  %PAGE;
 DCL 1 COMMAREA  UNALIGNED BASED(@COMM), /* INPUT RECORD       */
       3  COMMAREA_MSG    CHAR(356);

 DCL 1 ERROR_TXT  UNALIGNED,
    %INCLUDE AEQERRT ; ;

 /*-----------------------------------------------------------------*/
 /*   COMMON WORK AREA FOR THE QSAR CICS REGION (OPTIONAL-IF NEEDED)*/
 /*-----------------------------------------------------------------*/
 DCL 1 CWA  UNALIGNED BASED(@CWA),
       %INCLUDE CWA; ;
 
 /*DCL 1 DCSTBL UNALIGNED BASED(CWADCSTB),
 	%INCLUDE DCSTBLPL;;   RCQ1882*/

 %PAGE;
 /* ----------------------------------------------------------------*/
 /*  JOURNAL RECORD PREFIX                                          */
 /* ----------------------------------------------------------------*/
 DCL 1 TP_PREFIX,
      3  TP_APPLID  CHAR(8),       /* CICS APPLID                   */
      3  TP_QSARID  CHAR(10),      /*                               */
      3  TP_CEBO    CHAR(3),       /*                               */
      3  TP_CETERR  CHAR(3),       /*                               */
      3  TP_DATE    CHAR(8),       /* CURRENT DATE (YYMMDD)         */
      3  TP_TIME    CHAR(6),       /* CURRENT TIME (HHMMSS)         */
      3  TP_RC    FIXED BIN(15),   /* GI HEADER RETURN CODE         */
      3  TP_ABSTIME CHAR(8),       /* ABS TIME FROM INTERFACE REC   */
      3  TP_FTYPE FIXED BIN(15);   /* ERROR FIELD DATA TYPE         */

 %PAGE;
 /*-----------------------------------------------------------------*/
 /* MQ SERIES STRUCTURE FOR CROSS                                   */
 /*-----------------------------------------------------------------*/
 %INCLUDE CMQP;;
 %INCLUDE CMQEPP;;


 %PAGE;
 /*-----------------------------------------------------------------*/
 /*  POINTERS                                                       */
 /*-----------------------------------------------------------------*/
 DCL @COMM         PTR;             /* COMMAREA POINTER             */
 DCL @CWA          PTR INIT(NULL);  /* POINTER TO CWA               */
 DCL MQ_PUT_PTR    PTR INIT(NULL);  /* POINTER FOR MQ PUT           */

 %PAGE;
 /*-----------------------------------------------------------------*/
 /* MISCELLANEOUS DECLARATIONS                                      */
 /*-----------------------------------------------------------------*/
 DCL ABSHHMMSS             CHAR(6)   INIT('');
 DCL ABSMMDD               CHAR(4)   INIT('');
 DCL ABSOLTIME       FIXED DEC(15)   INIT(0);
 DCL ABSYEAR         FIXED BIN(31)   INIT(0);
 DCL ABSYYMMDD             CHAR(6)   INIT('');
 DCL BLANK_POS       FIXED DEC(1)    INIT(0);
 DCL COMMLEN         FIXED BIN(15)   INIT(0);
 DCL DATE_YYYYMMDD         CHAR(10)  INIT('');
 DCL DIAG_TEXT             CHAR(80)  INIT('');
 DCL ERR1                  CHAR(9)   INIT('QSR9001: ');
 DCL ERR2                  CHAR(9)   INIT('QSR9002: ');
 DCL FB31            FIXED BIN(31)   INIT(0);
 DCL JRNLREC_LEN     FIXED BIN(31)   INIT(0);
 DCL MQ_BUF_LEN      FIXED BIN(31,0) INIT(0);
 DCL PFXLENGTH       FIXED BIN(15)   INIT(0);
 DCL PIC_RESP              PIC'9999' INIT(0);
 DCL PIC_RESP2             PIC'9999' INIT(0);
 DCL PIC_DATE              PIC'(8)9' INIT(0);
 DCL PIC_TIME              PIC'(6)9' INIT(0);
 DCL 1 PIC_TIME_OVER    BASED(ADDR(PIC_TIME)),
       3 PIC_HR            PIC'99',
       3 PIC_MIN           PIC'99',
       3 PIC_SEC           PIC'99';
 DCL PIC5                  PIC'(5)9' INIT(0);
 DCL QUEUE_SUFFIX          CHAR(6)   INIT('');
 DCL RESPONSE        FIXED BIN(31)   INIT(0);
 DCL RESPONSE2       FIXED BIN(31)   INIT(0);
 DCL STORAGE_LENGTH  FIXED BIN(31,0) INIT(0);

 
 DCL TEST_SW          BIT(1)        INIT('0'B);
 
 /*-----------------------------------------------------------------*/
 /* IN CICS 1.7, THE EIB IS 85 BYTES.  THIS STRING IS USED TO SAVE  */
 /* AN EIB IMAGE AT THE TIME AN ERROR OCCURS BEFORE AN ERROR MODULE */
 /* IS INVOKED...                                                   */
 /*-----------------------------------------------------------------*/
 DCL EIB_STRING           CHAR(85) BASED(DFHEIPTR);

 %PAGE;
 /*******************************************************************/
 /*         MQSeries Working Storage Declarations                   */
 /*******************************************************************/
 DCL PRIORITY              PIC'9'    INIT(0);
 DCL HCONN           FIXED BIN(31)   INIT(0);
 DCL COMP_CODE       FIXED BIN(31)   INIT(0);
 DCL REASON          FIXED BIN(31)   INIT(0);
 DCL OPTIONS         FIXED BIN(31)   INIT(0);
 DCL HOBJ_GET        FIXED BIN(31)   INIT(0);
 DCL HOBJ_PUT        FIXED BIN(31)   INIT(0);


 %PAGE;
 /*-----------------------------------------------------------------*/
 /* MQSERIES STRUCTURES                                             */
 /*-----------------------------------------------------------------*/
 DCL  MQ_MQOD       LIKE MQOD;  /* OBJECT DESCRIPTOR                */
 DCL  MQ_MQPMO      LIKE MQPMO; /* PUT MESSAGE OPTIONS              */
 DCL  MQ_MQGMO      LIKE MQGMO; /* GET MESSAGE OPTIONS              */
 DCL  MQ_MQMD_GET   LIKE MQMD;  /* MESSAGE DESCRIPTOR GET           */
 DCL  MQ_MQMD_PUT   LIKE MQMD;  /* MESSAGE DESCRIPTOR PUT           */

  %PAGE;
 /*******************************************************************/
 /*  Local copy of various MQSeries Descriptors.                    */
 /*******************************************************************/
  DCL 1 LMQOD LIKE MQOD;
  DCL 1 LMQMD LIKE MQMD;
  DCL 1 LMQPMO LIKE MQPMO;

 %PAGE;

 /*******************************************************************/
 /* ERROR PROCESSING                                                */
 /* ----------------                                                */
 /* IT IS THE PROGRAMMER'S RESPONSIBILITY TO CHECK THE RETURN CODE  */
 /* FROM EACH COMMAND LEVEL CALL, AS APPROPRIATE.                   */
 /*******************************************************************/

 EXEC CICS
      IGNORE CONDITION ERROR;

 ON ERROR
   BEGIN;
     ON ERROR SYSTEM;                    /* PREVENT RECURSION ERROR */
     PIC_DATE = EIBDATE;
     PIC_TIME = EIBTIME;
     ET_PROGRAM_ID = 'QBMQWR ';
     ET_EIB      = EIB_STRING;
     WTO_FLAG    = 'Y';
     ET_DUMPCODE = 'N';

     ET_TEXT4 = ERR1||MODULE||' ENTRY POINT '||ONLOC;
     ET_TEXT5 = 'DATE: '||PIC_DATE||'/'||PIC_HR||':'||PIC_MIN||
                       ' TRANSID '||EIBTRNID||' TASK NUM '||EIBTASKN;

     EXEC CICS XCTL PROGRAM('AEQERRP')
                    COMMAREA(ERROR_TXT)
                    RESP(RESPONSE);
     IF RESPONSE ^= DFHRESP(NORMAL)
       THEN DO;                   /* IF ALL ELSE FAILS, ABEND */
         EXEC CICS ABEND
                   ABCODE('MQWR')
                   CANCEL;
       END;
   END;

 %PAGE;
 /*******************************************************************/
 /* MAIN PROCESSING                                                 */
 /*******************************************************************/
 /* 1. GET REQUIRED STORAGE FOR THE WRITE MQ RECORD                 */
 /* 2.
 /* GET ADDRESSABILITY TO THE CWA (OPTIONAL - IF NEEDED)            */
 /*-----------------------------------------------------------------*/

 EXEC CICS ADDRESS                     /* GET ADDR OF CWA           */
      CWA(@CWA)  RESP(RESPONSE);

 IF RESPONSE ^= DFHRESP(NORMAL)     /* IF ABNORMAL RESPONSE THEN    */
   THEN DO;                         /* PASS CONTROL TO ERROR PGM    */
     ET_TEXT1 = ERR2 || MODULE || ' FAILURE TO GET ADDRESS OF CWA';
     SIGNAL ERROR;
   END;

 IF CWA_QSAR_TRACE = 'Y' | 
    CWA_QSAR_TRACE = 'T'
    THEN DO;
      TEST_SW = '1'B;  
      DIAG_TEXT = MODULE||': ENTERED. MSG TYPE '||
                SUBSTR(COMMAREA_MSG,1,2);
      CALL WRITE_TO_OPER(); 
      DIAG_TEXT = MODULE||': '||SUBSTR(COMMAREA_MSG,1,71);
      CALL WRITE_TO_OPER();
      DIAG_TEXT = MODULE||': COMM LENGTH '||CSTG(COMMAREA_MSG);
      CALL WRITE_TO_OPER();
    END;

 /*-----------------------------------------------------------------*/
 /* CHECK IF COMMAREA HAS DATA ... IF NOT, ERROR                    */
 /*-----------------------------------------------------------------*/

 IF EIBCALEN = 0                    /* IF COMMAREA NOT RECEIVED THEN*/
   THEN DO;                         /* TRANSFER CONTROL TO ERROR PGM*/
     ET_TEXT1 = ERR1 || MODULE || ' NO COMMAREA RECEIVED';
     SIGNAL ERROR;
    END;
    
 CALL GET_SYSTEM_DATE_TIME();   
    
 CALL MQ_PUT();
 
 EXEC CICS RETURN;

 /* --------------------------------------------------------------- */
 /* End of program                                                  */
 /* --------------------------------------------------------------- */
 
 
 %PAGE;
 /*******************************************************************/
 /*                                                                */
 /*******************************************************************/
 GET_SYSTEM_DATE_TIME: PROC();
  
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': PROC GET_SYSTEM_DATE_TIME ';
       CALL WRITE_TO_OPER(); 
     END;
     
   EXEC CICS ASKTIME ABSTIME(ABSOLTIME);
   EXEC CICS FORMATTIME ABSTIME(ABSOLTIME) YYMMDD(ABSYYMMDD)
                                           YEAR(ABSYEAR)
                                           TIME(ABSHHMMSS)
                                           YYYYMMDD(DATE_YYYYMMDD)
                                           RESP(RESPONSE)
                                           RESP2(RESPONSE2);

 
 
 END GET_SYSTEM_DATE_TIME;
 
  %PAGE;
 /*******************************************************************/
 /* PUT THE RECORD INTO MQSERIES QUEUE                              */
 /*******************************************************************/
 MQ_PUT: PROC();
 
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': PROC MQ_PUT ';
       CALL WRITE_TO_OPER(); 
     END;

  /* RCQ1882 Introduced CWA.MQ_READQ for MQ assignments*/

   SELECT(CWA.MQREGION);
     WHEN('L')  /* Local */
       MQ_MQOD.OBJECTNAME='HSI.MQ.L.CROSS.PROCESS.REPLY';
     WHEN('D')  /* Dev */
       MQ_MQOD.OBJECTNAME='CROSS.HSI.INBOUND.QUEUE.D';
     WHEN('U')  /* UAT */
       MQ_MQOD.OBJECTNAME='CROSS.HSI.INBOUND.QUEUE.U';
     WHEN('P')  /* Prd*/
       MQ_MQOD.OBJECTNAME='CROSS.HSI.INBOUND.QUEUE';
     OTHERWISE
       MQ_MQOD.OBJECTNAME='CROSS.HSI.INBOUND.QUEUE.'||MQREGION;
    END;  

  IF TEST_SW   
     THEN DO;
     /*  DIAG_TEXT = MODULE||': QUEUE_SUFFIX - '||QUEUE_SUFFIX;
         CALL WRITE_TO_OPER();  */
       DIAG_TEXT = MODULE||': MQPUT1 -'||SUBSTR(COMMAREA_MSG,1,60);
       CALL WRITE_TO_OPER();
       DIAG_TEXT = MODULE||': WRITE TO QUEUE - '||
                            MQ_MQOD.OBJECTNAME;
       CALL WRITE_TO_OPER();
     END; 

  /* MQ_MQOD.OBJECTNAME= 'HSI.MQ.L.CROSS.PROCESS.REPLY'; /* LOCAL */
  /* RCQ1882
   QUEUE_SUFFIX  = TRANSLATE(NQUEUE,' ',LOW(1));
   IF QUEUE_SUFFIX = 'I2'
     THEN QUEUE_SUFFIX = 'U';  
     ELSE QUEUE_SUFFIX  = TRANSLATE(QUEUE_SUFFIX,' ','1234567890');
  */ 
  
  /* PRODUCTION QUEUE */
  /*  MQ_MQOD.OBJECTNAME='CROSS.HSI.INBOUND.QUEUE.'||QUEUE_SUFFIX;*/
  
    
   LMQMD.FORMAT   = MQFMT_STRING;
   LMQPMO.OPTIONS = MQPMO_SYNCPOINT            
                  + MQPMO_FAIL_IF_QUIESCING  
                  + MQPMO_DEFAULT_CONTEXT;
                
   FB31 = EIBCALEN;
   CALL MQPUT1(MQHC_DEF_HCONN,
               MQ_MQOD,  
               LMQMD,
               LMQPMO,
               FB31,
               COMMAREA_MSG,
               COMP_CODE,
               REASON); 


   SELECT(COMP_CODE);
     WHEN(MQCC_OK)
       DO;
         IF TEST_SW                   /* NM */
           THEN DO;
             DIAG_TEXT = MODULE||': SUCCESSFUL WRITE TO '||
                  		MQ_MQOD.OBJECTNAME;
             CALL WRITE_TO_OPER();
           END;
         CALL WRITE_JOURNAL_RECORD();
       END;
     OTHERWISE
       DO;
         PIC5 = COMP_CODE;
         DIAG_TEXT = MODULE||': MSG TYPE '||SUBSTR(COMMAREA_MSG,1,2)||
                        ' WRITE TO QUEUE FAILED, CC:'||PIC5;
         CALL WRITE_TO_OPER();
         PIC5 = REASON;
         DIAG_TEXT = MODULE||': REASON CODE '||PIC5;
         CALL WRITE_TO_OPER();          /* Susmitha */
       END;

 END;

 END MQ_PUT;


 %PAGE;
 /********************************************************************/
 /*  PLACE THE ROOT SEGMENT IN JOURNAL 7                             */
 /*                                                                  */
 /********************************************************************/
 WRITE_JOURNAL_RECORD: PROC();
 
   IF TEST_SW 
     THEN DO;
       DIAG_TEXT = MODULE||': IN WRITE_JOURNAL_RECORD PROCEDURE '||
                           'MSG: '||SUBSTR(COMMAREA_MSG,1,2);
       CALL WRITE_TO_OPER();
     END;

   TP_QSARID  = SUBSTR(COMMAREA_MSG,3,6);
   TP_CEBO    = SUBSTR(COMMAREA_MSG,6,3);
   TP_CETERR  = SUBSTR(COMMAREA_MSG,12,3);
   TP_DATE    = SUBSTR(DATE_YYYYMMDD,1,8);
   TP_TIME    = ABSHHMMSS;
   TP_ABSTIME = '';

   EXEC CICS ASSIGN APPLID(TP_APPLID) NOHANDLE;

   JRNLREC_LEN = CSTG(COMMAREA_MSG);
   PFXLENGTH   = CSTG(TP_PREFIX);

   EXEC CICS WRITE JOURNALNAME('DFHJ07')
                   JTYPEID('WR')
                   FROM(COMMAREA_MSG)
                   FLENGTH(JRNLREC_LEN)
                   PREFIX(TP_PREFIX)
                   PFXLENG(PFXLENGTH)
                   RESP(RESPONSE)
                   RESP2(RESPONSE2);

   SELECT (RESPONSE);
     WHEN (DFHRESP (NORMAL))
       DO;
         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': SUCCESSFUL WRITE TO JOURNAL 7';
             CALL WRITE_TO_OPER();
             DIAG_TEXT = MODULE||': MSG:'||SUBSTR(COMMAREA_MSG,1,60);
             CALL WRITE_TO_OPER();

           END;
       END;
     OTHERWISE
       DO;
         PIC_RESP  = RESPONSE;
         PIC_RESP2 = RESPONSE2;
         ET_TEXT1 = ERR2||MODULE||' FAILURE ON WRITE JOURNAL 7 RECORD';
         ET_TEXT2 = ERR2||MODULE||' RESPONSE '||PIC_RESP||
                                  ' RESP2 '||PIC_RESP2||
                                  ' MSG: '||SUBSTR(COMMAREA_MSG,1,14);
         SIGNAL ERROR;
       END;
   END;

   ET_TEXT1 = '';
   ET_TEXT2 = '';

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': END WRITE JOURNAL RECORD';
       CALL WRITE_TO_OPER();
     END;

 END WRITE_JOURNAL_RECORD;
                       



 /*******************************************************************/
 /* WRITE TO OPERATOR                 - ** FOR TEST ONLY **         */
 /*******************************************************************/
 WRITE_TO_OPER: PROC();

   EXEC CICS WRITEQ TD QUEUE('CESE') FROM(DIAG_TEXT) LENGTH(80);

 END WRITE_TO_OPER;
 
 /*******************************************************************/
 
 END QBMQWR ;

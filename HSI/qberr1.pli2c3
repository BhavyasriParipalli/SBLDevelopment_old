 QBERR1: PROC(@COMM) OPTIONS(MAIN,REENTRANT) REORDER;
 /*******************************************************************/
 /*                                                                 */
 /*  PROGRAM:  QBERR1      VERSION NR:  01        DATE:  06/14/10   */
 /*                                               TIME:  09:11:20   */
 /*                                                                 */
 /*  TITLE:  MQSERIES ERROR MODULE                                  */
 /*                                                                 */
 /*  FUNCTION:  THIS MODULE BUILDS THE ERROR RECORD LAYOUT          */
 /*             FOR CROSS LAR.                                      */
 /*                                                                 */
 /*  LANGUAGE:  PL/I (2.1)                                          */
 /*                                                                 */
 /*  MODULE TYPE:  REALTIME (CICS)                                  */
 /*                                                                 */
 /*  PARM:  @COMM - POINTER TO THE COMMAREA                         */
 /*                                                                 */
 /*  INTERFACES:  LINK QBMAIN                                       */
 /*                                                                 */
 /*  INPUTS:   COMMAREA - FROM CALLING (QBMAIN)  MODULE             */
 /*                                                                 */
 /*  OUTPUTS:  QBCROSS WITH ERROR RECORD LAYOUT (REPLACED)          */
 /*                                                                 */
 /*  REPORTS:  NONE                                                 */
 /*                                                                 */
 /*  CHRONOLOGICAL UPDATE LOG:                                      */
 /*                                                                 */
 /*  DATE:     REASON:    DRIVER:  DESCRIPTION:              PGMR:  */
 /* ---------- ---------- ---- ----------------------------  ------ */  
 /* 06/23/2010 FITSIT1411 0NSE ERROR MODULE                  DHANYA */
 /*                                                                 */
 /*01/27/2012  RCQ1882    2HSC RECOMPILED TO USE THE NEW CWA    NAK */
 /*******************************************************************/
 DCL VERSION      CHAR(17) STATIC INIT('2HSC - 01/27/2012');
 DCL MODULE       CHAR( 6) STATIC INIT('QBERR1');
 
 /*-----------------------------------------------------------------*/
 /* THE PREPROCESSOR IS USED TO DECLARE THE FOLLOWING CONSTANTS:    */
 /*                                                                 */
 /*    YES          = 'Y'                                           */
 /*    NO           = 'N'                                           */
 /*    BILL         = 'B'                                           */
 /*    NOBILL       = 'N'                                           */
 /*    PENDED_REC   = 'P'                                           */
 /*    REVIEW       = 'R'                                           */
 /*    NOT_ELIGIBLE = 'X'                                           */
 /*    HVLC         = 'H'                                           */
 /*    NON_HVLC     = 'N'                                           */
 /*    PEND         = '3'                                           */
 /*    NORMAL       = ' '                                           */
 /*    HSI          = 'I'                                           */
 /*    HSD          = 'D'                                           */
 /*-----------------------------------------------------------------*/
 %DCL LANG CHAR;
 %LANG = 'PLI';
 %DCL INTEGER  CHAR;
 %INTEGER  = 'FIXED BIN(31,0)';
 %DCL SHORTINT CHAR;
 %SHORTINT = 'FIXED BIN(15,0)';
 %DCL CLLDATE  CHAR;
 %CLLDATE  = 'CHAR(3)';
 %DCL YES      CHAR;
 %YES = '''Y''';
 %DCL NO       CHAR;
 %NO  = '''N''';
 %DCL BILL     CHAR;
 %BILL   = '''B''';
 %DCL NOBILL   CHAR;
 %NOBILL = '''N''';
 %DCL PENDED_REC CHAR;
 %PENDED_REC = '''P''';
 %DCL REVIEW   CHAR;
 %REVIEW = '''R''';
 %DCL NOT_ELIGIBLE CHAR;
 %NOT_ELIGIBLE = '''X''';
 %DCL HVLC     CHAR;
 %HVLC = '''H''';
 %DCL NON_HVLC CHAR;
 %NON_HVLC = '''N''';
 %DCL PEND     CHAR;
 %PEND   = '''3''';
 /*%DCL NORMAL   CHAR  */
 /*%NORMAL = ''' '''   */
 %DCL HSD      CHAR;
 %HSD    = '''D''';
 %DCL HSI      CHAR;
 %HSI    = '''I''';
 
 %PAGE;
 /*-----------------------------------------------------------------*/
 /* THE COMPILE TIMESTAMP IS RETRIEVED USING THE FOLLOWING          */
 /* PREPROCESSOR STATEMENTS:                                        */
 /*                                                                 */
 /*    %DCL CMPTIME CHAR                                            */
 /*    %DCL COMPILETIME BUILTIN                                     */
 /*    %CMPTIME = ''''||COMPILETIME||''''                           */
 /*                                                                 */
 /* (SHOWN HERE SINCE PREPROCSSOR CODE DOESN'T PRINT WITH DEFAULT   */
 /*  COMPILE OPTIONS.  NOTE:  STATEMENT SEMICOLONS ARE NOT SHOWN    */
 /*  TO AVOID A COMPILER WARNING MESSAGE.)                          */
 /*                                                                 */
 /*-----------------------------------------------------------------*/
 %DCL CMPTIME CHAR;
 %DCL COMPILETIME BUILTIN;
 %CMPTIME = ''''||COMPILETIME||'''';

 DCL COMPILE  CHAR(18) INIT(CMPTIME);

 %PAGE;
 /*******************************************************************/
 /*   BEGIN DECLARES                                                */
 /*******************************************************************/

 /*-----------------------------------------------------------------*/
 /*   BUILTIN FUNCTION DECLARES                                     */
 /*   NOTE:  THE FOLLOWING CANNOT BE USED UNDER CICS:               */
 /*          DATE, TIME                                             */
 /*-----------------------------------------------------------------*/
 DCL  ADDR         BUILTIN;
 DCL  CSTG         BUILTIN;         /* CURRENT STORAGE              */
 DCL  NULL         BUILTIN;         /* NULL POINTER VALUE           */
 DCL  ONLOC        BUILTIN;         /* NAME OF ENTRY-POINT WITHERROR*/
 DCL  ONSOURCE     BUILTIN;         /* NAME OF ENTRY-POINT WITHERROR*/
 DCL  PLIRETV      BUILTIN;
 DCL  PLIDUMP      BUILTIN;
 DCL  STG          BUILTIN;         /* STORAGE                      */
 /*-----------------------------------------------------------------*/
 /*  FILE DECLARES                                                  */
 /*  NOTE:  SYSPRINT IS THE ONLY FILE THAT PL/I CAN WRITE TO        */
 /*         UNDER CICS.  SYSPRINT OUTPUT IS ASSIGNED TO THE 'CPLI'  */
 /*         TRANSIENT DATA QUEUE.  SYSPRINT NEED NOT BE DECLARED,   */
 /*         BUT IF IT IS, IT SHOULD BE DECLARED AS ...              */
 /*-----------------------------------------------------------------*/

 /* DCL SYSPRINT FILE STREAM PRINT OUTPUT 4/2002 */

 /*-----------------------------------------------------------------*/
 /*  SET RUN-TIME OPTIONS                                           */
 /*-----------------------------------------------------------------*/

 DCL PLIXOPT      CHAR(250)
 INIT('STACK(24K,2K,ANY,FREE),HEAP(2K,2K,ANYWHERE,KEEP),
 MSGFILE(CEEMSG),THREADHEAP(2K,2K,ANY,),LIBSTACK(2K,2K,FREE),
 ANYHEAP(2K,2K,ANY,FREE),BELOWHEAP(4K,2K,FREE),
 TRAP(ON),RPTOPTS(OFF),RPTSTG(OFF)')
                                   STATIC VARYING EXTERNAL;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /*  POINTERS                                                       */
 /*-----------------------------------------------------------------*/
 DCL @COMM         PTR;  /* COMMAREA POINTER             */
 DCL @CWA          PTR INIT(NULL);  /* POINTER TO CWA               */
 
 
 %PAGE;
 DCL 1 COMMAREA   UNALIGNED BASED(@COMM), /* INPUT RECORD          */
       %INCLUDE QBCROSS ;,
       %INCLUDE AEQCOMM ;,
       %INCLUDE QBMQACK ;;	
     

 %PAGE;
 DCL 1 ERROR_TXT  UNALIGNED,
    %INCLUDE AEQERRT ;; 

 %PAGE;
 DCL 1 ERROR_CODE UNALIGNED,
  %INCLUDE QBABEND;;
 
 %PAGE;
 /*-----------------------------------------------------------------*/
 /*   COMMON WORK AREA FOR THE QSAR CICS REGION (OPTIONAL-IF NEEDED)*/
 /*-----------------------------------------------------------------*/
 DCL 1 CWA  UNALIGNED BASED(@CWA),
       %INCLUDE CWA ;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /* MISCELLANEOUS DECLARATIONS                                      */
 /*-----------------------------------------------------------------*/
 DCL COMMLEN     FIXED BIN(15)   INIT(0);
 DCL DIAG_TEXT         CHAR(80)  INIT('');
 DCL ERR2              CHAR(9)   INIT('QSR9002: ');
 DCL ERR1              CHAR(9)   INIT('QSR9000: ');
 DCL PIC_DATE          PIC'(6)9' INIT(0);
 DCL PIC_TIME          PIC'(6)9' INIT(0);
 DCL 1 PIC_TIME_OVER    BASED(ADDR(PIC_TIME)),
       3 PIC_HR         PIC '99',
       3 PIC_MIN        PIC '99',
       3 PIC_SEC        PIC '99';
 DCL TEST_SW           BIT(1)    INIT('0'B);
 /*------------------------------------------------------------------*/
 /* IN CICS 1.7, THE EIB IS 85 BYTES.  THIS STRING IS USED TO SAVE   */
 /* AN EIB IMAGE AT THE TIME AN ERROR OCCURS BEFORE AN ERROR MODULE  */
 /* IS INVOKED...                                                    */
 /*------------------------------------------------------------------*/
 DCL EIB_STRING         CHAR(85) BASED(DFHEIPTR);
 DCL RESPONSE           FIXED BIN(31) INIT(0);
 DCL TEMP_DOC (30)      CHAR( 9);  /*INIT((30)'') */

 %PAGE;
 /*******************************************************************/
 /* ERROR PROCESSING                                                */
 /* ----------------                                                */
 /* IT IS THE PROGRAMMER'S RESPONSIBILITY TO CHECK THE RETURN CODE  */
 /* FROM EACH COMMAND LEVEL CALL, AS APPROPRIATE.                   */
 /*******************************************************************/

 EXEC CICS
      IGNORE CONDITION ERROR;

 ON ERROR
   BEGIN;
     ON ERROR SYSTEM;                    /* PREVENT RECURSION ERROR */
     PIC_DATE = EIBDATE;
     PIC_TIME = EIBTIME;
     ET_PROGRAM_ID = 'QBERR1';
     ET_EIB = EIB_STRING;
     WTO_FLAG = 'Y';
     ET_DUMPCODE = 'N';

     DIAG_TEXT = ET_PROGRAM_ID||MODULE||' ENTRY POINT '||ONLOC;
     CALL WRITE_TO_OPER;

     DIAG_TEXT = 'DATE: '||PIC_DATE||' TIME: '||PIC_HR||':'||PIC_MIN;
     CALL WRITE_TO_OPER;
     DIAG_TEXT = ' TRANSID '||EIBTRNID||' TASK NUM '||EIBTASKN;
     CALL WRITE_TO_OPER;

     CERROR = '300';
     TERROR = 'INTERNAL ERROR : CONTACT HSI DEVLOPMENT';
	
     DIAG_TEXT='QBERR1: ERROR - '||CERROR||'-'||TERROR;
     CALL WRITE_TO_OPER;

     EXEC CICS RETURN;   END;

 %PAGE;
 /*******************************************************************/
 /* MAIN PROCESSING                                                 */
 /*******************************************************************/
 /* 1. GET ADDRESSABILITY TO THE CWA (OPTIONAL - IF NEEDED)         */
 /*-----------------------------------------------------------------*/
 TEMP_DOC(*) = '';
 EXEC CICS ADDRESS                     /* GET ADDR OF CWA           */
      CWA(@CWA)  RESP(RESPONSE);

 IF RESPONSE ^= DFHRESP(NORMAL)     /* IF ABNORMAL RESPONSE THEN    */
   THEN DO;                         /* PASS CONTROL TO ERROR PGM    */
     ET_TEXT1 = ERR2 || MODULE || ' FAILURE TO GET ADDRESS OF CWA';
     SIGNAL ERROR;
   END;

 IF CWA_QSAR_TRACE = YES | CWA_QSAR_TRACE = 'T'
   THEN TEST_SW = '1'B;

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = 'QBERR1: ENTERED:'|| CERROR;
     CALL WRITE_TO_OPER;        /* ********** TEST ONLY ********** */
   END;

 /*-----------------------------------------------------------------*/
 /* CHECK IF COMMAREA HAS DATA ... IF NOT, ERROR                    */
 /*-----------------------------------------------------------------*/

  IF EIBCALEN = 0                    /* IF COMMAREA NOT RECEIVED THEN*/
   THEN DO;                         /* TRANSFER CONTROL TO ERROR PGM*/
     ET_TEXT1 = ERR1 || MODULE || ' NO COMMAREA RECEIVED';
     SIGNAL ERROR;
    END;
  IF COMMAREA.CERROR  = ' ' 
   THEN;
  ELSE DO;
       CALL CREATE_ERROR_RECORD;
       CALL ACK_FOR_ERR;
      END;
  EXEC CICS RETURN; 
 /*---------------------------------------------------------------- */
 /* End of program                                                  */
 /*---------------------------------------------------------------- */
 
 
 
 /*******************************************************************/
 /* CREATE THE MQ RECORD FOR MQ WRITE IN QBCROSS COPY               */
 /*******************************************************************/
  CREATE_ERROR_RECORD: PROC;
 
  IF TEST_SW
   THEN DO;
     DIAG_TEXT = 'QBERR1:CRT ERROR RECORD:'|| CERROR;
     CALL WRITE_TO_OPER;        /* ********** TEST ONLY ********** */
   END;
  COMMAREA.CRECIND                     = 'E'; /*INDICATING ERROR    */  
  SELECT(COMMAREA.CERROR);
     WHEN('001')
          DO;
             COMMAREA.CERROR   = '200';
             COMMAREA.TERROR = DESC_CONNECT_FAILED;
             ERROR_CODE.C_ERR_CATGY = '200';
          END;
     WHEN('002')
          DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = DESC_OPEN_FAILED;
            ERROR_CODE.C_ERR_CATGY = '200'; 
          END;
     WHEN('003')
          DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = DESC_GET_FAILED;
            ERROR_CODE.C_ERR_CATGY = '200';
          END;
     WHEN('004')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = DESC_SET_FAILED;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;
     WHEN('005')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = DESC_PUT_FAILED;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;
     WHEN('006')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = DESC_CLOSE_FAILED;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;  
     WHEN('007')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = DESC_DISCONNECT_FAILED;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;   
     WHEN('008')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = MQ_RECORD_INVALID;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;
     WHEN('009')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = MQ_COMMIT_FAILED;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;
     WHEN('010')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = MQ_UNKNOWN_ERROR;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;
     WHEN('011')
           DO;
            COMMAREA.CERROR   = '200';
            COMMAREA.TERROR = MQ_IMPROPER_ERROR;
            ERROR_CODE.C_ERR_CATGY = '200';
           END;
     WHEN('012')
           DO;
            COMMAREA.CERROR   = '300';
            COMMAREA.TERROR = OTHER_ERROR;
            ERROR_CODE.C_ERR_CATGY = '300';
           END;
     WHEN('013')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = UNIT_PRICE_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('014')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = UNIT_COST_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('015')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = PT_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('016')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = PT_SOURCE_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('017')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = NSD_SOURCE_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('018')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = RESUBMIT_DOC_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('019')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = RECYCL_DOC_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('020')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = HOLD_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('021')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = MPI_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('022')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = SAV_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('023')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = SPWN_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('024')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FPT_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('025')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FSYSS_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('026')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FOEM_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('027')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FOEM_CNTR_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('028')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FAUD_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('029')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FMPI_DB_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('030')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FISS_CNTR_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('031')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FIBM_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('032')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FONMA_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('033')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FWARR_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('034')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FOEE_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('035')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FECI_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('036')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FEBCONT_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('037')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FRSTCNTR_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('038')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FCAD_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('039')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FSRCNSS_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('040')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FTSSMACH_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('041')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FPETMSG_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('042')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FSYSBILL_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('043')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FMICRO_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('044')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FMES_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('045')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FECA_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('046')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FREA_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('047')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FCTRBUSY_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('048')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FCTRDBUN_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('049')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FSPCCNTR_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('050')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FPREPEND_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('051')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FMPI24X7_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('052')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FCNT24X7_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('053')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FWAR24X7_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('054')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FSOMACH_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('055')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FOEE_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('056')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = FLNVEMPL_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('057')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFCMFEA_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('058')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFDCMFE_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('059')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFSYST_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('060')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJF30PCT_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('061')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJF40PCT_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('062')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFDEMO_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('063')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFCELOA_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('064')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFMLCAU_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('065')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFAUTOR_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('066')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFDCFTS_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('067')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFSOLIC_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('068')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFARBI_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('069')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFPAD04_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('070')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFIMI_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('071')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFROPS_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('072')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFDSI_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('073')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFPMD_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('074')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFBTH_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('075')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFBRV_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('076')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFBSF_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('077')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFBSO_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('078')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFPAD06_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('079')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFRT_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('089')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = GJFNUS_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('090')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = CGFOCL_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('091')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = CGFCOD_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     WHEN('092')
           DO;
            COMMAREA.CERROR   = '100';
            COMMAREA.TERROR = CGFCOD_FLAG_ERROR;
            ERROR_CODE.C_ERR_CATGY = '100';
           END;
     OTHERWISE
           DO;
            COMMAREA.CERROR   = '300';
            COMMAREA.TERROR = OTHER_ERROR;
            ERROR_CODE.C_ERR_CATGY = '300';
           END;
   END; 
  END CREATE_ERROR_RECORD;
 /*******************************************************************/
 /* ACKNOWLEDGEMENT RECORD TO PUT BACK IN QUEUE FOR ERROR          */
 /*******************************************************************/
 ACK_FOR_ERR: PROC;
   
   IF TEST_SW
    THEN DO;
     DIAG_TEXT = 'QBERR1:CRT ACK RECORD:'|| CERROR;
     CALL WRITE_TO_OPER;        /* ********** TEST ONLY ********** */
    END;
   
   COMMAREA.CMSGTYPE    	        = '02';
   COMMAREA.IDOCNUM  		        = COMMAREA.S0IDOCMN;
   COMMAREA.CHIGHSEV                    = COMMAREA.CGQHIGSE;
   COMMAREA.ICEBRANCH  			= COMMAREA.CMIBOCE;
   COMMAREA.ICETERR      		= COMMAREA.CIICETER;
   COMMAREA.IEMPSER                     = COMMAREA.S0IEMPSE;
   COMMAREA.DACTVTY       		= COMMAREA.S0DCALCY ||
                          		  COMMAREA.S0DCALCM ||
    		                          COMMAREA.S0DCALCD;
   COMMAREA.DAUDIT            	        = COMMAREA.AUDIT_DATE;
   COMMAREA.TAUDIT         	        = COMMAREA.AUDIT_TIME;
   COMMAREA.CTYPE                       = 'E';
   COMMAREA.CRECERR                     = COMMAREA.CERROR;
   COMMAREA.TERRDESC                    = COMMAREA.TERROR;
   COMMAREA.IINVOICE                    = '';
   COMMAREA.CINVTYPE                    = '';

 END ACK_FOR_ERR;
 /*******************************************************************/

 /*******************************************************************/
 /* WRITE TO OPERATOR                 - ** FOR TEST ONLY **         */
 /*******************************************************************/
 WRITE_TO_OPER: PROC;

   EXEC CICS WRITEQ TD QUEUE('CESE') FROM(DIAG_TEXT) LENGTH(80);

 END WRITE_TO_OPER;
 /*******************************************************************/
 END QBERR1;
  QBBIL1: PROC(@COMM) OPTIONS(MAIN,REENTRANT) REORDER;
 /*******************************************************************/
 /*                                                                 */
 /*  PROGRAM:  QBBIL1      VERSION NR:  01        DATE:  07/07/89   */
 /*                                               TIME:  09:11:20   */
 /*                                                                 */
 /*  TITLE:  INITIAL (QSAR) BILLING MODULE                          */
 /*                                                                 */
 /*  FUNCTION:  PERFORM MAIN BILLING CONTROL LOGIC, DRIVEN OFF OF   */
 /*             B/A CODE.  MATCH THE ORIGINAL QSAR TO ANY PART      */
 /*             TRAILERS WHICH ARE FROM THE SAME CALL FOR BILLING   */
 /*             PURPOSES.                                           */
 /*                                                                 */
 /*  LANGUAGE:  PL/I (2.1)                                          */
 /*                                                                 */
 /*  MODULE TYPE:  REALTIME (CICS)                                  */
 /*                                                                 */
 /*  PARM:  @COMM - POINTER TO THE AEQCOMM                          */
 /*                                                                 */
 /*  INTERFACES:  LINK QBBILX1                                      */
 /*               LINK QBPRIC1/QBPRIC2                              */
 /*               XCTL QBBIL2  (IF BILLABLE/POTENTIALLY BILLABLE)   */
 /*               XCTL AEQDBU3  (IF NOT BILLABLE | PART TRAILER)    */
 /*                                                                 */
 /*  INPUTS:   AEQCOMM - AEQCOMM, FROM AEQPST2 MODULE               */
 /*                                                                 */
 /*  OUTPUTS:  AEQCOMM - AEQCOMM/QBCOMM (CREATED)                   */
 /*                                                                 */
 /*  REPORTS:  NONE                                                 */
 /*                                                                 */
 /*  CHRONOLOGICAL UPDATE LOG:                                      */
 /*  DATE:    REASON:  DRIVER: DESCRIPTION:            PROGRAMMER:  */
 /*  09/27/89 SR9892   0NSA    INITIAL VERSION                 JWJ  */
 /*  10/23/89 TU9892D  0NSA                                    JWJ  */
 /*  11/07/89 I86938   0NSA    SET QBBILL.CHVLC                JWJ  */
 /*  11/20/89 I88190   0NSA    IF RESUBMIT,RECYCLE,NSDCADD     LBS  */
 /*                            & BILLABLE | REVIEW SET SYSINV       */
 /*                            TO 'Y'                               */
 /*  11/30/89 I88668   0NSA    CHANGE BILLING TYPE TO BILLING  LBS  */
 /*                            CLASS                                */
 /*  12/08/89 I89137   0NSA    PART PRICE TRUNCATING CENTS     LBS  */
 /*  12/19/89 I89308/  0NSA    INIT PARTS TRAILER BILL DATA    LBS  */
 /*           I89526           PO QSARS DON'T GO THRU BILLING       */
 /*  01/22/90 DCR9892E 0NSA    INVENTORY/CMR MISMATCH LOGIC    JWJ  */
 /*  03/06/90 I90269   0NSA    PENDED ORIGINAL MATCH TO PART   LBS  */
 /*                            TRAILER                              */
 /*  03/21/90 I94786   0NSA    DO NOT OFF BILL SEGS IF         LBS  */
 /*                            MATCHING PART TRAILER PENDS          */
 /*  03/26/90 I95217   0NSA    CHANGE INTERMEDIATE FIXED DEC   LBS  */
 /*                            FIELD FROM 9,2 TO 11,2 TO SUPPORT    */
 /*                            LARGEST PART PRICE                   */
 /*  04/05/90 I96093   0NSA    MOVE ROLM "NOT BILLABLE" CHECK  JWJ  */
 /*                            AHEAD OF B/A LOGIC                   */
 /*  04/25/90 I96768   0NSA    MTM "CTAXCD"=19 DEFINED AS      JWJ  */
 /*                            NON-BILLABLE (FOR ADP ACTIVITY)      */
 /*           I97337   0NSA    REMOVE CHECK FOR "AAS" MACHINES JWJ  */
 /*                            IN RSO MISMATCH                      */
 /*           I97338   0NSA    MAKE STAT '32' A "NOT BILLABLE"      */
 /*                            CHECK AHEAD OF B/A LOGIC             */
 /*  05/08/90 I96518   0NSA    ADD CONDITION CHECK ON PART PRICELBS */
 /*                            ASSIGNMENT                           */
 /*  06/19/90 I100019  0NSC    DECISION LOGIC CHANGES:          JWJ */
 /*                            - CONTRACT NO.                       */
 /*                            - SC 08 SERIAL 'XXXXXXX'             */
 /*  08/21/90 SR0252   0NSK    ADD HDA ASSIGNMENTS              BLS */
 /*  08/21/90 SR0384   0NSK    ADD ADP FAILURE/ACTION CODE AND  DVC */
 /*                            ADP PRODUCT CODE                     */
 /*  02/07/91 SR0702   1NSC    ADD CAD PROB NUMBER ASSIGNMENT   LBS */
 /*           TU0723C          ADD ADDITIONAL CHECK FOR DSI     LBS */
 /*                            INVENTORY SOURCE                     */
 /*  05/13/91 SR0768   1NSG    ADD ASSIGNMENT FOR NEW "MATCH        */
 /*                            TO PCBID MACHINE TYPE" FLAG      ABM */
 /*  05/13/91 DCR0777A 1NSG    ADD ASSIGNMENT FOR NEW               */
 /*                            CE ENTERED INSTALL DATE FIELD    ABM */
 /*  6/24/91  I119486  1NSG    REMOVE INIT OF COMMAREA IN       LBS */
 /*                            CREATE COMMAREA PROC ADDED IN 1NSG   */
 /*  06/26/91 SR0832   1NSK    DO NOT BILL QSAR WHEN MARKETING  LBS */
 /*                            OFFICE IS EQUAL TO JEQ               */
 /*                            ADD ADDITIONAL CHECK FOR LOW(3) ON   */
 /*                            RSO ASSIGNMENT                       */
 /*  09/03/91 I135661  1NSK    INITIALIZE PART TAXING FIELDS    LBS */
 /*  10/07/91 I138122  1NSK    SET FIELD   COCL TO '1' OR '0'   LBS */
 /*  10/17/91 SR0776   1NSM    INIT BILLING COMMAREA            LBS */
 /*                            DON'T FORGET TO SAVE P#(NUM OF PARTS)*/
 /*  12/17/91 I141799  1NSM    DON'T INIT BILLING COMMAREA      LBS */
 /*  12/18/91 TU0934C  2NSA    ASSIGN FIELD IAIC                LBS */
 /*  03/16/92 I147330  2NSA    FIX PART ONLY CHECK (USE CHCDATIT)ABM*/
 /*                           CHANGE CONDITION CHECK FROM OVRLY_IRDL*/
 /*  03/24/92 SR1040   2NSB    DO NOT BILL ROLM CUSTOMERS       LBS */
 /*                            MARKETING DIVISION '82'              */
 /*  04/29/92 SR0972   2NSD    ADD ASSIGNMENT FOR PRODUCT ID    ABM */
 /*  04/29/92 SR1061   2NSD    ADD ASSIGNMENT FOR SERVICE PERF. ABM */
 /*  08/20/92 H0016664 2NSF    ADD ASSIGNMENT FOR PEND_HDA FLAG ABM */
 /*  10/06/92 SR1084   2NSJ    IF B/A 7 BILL PARTS (NO LABOR)   LBS */
 /*  10/30/92 SR1153   2NSJ    ADD LOGIC TO CHECK THE CAD DB    LBS */
 /*                            FOR BILLING DECISION IF CE BA        */
 /*                            CODE IS BLANK                        */
 /*  10/06/92 I165363  2NSJ    CHECK CAD BILL ACTIVITY CODE     LBS */
 /*                            BEFORE GOING TO QBBILX1              */
 /*  01/20/93 SR1204   3NSD    MERGE SC 01 & SPAWNED 08 QSARS   LBS */
 /*  04/08/93 SR93110  3NSJ    ADD ASSIGNMENT FOR FPTCORR       LBS */
 /*  05/06/93 S9300154 3NSJ    ADD ASSIGNMENT FOR FOEMTYPE      LBS */
 /*  05/26/93 S9300171 3NSJ    ADD DEFAULT ASSIGNMENT FOR       LBS */
 /*                            TAX CLASS IF NOT SET                 */
 /*  08/03/93 S9300162 3NSL    ADD ADP WORK ORDER NUMBER        DLK */
 /*  09/08/93 S9300144 3NSL    ADD ASSIGNMENT FOR SOURCED FROM  LBS */
 /*                            KODAK  (FSRCKDK), CHECK OTHER        */
 /*                            BRANCH OFFICE WORKED AGAINST RSO     */
 /*                            FOR KODAK/AMIGO QSARS                */
 /*  10/20/93 S9300237 3NSL    REMOVE CONDITION ON CTAXCD = 19  LBS */
 /*                            FOR NO BILL CONDITION                */
 /*  11/10/93 S9300198 3NSN    SOFTWARE SERVICING (SC 94) IS NOTLBS */
 /*                            BILLABLE                             */
 /*  01/06/94 S9300218 3NSP    UPDATED NO BILL DECISION LOGIC   LBS */
 /*                            IF CAD BA = 'B' AND SYSTEM SAYS      */
 /*                            NO BILL, THEN DO NOT BILL OR SEND    */
 /*                            TO RES                               */
 /*  01/17/94 S9300220 3NSP    ADD ASSIGNMENTS TO SAVE DATA FOR LBS */
 /*                            AUDIT TRAIL INFORMATIO-N             */
 /*                            CSOURCE & FAUDUNAV                   */
 /*  03/02/94 S9300253 4NSA    ADD ASSIGNMENTS TO SAVE DATA FOR LBS */
 /*                            AUDIT TRAIL INFORMATION FAUDBUNA     */
 /*  03/03/94 I0234980 4NSA    ADD ASSIGNMENT TO SAVE MPI DB    DLK */
 /*                            AVAILABILITY INFORMATION             */
 /*  03/17/94 S9400031 3NSN    BILL SOFTWARE SERVICES (SC 94)   LBS */
 /*  10/19/94 S9300229 4NSM    ZERO OUT NEW PAD01 FIELD CREATED WITH*/
 /*                            EXPENSE DATABASE CHANGE.         DLK */
 /*  01/26/95 S9400170 4NSM    ADD ASSIGNMENTS TO SAVE NEW CONTRACT */
 /*                            SEARCH FIELDS.                   DLK */
 /*  03/27/95 S9500015 5NSC    ADD CE CUSTOMER NUMBER           DLK */
 /*  04/06/95 I0341231 5NSC    FIX SC 94 ACT *4 ENTERED VIA     LBS */
 /*                            QSAR/C-NOT BILLING                   */
 /*  04/10/95 I0342168 5NSC    SET CMREXCP FLAG TO BLANK WHEN   LBS */
 /*                            CMR NUMBER FOUND                     */
 /*  05/28/95 S9500054 5NSD    UPDATE CODE FOR SPECIAL CHG UPG  LBS */
 /*  06/13/95 S9400206 5NSE    EXCEPTION DATA REMOVED FROM COMM LBS */
 /*  10/11/95 S9500147 5NSM    BILLABLE ACT CODE WITH CONTRACT  YDS */
 /*  10/13/95 S9500187 5NSM    DO NOT BILL DART QSARS           LBS */
 /*  11/17/95 I0410524 5NSM    ADD ASSIGNMENT FOR FTSSMACH      LBS */
 /*  11/28/95 S9500167 5NSM    ADD ASSIGNMENT FOR FCMPS_S       YDS */
 /*           S9500161 5NSM    ADD ASSIGNMENT FOR ISRVGCE       LBS */
 /*                                               ISRVGRSO          */
 /*  06/15/96 S9600243 6NSG    REMOVE ROLM CODE FROM QSAR           */
 /*                            PROCESSING                       DLP */
 /*           S9570033 6NSG    ADD PRF PROMPT AND MICRO, MES, ECA   */
 /*                            AND REA FLAGS.                   DLP */
 /*  10/15/96 S9600620 6NSP    ADD SEVERITY PROMPT TO TRUER     MKP */
 /*  11/06/96 S9600308 6NSR    ADD LOGIC FOR SDT PROCESSING     LBS */
 /*  11/15/96 H0125172 6NSR    ADD FPREPEND BIT FLAG            DLP */
 /*  10/15/96 S9600638 7NSA    VALIDATE S/N LENGTH ON SELECT        */
 /*                            OEM M/TS ADD QMSERMIN, QMSERMAX      */
 /*                            AND FMTYPCHK                     DLP */
 /*  03/12/97 S97033   7NSG    ADD ASSIGMENTS FOR FDROPOL(N)    DLP */
 /*  04/29/97 S97002   7NSI    ADD ASSIGNMENTS FOR FEDERAL ID   YDS */
 /*  05/07/97 S9600755 7NSI    SUPPORT NSS MRO PARALLEL SYSPLEX LBS */
 /*                            Phase I                              */
 /*  07/17/97 I0437391 7NSI    COMMENT OUT PUT SKIP EDIT        LBS */
 /*  03/22/97 S970133  7NSP    ADD FACTWORK, CACTFAIL, CRTSSTAT DLP */
 /*  01/26/98 S970219  8NSC    ADD FCLM_S, CIACTIND, CGROUP     MKP */
 /*                            CCNTRSRC                             */
 /*  04/14/98 S98027   8NSG    EXPANDED FIELD (CALL_DATE) FROM  KLS */
 /*                            CHAR(6) TO CHAR(8). EXPANDED FIELDS  */
 /*                            (SSA_LOW) AND (SSA_HIGH) FROM        */
 /*                            CHAR (17) TO CHAR(19). CHANGE THE    */
 /*                            YEAR ASSIGNMENT IN FIELD (CALL_DATE) */
 /*                            FROM A SUBSTRING TO A STRAIGHT       */
 /*                            ASSIGNMENT                           */
 /*  05/20/98 S98077   8NSI    ADD VALID_BILL_CODE FLAG TO      DLP */
 /*                            AEQFLAGS                             */
 /*  08/05/98 S98124   8NSM    ADD CONTRACT YXXKB & SC03M0Y     LBS */
 /*                            TO NOBILL CONTRACT LIST IN SELECT    */
 /*                            ADD ISOURCE AND FSTDER_S             */
 /*  09/22/98 S98160   8NSM    BA 1 ON WARR OR M/A-BLOCK HSI    YDS */
 /*                            ADD ASSIGNMENT FOR FONWARNTY         */
 /*  09/22/98 S98126   8NSM    ALLOW RECORDS WITH HVLC MACHINES KLS */
 /*                            AND A BA '4' TO FLOW TO RES          */
 /*  03/17/99 S97140   8NSN    COMM AREA ADDITIONS              SFM */
 /*  09/10/99          9NSA    REMOVE REFERENCE TO DOWN LEVEL   KLS */
 /*                            TABLES                               */
 /*  09/28/99          9NSA    ADD WAYBILL ASSIGNMENT           MKP */
 /*                            REMOVE REFERENCES TO FSRCKDK     LBS */
 /*  03/06/01 S01007   1NSA   add assignments for HSI Credit cardMKP*/
 /*                           authorization number, remove XCTL     */
 /*                           to QBCAD1, change to QBBIL2, QSAR now */
 /*                           retrieves the NSS call data           */
 /*  06/22/01 S01032   1NSP   add assignment for WORK NUMBER    LBS */
 /*                           ACTIVITY and FWKUCHG                  */
 /*  07/17/01 M5682142 1NSA   add condition to assignment of CC LBS */
 /*                           auth number (create COMMAREA)         */
 /*  10/15/01 SR01055  1NSP   additional logic on DSI selection LBS */
 /*                           now will get all records from DSI     */
 /*  10/15/01 S01052   2NSA   Remove all references to ADV      DLP */
 /*  02/06/02 S02001   2NSD   Remove references to FDROPOL      LBS */
 /*  04/01/02 S01054   2NSE   Bypass ISSC & Innnnnn Contracts   REY */
 /* 4/15/2002 HSIPROD  2NSG   LE 2.10 changes, PLIXOPT          LBS */
 /*  05/10/02 HSIPROD  2NSG   Set ALL QualxServ records (QLX)   REY */
 /* 4/15/2002 HSIPROD  2NSG   LE 2.10 changes, PLIXOPT          LBS */
 /*                             to NOBILL                           */
 /* 7/15/2002 S020032   2NSK  Effective status set based on DSI DLP */
 /*                           and CEDB (rename CEBSTAT to FSTATRST) */
 /*                           use the warranty setting out of the   */
 /*                           general segment FWARRNTY instead of   */
 /*                           AEQFLAGS FONWARNTY                    */
 /* 8/15/2002 FITS023734 2NSK Expand ICCAUTH from 13 to 14 char REY */
 /*                             adding SC 20 abd 36 logic.          */
 /*                             Comment out Spawned SC 08 logic.    */
 /* 9/25/2002 HSI2NSK004 2NSK change reinitialization of S0CBIOSALBS*/
 /* 10/29/2002 GP021333 3NSE NEW CONDITIONS RESULTING IN ROUTING DLP*/
 /*                          RECORD TO RES                          */
 /*                          Do a direct assignment   of csplchg    */
 /* 10/29/2002 GP021333 3NSE Add logic to use the new 3 digit   DLP */
 /*                          field (CSPLCHG)in the standard rate    */
 /*                          TABLE                                  */
 /* 12/06/2002 GP021333 3NSE add FINCDPRT to tell if invoicing  DLP */
 /*                          should handle parts                    */
 /* 12/20/2002 HSIPROD  3NSE  CHANGE PLIDATE TO CEEDATE         DLP */
 /* 01/03/2003 QSAR_3NSE_005 Incident fee take precedence over  LBS */
 /*                          SDT when setting special charge field  */
 /* 01/14/2003 PCR0010  3NSE SC 20 and 36 are not part of the   LBS */
 /*                          incident fee code assignment           */
 /* 02/03/2003 HSIPROD  3NSE change READ DATASET to READ FILE   LBS */
 /* 02/07/2003 PCR0012  3NSE if machine is PER CALL and the CALL LBS*/
 /*                          has an incident fee, bill hourly       */
 /* 03/38/2003 SR030023 3NSI add new aeqsgenl assigments in     LBS */
 /*                          create COMMAREA                        */
 /* 04/15/2003 NSS3NSI41 3NSI Assign converted serial number    LBS */
 /* 09/02/2003           4NSC Support for PCD Stewart products. REY */
 /*        FITS GP0619035151  Pick up IBILLSTAT value.              */
 /* 12/02/2003 MN16942409     Changes added to prevent TaxCalc  REY */
 /*                           from abending (0C4) because of a      */
 /*                           blank TAXID.                          */
 /* 11/06/2003 SR030019  4NSC add assignments for new data in   LBS */
 /*                           4NSC.                                 */
 /*01/27/2004 RQ031502359 4NSC SUPPORT INSIDE/OUTSIDE HOURS     DLP */
 /*                            CHANGES                              */
 /*02/25/2004 HSI4NSC001 4NSC FIX ASSIGNMENT OF BLANK ACTUAL    DLP */
 /*                             HOURS. AND THE RETURN FROM          */
 /*                             SDT_BILLABLE THAT WAS NOT CORRECT.  */
 /*02/27/2004 HSI4NSC002 4NSC FIX GRACE CHECK NOT WORKING       DLP */
 /*03/01/2004 HSI4NSC003 4NSC FIX COMMENT BEYOND 72             DLP */
 /*03/03/2004 HSI4NSC006 4NSC If ALWAYSBILL, set SEND_TO_CE     LBS */
 /*                           PERFORM_PRICING, CCONTROL             */
 /*03/05/2004 HSI4NSC010 4NSC RES error incorrect for SC 36,    LBS */
 /*                           change from 223 to 232 (new)          */
 /*03/09/2004 HSI4NSC011 4NSC save billing flags for later      LBS */
 /*                           reassignment to QSGENL                */
 /*03/10/2003 HSI4NSC012 4NSC add find_upgrade_rate proc        LBS */
 /*03/15/2004 HSI4NSC014 4NSC for RMR/RWI setting it check      LBS */
 /*                           should be for O not 0 (zero)          */
 /*03/16/2004 HSI4NSC016 4NSC if it is a valid incident fee set LBS */
 /*                           part count to 0                       */
 /*03/16/2004 HSI4NSC017 4NSC M_MPI a char type not bit see     LBS */
 /*                            proc, 09                    */
 /*03/16/2004 HSI4NSC018 4NSC ADD PD/PSI branch office check to LBS */
 /*                           to see if ccotype needs to set to     */
 /*                           blank (in create commarea)            */
 /*                           blank out UOR if all inside hours     */
 /*03/23/2004 HSI4NSC023 4NSC change some assign NOBILL to NOT  LBS */
 /*                           ELIGIBLE, do not bill incident UOR    */
 /*                           if all inside hours                   */
 /*03/24/2004 HSI4NSC024 4NSC add condition check FINCDNT=N     LBS */
 /*                           when setting #P = 0                   */
 /*03/25/2004 HSI4NSC025 4NSC not billing part on DTx incident  LBS */
 /*03/25/2004 HSI4NSC028 4NSC billing SC 01/03 on SQL QSARs     LBS */
 /*04/08/2004 HSI4NSC038 4NSC move some alwaysbill stuff around LBS */
 /*04/12/2004 HSIPCR010  4NSC change condition on SDT and part  LBS */
 /*                           count = 0, add and BWC is blank   LBS */
 /*                           if not part of Outside hrs calc       */
 /*                           hours should default to 800/1700      */
 /*04/20/2004 HSIPCR012  4NSC Remove SC 01/AC10 from neverbill  LBS */
 /*                           Bill if BA = 3 and use default hours  */
 /*                           if CHIS contract indicates service    */
 /*                           type 'X' and it is an onsite service. */
 /*05/10/2004 SR040020   4NSC do not bill WPS QSARs             DLP */
 /*05/25/2004 prodsupt   4NSC add code to do a date check for   LBS */
 /*                           billing flag settings (6/12/2004)     */
 /*05/26/2004 mn19380887 4NSC add logic to check for all flags = LBS*/
 /*                           N and no incident fee                 */
 /*06/01/2004 HSI_4NSC_048 4NSC fix the QB control balance RPT   dlp*/
 /*                             ADD counters FOR PENDED RECS ONLY   */
 /*06/07/2004 HSI_4NSC_050 4NSC fix grace period check for grace dlp*/
 /*                             period crossing 2 days              */
 /*07/07/2004 HSI_4NSC_053 4NSC change cond check on routing to  LBS*/
 /*                             QBPRIC1                             */
 /*07/21/2004 SR040069     4NSG Block OEE records from HSI       DLP*/
 /*07/21/2004 SR040066     4NSG add IPONUM assignment            LBS*/
 /*01/27/2005 SR040017     5NSM block Canada records from HSI    LBS*/
 /*03/14/2005 SR050023     5NSC add assignments for Lenovo data  LBS*/
 /*                             remove references to FSRCDART       */
 /*07/01/2005 RQ0505055454 4NSG Make ISOURCE ACR logic = SQL     REY*/
 /*07/07/2005 MN#24556667  4NSG Add nothing to bill check.       REY*/
 /*05/25/2005 SR040017     5NSM NA merge retrofit                DLP*/
 /*08/12/2005 RQ057017     5NSO Non-standard rate for non standard  */
 /*                             codes                            VJK*/
 /*10/05/2005 SR050053     5NSO add assigment for FACTADMN       LBS*/
 /*08/12/2005 MN#26229774  6NSC Add the exit condition in the       */
 /*                             neverbill proc for SC 36         VJK*/
 /*03/27/2006 RQ0320064649 6NSC Start autobilling QualxServ  ARCHANA*/
 /*                             records effective 04/10/2006        */
 /*03/01/2006 RQ054527     6NSH Bill parts only.                 VJK*/
 /*05/25/2006 RQ0429057010 6NSJ add assignments for          ARCHANA*/
 /*                             restricted CMR data                 */
 /*09/12/2006 SR060032     6NSN add assignments for CSDTOPTN     LBS*/
 /*                             CCHIS                                */
 /*09/26/2006 SR0600xx     6NSN add CMFGER assignment for Cost   LBS */
 /*                             Codes project                        */
 /*10/13/2006 RQ046246     7NSA Remove hard disk marked part ARCHANA */
 /*                             from QSAR activity record            */
 /*12/22/2006 prodsupt     7NSB remove assignment for CGADPFAC,  LBS */
 /*                             CGADPPRC, IADPWON                    */
 /*02/09/2006 MN30780788   7NSB Include conditions to check S0QTRAMI */
 /*                             & S0ATRAEX equals to zero value in   */
 /*                             NOBILLDIST & NOBILLEXPENSE   ARCHANA */
 /*02/16/2007 HSIPROD  7NSM  remove PLI preprocessor declare of  LBS */
 /*                          normal for Enterprise Compiler          */
 /*02/22/2007 SR060049 7NSM  add assignments for CCOSTCAT,       LBS */
 /*                          IMACOWNR,IMACMFGR,FMTMCSU,CWUMP         */
 /*06/20/2007 SR060054 7NSR  recompile for changes to AEQSINVT   LBS */
 /*                          CISOCTRY, CSNPRFIX                      */
 /*10/03/2007 SR070005 8NSA  do not bill Lenovo employee machinesLBS */
 /*12/14/2007 prodsupt 8NSA  add assignment for COWNCALC         LBS */
 /*02/21/2008 Mn34753944 8NSA abend LOAD_START_END_INSIDE_HOURS  LBS */
 /*02/20/2009 prodsupt 9NSG  diagnostic for QBPRIC2 printing     LBS */
 /*04/07/2009 prodsupt 9NSG  add svc code 44 check 3 places      LBS */
 /*06/25/2010 IT4211   0NSE  Changes to support processing of    AM  */
 /*                          Cross service call records              */
 /*09/09/2010 IT4211xx 0NSE  add check for ICOUNTRY ^= 849 to    LBS */
 /*                          set no bill because of country for LAR  */
 /*09/10/2010 IT4211xx 0NSE Put the display of COMMLENGTH under  NM  */
 /*                          TEST_SW check                           */
 /*09/12/2010 prodsupt 0NSE change allocate price to getmain     LBS */
 /*04/14/2011 IT4211xx 0NSE Change MATCH_TO_PART_TRAILERS proc   NM  */
 /*                         to pick part trailers from CROSS LAR     */
 /*11/21/2011 RCQ1882  2HSC Modified code to include processing  ABR */
 /*                         of SDT file as part of NSS sunset        */
 /*                                                                  */
 /*12/27/2011 RCQ1882  2HSC Remove Area number logic             NAK */
 /*04/26/2012 RCQXX    2HSC Included GET_SDT_DAYNUM for SDT      NAK */
 /*07/28/2016 RCQ0345 15HSC RECOMPILED TO PICK NEW CHANGES IN GAYATRI*/
 /*                               QBPRICE                            */
 /*04/02/19   NOBILL-81     ADD NOBILL LOGIC FOR LENOVO              */
 /*04/22/19   BAR           Include BAR for ISOURCE with QLX & blank */ 
 /********************************************************************/
 /********************************************************************/
 DCL VERSION      CHAR(18) STATIC INIT('15HSC - 07/28/2016');
 DCL MODULE       CHAR( 6) STATIC INIT('QBBIL1');

 /*-----------------------------------------------------------------*/
 /* THE PREPROCESSOR IS USED TO DECLARE THE FOLLOWING CONSTANTS:    */
 /*                                                                 */
 /*    YES          = 'Y'                                           */
 /*    NO           = 'N'                                           */
 /*    BILL         = 'B'                                           */
 /*    NOBILL       = 'N'                                           */
 /*    PENDED_REC   = 'P'                                           */
 /*    REVIEW       = 'R'                                           */
 /*    NOT_ELIGIBLE = 'X'                                           */
 /*    HVLC         = 'H'                                           */
 /*    NON_HVLC     = 'N'                                           */
 /*    PEND         = '3'                                           */
 /*    NORMAL       = ' '                                           */
 /*    HSI          = 'I'                                           */
 /*    HSD          = 'D'                                           */
 /*-----------------------------------------------------------------*/
 %DCL LANG CHAR;
 %LANG = 'PLI';
 %DCL INTEGER  CHAR;
 %INTEGER  = 'FIXED BIN(31,0)';
 %DCL SHORTINT CHAR;
 %SHORTINT = 'FIXED BIN(15,0)';
 %DCL CLLDATE  CHAR;
 %CLLDATE  = 'CHAR(3)';
 %DCL YES      CHAR;
 %YES = '''Y''';
 %DCL NO       CHAR;
 %NO  = '''N''';
 %DCL BILL     CHAR;
 %BILL   = '''B''';
 %DCL NOBILL   CHAR;
 %NOBILL = '''N''';
 %DCL PENDED_REC CHAR;
 %PENDED_REC = '''P''';
 %DCL REVIEW   CHAR;
 %REVIEW = '''R''';
 %DCL NOT_ELIGIBLE CHAR;
 %NOT_ELIGIBLE = '''X''';
 %DCL HVLC     CHAR;
 %HVLC = '''H''';
 %DCL NON_HVLC CHAR;
 %NON_HVLC = '''N''';
 %DCL PEND     CHAR;
 %PEND   = '''3''';
 /*%DCL NORMAL   CHAR  */
 /*%NORMAL = ''' '''   */
 %DCL HSD      CHAR;
 %HSD    = '''D''';
 %DCL HSI      CHAR;
 %HSI    = '''I''';
 
 %PAGE;
 /*-----------------------------------------------------------------*/
 /* THE COMPILE TIMESTAMP IS RETRIEVED USING THE FOLLOWING          */
 /* PREPROCESSOR STATEMENTS:                                        */
 /*                                                                 */
 /*    %DCL CMPTIME CHAR                                            */
 /*    %DCL COMPILETIME BUILTIN                                     */
 /*    %CMPTIME = ''''||COMPILETIME||''''                           */
 /*                                                                 */
 /* (SHOWN HERE SINCE PREPROCSSOR CODE DOESN'T PRINT WITH DEFAULT   */
 /*  COMPILE OPTIONS.  NOTE:  STATEMENT SEMICOLONS ARE NOT SHOWN    */
 /*  TO AVOID A COMPILER WARNING MESSAGE.)                          */
 /*                                                                 */
 /*-----------------------------------------------------------------*/
 %DCL CMPTIME CHAR;
 %DCL COMPILETIME BUILTIN;
 %CMPTIME = ''''||COMPILETIME||'''';

 DCL COMPILE  CHAR(18) INIT(CMPTIME);

 %PAGE;
 /*******************************************************************/
 /*   BEGIN DECLARES                                                */
 /*******************************************************************/

 /*-----------------------------------------------------------------*/
 /*   BUILTIN FUNCTION DECLARES                                     */
 /*   NOTE:  THE FOLLOWING CANNOT BE USED UNDER CICS:               */
 /*          DATE, TIME                                             */
 /*-----------------------------------------------------------------*/
 DCL  ADDR         BUILTIN;
 DCL  CSTG         BUILTIN;         /* CURRENT STORAGE              */
 DCL  HIGH         BUILTIN;         /* HEX 'FF...'                  */
 DCL  INDEX        BUILTIN;
 DCL  LENGTH       BUILTIN;
 DCL  LOW          BUILTIN;         /* HEX '00...'                  */
 DCL  MOD          BUILTIN;
 DCL  NULL         BUILTIN;         /* NULL POINTER VALUE           */
 DCL  ONLOC        BUILTIN;         /* NAME OF ENTRY-POINT WITHERROR*/
 DCL  ONSOURCE     BUILTIN;         /* NAME OF ENTRY-POINT WITHERROR*/
 DCL  PLIRETV      BUILTIN;
 DCL  PLIDUMP      BUILTIN;
 DCL  STG          BUILTIN;         /* STORAGE                      */
 DCL  SUBSTR       BUILTIN;
 DCL  VERIFY       BUILTIN;

 /*-----------------------------------------------------------------*/
 /*  FILE DECLARES                                                  */
 /*  NOTE:  SYSPRINT IS THE ONLY FILE THAT PL/I CAN WRITE TO        */
 /*         UNDER CICS.  SYSPRINT OUTPUT IS ASSIGNED TO THE 'CPLI'  */
 /*         TRANSIENT DATA QUEUE.  SYSPRINT NEED NOT BE DECLARED,   */
 /*         BUT IF IT IS, IT SHOULD BE DECLARED AS ...              */
 /*-----------------------------------------------------------------*/

 /* DCL SYSPRINT FILE STREAM PRINT OUTPUT 4/2002 */

 /*-----------------------------------------------------------------*/
 /*  SET RUN-TIME OPTIONS                                           */
 /*-----------------------------------------------------------------*/

 DCL PLIXOPT      CHAR(250)
 INIT('STACK(24K,2K,ANY,FREE),HEAP(2K,2K,ANYWHERE,KEEP),
 MSGFILE(CEEMSG),THREADHEAP(2K,2K,ANY,),LIBSTACK(2K,2K,FREE),
 ANYHEAP(2K,2K,ANY,FREE),BELOWHEAP(4K,2K,FREE),
 TRAP(ON),RPTOPTS(OFF),RPTSTG(OFF)')
                                   STATIC VARYING EXTERNAL;

 %INCLUDE CEEIBMAW;
 %INCLUDE CEEIBMCT;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /*  POINTERS                                                       */
 /*-----------------------------------------------------------------*/
 DCL @COMM         PTR;             /* POINTER TO QSAR AEQCOMM --   */
                                    /* (PASSED FROM CALLING PROGRAM)*/
 DCL @COMM2        PTR INIT(NULL);  /* POINTER TO OUTPUT  AEQCOMM   */
 DCL @CWA          PTR INIT(NULL);  /* POINTER TO CWA               */

 %PAGE;
 DCL 1 AEQCOMM    UNALIGNED BASED(@COMM),/* INPUT RECORD            */
    %INCLUDE AEQCOMM ;;

 %PAGE;
 DCL 1 XCOMM      UNALIGNED,        /* USED IN  BA LOGIC            */
    %INCLUDE AEQCOMM ; ,
    %INCLUDE QBFLAGS ; ;

 %PAGE;
 DCL 1 COMMAREA   UNALIGNED BASED(@COMM2),/* OUTPUT RECORD          */
    %INCLUDE AEQCOMM ; ,
    %INCLUDE QBCOMM ; ;

 %PAGE;
 DCL 1 TEMP_GENL  UNALIGNED, /* USED IN MATCH_TO_PART_TRAILERS      */
    %INCLUDE AEQSGENL; ;

 %PAGE;
 DCL 1 TEMP_PART  UNALIGNED, /* USED IN MATCH_TO_PART_TRAILERS      */
    %INCLUDE AEQSPART; ;

 %PAGE;
 DCL 1 EMPL_SEG  UNALIGNED,  /* USED IN MATCH_TO_PART_TRAILERS      */
    %INCLUDE AE3SNDX; ;

 %PAGE;
 DCL @PRICE        PTR INIT(NULL); /* POINTER TO PRICING STRUCTURE  */
 DCL 1 PRICE      UNALIGNED BASED(@PRICE),
    %INCLUDE QBPRICE ; ;     /* USED IN LINK TO PRICING             */

 %PAGE;
 DCL 1 ERROR_TXT  UNALIGNED,
    %INCLUDE AEQERRT ; ;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /*   COMMON WORK AREA FOR THE QSAR CICS REGION (OPTIONAL-IF NEEDED)*/
 /*-----------------------------------------------------------------*/
 DCL 1 CWA  UNALIGNED BASED(@CWA),
    %INCLUDE CWA ;

 /*-----------------------------------------------------------------*/
 /*   LAYOUT OF SERVICE DEFINITION TABLE DATA                       */
 /*-----------------------------------------------------------------*/
 DCL 1 SDT_REC UNALIGNED,                             /*rcq1882*/
    %INCLUDE QBSDTV ; ;
 
 %page;
 /*-----------------------------------------------------------------*/
 /*   LAYOUT OF STANDARD RATE TABLE DATA           6NSH RQ4527      */
 /*-----------------------------------------------------------------*/

 DCL 1 STANDARD ,
    %INCLUDE QBNRAT ; ;

 
 %PAGE;
 /*-----------------------------------------------------------------*/
 /*   MISCELLANEOUS DECLARES                                        */
 /*-----------------------------------------------------------------*/
 DCL CHAR8              CHAR( 8)     INIT('');
 DCL CMRLEN       FIXED BIN (15)     INIT(0);

 DCL CONID              CHAR( 4)     INIT('') UNALIGNED;
 DCL 1 CONTRACT_OVER                 BASED(ADDR(AEQCOMM.S0ICSS)),
       3 CONTR_PREFIX   CHAR( 3),
       3 CONTR_SUFFIX   PIC '9999',
       3 CONTR_PAD      CHAR( 5);
       
 DCL CURR_PHASE   FIXED BIN (15)    INIT(0);           /*rcq1882*/
 DCL DEC112       FIXED DEC (11,2)   INIT(0);          /* I95217   */
 DCL DIAG_TEXT          CHAR(80)     INIT('');
 DCL EIB_STRING         CHAR(85)     BASED(DFHEIPTR);
 DCL ERR1               CHAR( 9)     INIT('QSR9000: ');
 DCL ERR2               CHAR( 9)     INIT('QSR9002: ');
 DCL DAY_OF_WEEK  FIXED DEC ( 1)     INIT(0);
 DCL GRACE_RULE         CHAR( 2)     INIT('');
 DCL HOLIKEY            CHAR(10)     INIT('');
 DCL I            FIXED BIN (15)     INIT(0);
 DCL J            FIXED BIN (15)     INIT(0);
 DCL K            FIXED BIN (15)     INIT(0);
 DCL LIL_DATE     FIXED BIN (31)     INIT(1);
 DCL MPIPROC            CHAR( 4)     INIT('MPI2');
 DCL P#           FIXED BIN(31)      INIT(0);
 DCL PENDED_PART        CHAR( 1)     INIT('N');
 DCL PH_ARRAY_CNT FIXED BIN (15)     INIT(0);             /*rcq1882*/
 DCL PIC_DATE           PIC '(8)9'   INIT(0);
 DCL PIC_DAYNUM         PIC '9'      INIT(0);
 DCL PIC_HSTRTSAT       PIC '(4)9'   INIT(0);  /* no coverage sat &*/
 DCL PIC_HENDSAT        PIC '(4)9'   INIT(0);  /* sunday           */
 DCL PIC_HSTRTSUN       PIC '(4)9'   INIT(0);
 DCL PIC_HENDSUN        PIC '(4)9'   INIT(0);
 DCL PIC_HSTRTMON       PIC '(4)9'   INIT(0800);
 DCL PIC_HENDMON        PIC '(4)9'   INIT(1700);
 DCL PIC_HSTRTTUE       PIC '(4)9'   INIT(0800);
 DCL PIC_HENDTUE        PIC '(4)9'   INIT(1700);
 DCL PIC_HSTRTWED       PIC '(4)9'   INIT(0800);
 DCL PIC_HENDWED        PIC '(4)9'   INIT(1700);
 DCL PIC_HSTRTTHU       PIC '(4)9'   INIT(0800);
 DCL PIC_HENDTHU        PIC '(4)9'   INIT(1700);
 DCL PIC_HSTRTFRI       PIC '(4)9'   INIT(0800);
 DCL PIC_HENDFRI        PIC '(4)9'   INIT(1700);
 DCL PIC_ICUST          PIC '(7)9'   INIT(0);/* FOR CUSTOMER NUMBER */
 DCL PIC_RESP           PIC '(4)9'   INIT(0);
 DCL PIC_RESP2          PIC '(3)9'   INIT(0);
 DCL PIC_STOP           PIC '99V9'   BASED(ADDR(AEQCOMM.S0QSTOTI));
 DCL PIC_SVCHR          PIC '99V9'   BASED(ADDR(AEQCOMM.S0QSVCHR));
 DCL PIC_TIME           PIC '(6)9'   INIT(0);
 DCL PIC_TRAHR          PIC '99V9'   BASED(ADDR(AEQCOMM.S0QTRAHR));
 DCL PICACT             PIC '(4)9'   INIT(0);
 DCL PICSTOP            PIC '(4)9'   INIT(0);
 DCL PICTEMP            PIC '(4)9'   INIT(0);
 DCL PICTRVL            PIC '(4)9'   INIT(0);

 DCL 1 PIC_TIME_OVER    BASED(ADDR(PIC_TIME)),
       3 PIC_HR         PIC '99',
       3 PIC_MIN        PIC '99',
       3 PIC_SEC        PIC '99';

 DCL PIC3               PIC '(3)9'   INIT(0);
 DCL PIC4               PIC '(4)9'   INIT(0);
 DCL PIC7               PIC '(7)9'   INIT(0);
 DCL PIC9999999         PIC '(7)9'   INIT(0);
 DCL OVRLY_IRDL         CHAR(27)     BASED(ADDR(AEQCOMM.S0UIRDL));
 DCL RECD_LENGTH  FIXED BIN (15)     INIT(0);
 DCL RESPONSE     FIXED BIN (31)     INIT(0);
 DCL RESPONSE2    FIXED BIN (31)     INIT(0);
 DCL SAVE_P#      FIXED BIN (15)     INIT(0);
 DCL SDTKEY             CHAR( 5)     INIT(''); /*rcq1882*/
 DCL SDT_ARRAY_CNT FIXED BIN(15)     INIT(0);  /*rcq1882*/
 DCL SAVE_FBILACTH      CHAR( 1)     INIT('');
 DCL SAVE_FBILTRVH      CHAR( 1)     INIT('');
 DCL SAVE_FBILPART      CHAR( 1)     INIT('');
 DCL SAVE_FBILDIST      CHAR( 1)     INIT('');
 DCL SAVE_FBILEXP       CHAR( 1)     INIT('');
 DCL SAVE_IENTSRC       CHAR( 3)     INIT('');
 DCL TEMP_CTYPE         CHAR(1)      INIT('');   /* RQ4527 6NSH */
 DCL TEMP_DATE          CHAR( 8)     INIT('');
 DCL TEMPBILL_DECISION  CHAR( 1)     INIT('N');
 DCL TEMP_DOC (30)      CHAR( 9);  /*INIT((30)'') */
 DCL TEMP_LILDATE FIXED BIN(31)      INIT(0);

 DCL 1 TEMP_PARTS(30)
       LIKE COMMAREA.QBPARTS;
 /*****************rcq1882 changes start here************************/
 DCL 1 PHASE_ARRAY (16),
    3 CWPHASE      CHAR(1),         /* PHASE OF WARRANTY            */
    3 PHASEDUR     PIC '999' ,      /* PHASE MONTHS                 */
    3 QWARRLEN     PIC '999',       /* WARRANTY TOTAL LENGTH        */
    3 CSDTBILL     CHAR(1),         /* BILLING CODE                 */
    3 CSDTOPTN     CHAR(1),         /* SDF OPTIONS  HDD/TPP         */
    3 TWARSVC      CHAR(3),         /* SHORT WARRANTY DESCRIPTION   */
    3 CBASEWAR     CHAR(4),         /* BASE WARRANTY CODE           */
    3 HSATSTRT     CHAR(4),         /* START TIME - SAT             */
    3 HSATSTOP     CHAR(4),         /* STOP TIME - SAT              */
    3 HSUNSTRT     CHAR(4),         /* START TIME - SUN             */
    3 HSUNSTOP     CHAR(4),         /* STOP TIME - SUN              */
    3 HMONSTRT     CHAR(4),         /* START TIME - MON             */
    3 HMONSTOP     CHAR(4),         /* STOP TIME - MON              */
    3 HTUESTRT     CHAR(4),         /* START TIME - TUES            */
    3 HTUESTOP     CHAR(4),         /* STOP TIME - TUES             */
    3 HWEDSTRT     CHAR(4),         /* START TIME - WED             */
    3 HWEDSTOP     CHAR(4),         /* STOP TIME - WED              */
    3 HTHUSTRT     CHAR(4),         /* START TIME - THURS           */
    3 HTHUSTOP     CHAR(4),         /* STOP TIME - THURS            */
    3 HFRISTRT     CHAR(4),         /* START TIME - FRI             */
    3 HFRISTOP     CHAR(4),         /* STOP TIME - FRI              */
    3 PHASEEXITYR  PIC '9999',      /*                              */
    3 PHASEEXITMO  PIC '99',        /*                              */
    3 PHASEEXITDA  PIC '99';        /*                              */
 DCL @START_STOP      POINTER;
 DCL 1 START_STOP_TIME(7)  BASED(@START_STOP),
       3 START_TIME   PIC'9999',
       3 END_TIME     PIC'9999';
 /*****************rcq1882 changes end here**************************/
 DCL CONTINUE          BIT(1)        INIT('0'B);
 DCL BILL_ONLY_PARTS   BIT(1)        INIT('0'B);  /* RQ4527 6NSH */
 DCL BILL_PARTS_PTP    BIT(1)        INIT('0'B);  /* RQ4527 6NSH */ 
 DCL CANADA            BIT(1)        INIT('0'B);
 DCL FALWAYSBILL       BIT(1)        INIT('0'B);
 DCL FINCDNT           BIT(1)        INIT('0'B); 
 DCL FPARTOFOUTSIDEHRS BIT(1)        INIT('0'B);
 DCL FUNC01            BIT(1)        INIT('0'B);
 DCL FUNC06            BIT(1)        INIT('0'B);
 DCL HRS_PROB          BIT(1)        INIT('0'B);
 DCL PSB_SCHEDULED     BIT(1)        INIT('0'B);
 DCL PDPSI_OFFICE      BIT(1)        INIT('0'B);  /* RQ4527 6NSH */
 DCL SYSTEM_LIMITED    BIT(1)        INIT('0'B);
 DCL TEST_SW           BIT(1)        INIT('0'B);



 %PAGE;
 /*******************************************************************/
 /* ERROR PROCESSING                                                */
 /* ----------------                                                */
 /* IT IS THE PROGRAMMER'S RESPONSIBILITY TO CHECK THE RETURN CODE  */
 /* FROM EACH COMMAND LEVEL CALL, AS APPROPRIATE.                   */
 /*******************************************************************/

 EXEC CICS
      IGNORE CONDITION ERROR;

 /*****************************************************************/
 /*   ON CONVERSION                                               */
 /*****************************************************************/

 ON CONVERSION
   BEGIN;
     ET_DUMPCODE = 'Y';
     ET_TEXT1 = ERR1 || MODULE ||' HAD CONVERSION ERROR '||
                                              AEQCOMM.S0IDOCMN;
     ET_TEXT2 = ERR1 || MODULE ||' ONSOURCE '||ONSOURCE||
                'LOC '||ONLOC;
     SIGNAL ERROR;
   END;

 ON ERROR
   BEGIN;
     ON ERROR SYSTEM;                    /* PREVENT RECURSION ERROR */

     PIC_DATE      = EIBDATE;
     PIC_TIME      = EIBTIME;

     ET_PROGRAM_ID = 'QBBIL1 ';
     ET_EIB        = EIB_STRING;

     WTO_FLAG      = 'Y';
     ET_DUMPCODE   = 'Y';

     ET_TEXT4 = ERR1||MODULE||' ENTRY POINT '||ONLOC|| ' DOC # '||
                  AEQCOMM.S0IDOCMN||' DIBSTAT '||DIBSTAT;

     ET_TEXT5 = ERR1||MODULE||' DATE: '||PIC_DATE||
                     ' TIME: '||PIC_HR||':'||PIC_MIN||
                    ' TRANSID '||EIBTRNID||' TASK NUM '||EIBTASKN;
     IF PSB_SCHEDULED
       THEN EXEC DLI TERMINATE;       /* TERMINATE QBBIL1 PSB      */

     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': ENTRY POINT '||ONLOC|| ' DOC # '||
                      AEQCOMM.S0IDOCMN||' DIBSTAT '||DIBSTAT;
         CALL WRITE_TO_OPER;
         DIAG_TEXT = MODULE||': BEFORE CALL TO AEQERRP';
         CALL WRITE_TO_OPER;
       END;
   
     IF @PRICE ^= NULL
       THEN CALL CICS_FREEMAIN(@PRICE);

     EXEC CICS XCTL PROGRAM('AEQERRP')
                    COMMAREA(ERROR_TXT)
                    RESP(RESPONSE);

     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': AFTER  CALL TO AEQERRP';
         CALL WRITE_TO_OPER;
       END;

     IF RESPONSE ^= DFHRESP(NORMAL)
       THEN DO;                   /* IF ALL ELSE FAILS, ABEND */
         EXEC CICS ABEND
                   ABCODE('BIL1')
                   CANCEL;
       END;
                                      /* RETURN TO CICS ENVIRONMENT */
     EXEC CICS RETURN;
   END;

 %PAGE;
 /*******************************************************************/
 /* MAIN PROCESSING                                                 */
 /*******************************************************************/
 /* GET ADDRESSABILITY TO THE CWA (OPTIONAL - IF NEEDED)            */
 /*-----------------------------------------------------------------*/
 TEMP_DOC(*) = '';
 EXEC CICS ADDRESS                     /* GET ADDR OF CWA           */
      CWA(@CWA)  RESP(RESPONSE);

 IF RESPONSE ^= DFHRESP(NORMAL)     /* IF ABNORMAL RESPONSE THEN    */
   THEN DO;                         /* PASS CONTROL TO ERROR PGM    */
     ET_TEXT1 = ERR2 || MODULE || ' FAILURE TO GET ADDRESS OF CWA';
     SIGNAL ERROR;
   END;

 IF CWA_QSAR_TRACE = YES | CWA_QSAR_TRACE = 'K'
   THEN TEST_SW = '1'B;

 IF TEST_SW
   THEN DO;  
     DIAG_TEXT = MODULE||': ENTERED '||AEQCOMM.S0IDOCMN||' SC = '||
                                   AEQCOMM.S0CSVC; /*RCQ1882 */
       CALL WRITE_TO_OPER;        /* ********** TEST ONLY ********** */
     DIAG_TEXT = MODULE||': QSAR determined start/stop times ';
     CALL WRITE_TO_OPER;
     CALL PRINT_BILLING_FLAGS_HOURS('1');
   END;

 /*-----------------------------------------------------------------*/
 /* CHECK IF COMMAREA HAS DATA ... IF NOT, ERROR                    */
 /*-----------------------------------------------------------------*/

 IF EIBCALEN = 0                    /* IF COMMAREA NOT RECEIVED THEN*/
   THEN DO;                         /* TRANSFER CONTROL TO ERROR PGM*/
     ET_TEXT1 = ERR1 || MODULE || ' NO COMMAREA RECEIVED';
     SIGNAL ERROR;
   END;
 
 /* Remove Area number : RCQ1882
 SELECT ( CWAARNUM );
   WHEN ('18', '19', '20', 'HD', 'HE', 'HF') CANADA = '1'B;
   OTHERWISE;
 END;                           */

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': ICOUNTRY- '||AEQCOMM.ICOUNTRY;
     CALL WRITE_TO_OPER;        /* ********** TEST ONLY ********** */
   END;
 
 IF EIBTRNID = 'QBMN' & AEQCOMM.ICOUNTRY ^= '897'
   THEN DO;
     CANADA = '1'B;  /* this will cause a neverbill condition */
   END;
   
 AEQCOMM.S0IHSDNR = '';             /* FOR TESTING PURPOSES REINIT  */
                                    /* INVOICE DOCUMENT NUMBER      */

 IF AEQCOMM.S0ISRCNS                /* IF SOURCED FROM NSDC         */
   THEN  DO I = 1 TO 4;             /* I98599                       */
     IF AEQCOMM.S0CFUNC(I) = '01'
       THEN FUNC01 = '1'B;
       ELSE;
     IF AEQCOMM.S0CFUNC(I) = '06'
       THEN FUNC06 = '1'B;
       ELSE;
   END;

 /* --------------------------------------------------------------- */
 /* This part of code is added to avoid write the below condition   */
 /* at number of places. Now the flag PDPSI_OFFICE will be checked. */
 /*                                                    RQ4527 6NSH  */
 /* --------------------------------------------------------------- */


   IF (AEQCOMM.CMIBOCE = 'EN1' & AEQCOMM.CIICETER = 'O11') |
      (AEQCOMM.CMIBOCE = 'EN2' & AEQCOMM.CIICETER = 'O22') |
      (AEQCOMM.CMIBOCE = 'EN3' & AEQCOMM.CIICETER = 'O33')
     THEN PDPSI_OFFICE = '1'B;

 /* --------------------------------------------------------------- */
 /* Check the hours to see if there is a need to set the default    */
 /* values.  If Sunday is blank that means that QSAR did not find   */
 /* the hours in one of it's sources. If it is blank then load the  */
 /* default for each day of 08:00 to 17:00 for each day       4nsc  */
 /* --------------------------------------------------------------- */
 /* NOTE: If times are not present then the defaults will be loaded */
 /* 0000-2400 - weekends                                            */
 /* 0800-1700 - weekdays                                            */
 /* --------------------------------------------------------------- */
 IF PART_OF_OUTSIDE_HOURS()
   THEN DO;
     FPARTOFOUTSIDEHRS = '1'B;
     CALL LOAD_START_END_INSIDE_HOURS;
   END;
          /* you get the default hours specified in MISC declares   */
   ELSE DO;
     FPARTOFOUTSIDEHRS = '0'B;
   END;
 /* --------------------------------------------------------------- */
 /*                                                            4NSC */
 /* Have to go to QBPRIC1/PRIC2 to determine inside/outside hours.  */
 /*                                                                 */
 /* This is done so the the billing flags can be checked to         */
 /* determine if there is any reason to bill. If the billing flags  */
 /* are set to an "I" for bill Actual hours and "I" for bill travel */
 /* hours then the inside hours can be check to determine if there  */
 /* are any inside hours to bill. If there are none and there is no */
 /* other reason to bill then the "NOBILL" can be set. The hours    */
 /* are also used to determine if the grace condition comes into    */
 /* play when determining if there is a need to bill.               */
 /* --------------------------------------------------------------- */

 /* --------------------------------------------------------------- */
 /* Service Code is 36 and activity code is 20, and Branch          */
 /* office is a PD/PSI branch office (remote support center bo)     */
 /* and there is no incident fee                              4nsc  */
 /* --------------------------------------------------------------- */
 IF   AEQCOMM.CCOTYPE  <= ''    &
       AEQCOMM.S0CSVC  = '36'  & AEQCOMM.S0CHACT  = '20'   &
       PDPSI_OFFICE                   /* 6NSH 4527 */
   THEN DO;
          /* If machine is under warranty */
     IF AEQCOMM.FWARRNTY
       THEN AEQCOMM.CCOTYPE = 'RWI';
       ELSE AEQCOMM.CCOTYPE = 'RMI';

     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': SET CCOTYPE RWI/RMI, PD/PSI SC 20/36';
         CALL WRITE_TO_OPER;
       END;
   END;

 /* --------------------------------------------------------------- */
 /* do not need to do inside/outside hours calculation if the record*/
 /* is pended.  May have a bad day value '99'                       */
 /* put SC 44 check here because of production abend. 9NSG          */
 /* --------------------------------------------------------------- */
  IF AEQCOMM.CGQHIGSE >= PEND  | 
     CANADA                    | 
     AEQCOMM.S0CSVC = '44'     |
     AEQCOMM.S0CSVC = '55'     |
     AEQCOMM.S0CSVC = '65'  
    THEN DO;
      AEQCOMM.FBILACTH = 'N';
      AEQCOMM.FBILTRVH = 'N';
      AEQCOMM.FBILPART = 'N';
      AEQCOMM.FBILDIST = 'N';
      AEQCOMM.FBILEXP  = 'N';
      /*AEQCOMM.IENTSRC  = 'HSI' */
      SAVE_FBILACTH    = 'N';
      SAVE_FBILTRVH    = 'N';
      SAVE_FBILPART    = 'N';
      SAVE_FBILDIST    = 'N';
      SAVE_FBILEXP     = 'N';

      IF TEST_SW
        THEN DO;
          DIAG_TEXT = MODULE||': RECORD IS PENDED/Canada, '||
                              'NO IN/OUT HRS CALCULATED';
          CALL WRITE_TO_OPER;
        END;
    END;
    ELSE DO;
      SAVE_FBILACTH    = AEQCOMM.FBILACTH;
      SAVE_FBILTRVH    = AEQCOMM.FBILTRVH;
      SAVE_FBILPART    = AEQCOMM.FBILPART;
      SAVE_FBILDIST    = AEQCOMM.FBILDIST;
      SAVE_FBILEXP     = AEQCOMM.FBILEXP;
      SAVE_IENTSRC     = AEQCOMM.IENTSRC;


     /* -----------------------------------------------------------*/
     /* You only have to determine inside/outside hours if your    */
     /* going to determine if a grace condition exist.  But the    */
     /* setup_pricing proc also sets the correct 3 days that       */
     /* need to be passed downstream in the billing segment.       */
     /* ---------------------------------------------------------- */
      /* IF (AEQCOMM.S0QSVCHR ^= '' & AEQCOMM.S0QTRAHR > '000')    */
                                         /* defect HSI_4NSC_053    */
      IF AEQCOMM.S0QSVCHR ^= '' | AEQCOMM.S0QTRAHR ^= ''     
        THEN DO;

          CALL SETUP_PRICING;      /* MOVED HERE FROM CHECK SELECT */
          PRICE.CNONRATE = 'N';    /* Move up from below 4527 6NSH */

     /* -----------------------------------------------------------*/
     /* Determine what kind of incident fee code in the CCOTYPE    */
     /* column. Set the billing flags according to the std rate    */
     /* table. Billing will be done according to the values of the */
     /* billing flag.                                RQ054527 6NSH */
     /* ---------------------------------------------------------- */
         IF AEQCOMM.CCOTYPE  ^= ''    
             & AEQCOMM.CCOTYPE  ^= 'SDT'
            THEN DO;
              CALL FIND_INCIDENT_CODE_CATEGORY; 
          END;                    

          CALL LINK_TO_PRICING;    /*                       4NSC   */

          IF TEST_SW
            THEN DO;
              DIAG_TEXT = MODULE||': PRICE IN HRS = '||PRICE.QINHRS||
                            ' PRICE OUTHRS =  '      ||PRICE.QOUTHRS;
              CALL WRITE_TO_OPER;
              DIAG_TEXT = MODULE||': TOTAL DAYS   = '||PRICE.QTOTDAYS||
                            '  HSTART TIME  ='       ||PRICE.HSTART;
              CALL WRITE_TO_OPER;
              DIAG_TEXT = MODULE||': INSIDE START/END CURR DAY -2 ' ||
                          PRICE(1).START||' - '||PRICE(1).END;
              CALL WRITE_TO_OPER;
              DIAG_TEXT = MODULE||': INSIDE START/END CURR DAY -1 ' ||
                          PRICE(2).START||' - '||PRICE(2).END;
              CALL WRITE_TO_OPER;
              DIAG_TEXT = MODULE||': INSIDE START/END CURR DAY    ' ||
                          PRICE(3).START||' - '||PRICE(3).END;
              CALL WRITE_TO_OPER;
            END;
        END;
        ELSE IF TEST_SW
               THEN DO;
                 DIAG_TEXT = MODULE||': NO HOURS TO SEND TO QBPRIC1';
                 CALL WRITE_TO_OPER;
               END;
    /*  END    7NSM    */

 IF TEST_SW
   THEN DO;
     CALL PRINT_DEBUG_FIELDS;
     DIAG_TEXT = MODULE||': OVRLY_IRDL:'||OVRLY_IRDL;
     CALL WRITE_TO_OPER;
     DIAG_TEXT = MODULE||': S0ISRCNS:'||AEQCOMM.S0ISRCNS ||
                  ' FUNC01:'||FUNC01||'  FUNC06:'||FUNC06;
     CALL WRITE_TO_OPER;
     DIAG_TEXT = MODULE||': ISSC/ADV '||AEQCOMM.FISSCNTR||
                       ' FIBM '||AEQCOMM.FIBM;
     CALL WRITE_TO_OPER;
   END;
 /* -------------------------------------------------------------- */
 /* SDT process is good for certain service codes.  Remove the SDT */
 /* code if not appropriate for that service code.                 */
 /*                                                                */
 /* Note: See AEQRUL2 for similar Code.                            */
 /* -------------------------------------------------------------- */

      SELECT (AEQCOMM.S0CSVC);
        WHEN ('01','08','33') ;
        WHEN ('36')
          DO;
            SELECT (AEQCOMM.S0CHACT);
              WHEN ('24','25') ;
              OTHERWISE  AEQCOMM.GJCSDT = '';
            END;
          END;
        OTHERWISE AEQCOMM.GJCSDT = '';
      END;
    END;

    IF AEQCOMM.GJCSDT ^= ''                             /*rcq1882*/
      THEN CALL CHECK_FOR_SDT;                          /*rcq1882*/


  XCOMM.BILL_DECISION   = '';  /* init here because of possible    */
  XCOMM.PERFORM_PRICING = '';  /* hex values in these fields       */
  XCOMM.SEND_TO_CE      = '';
  XCOMM.HVLC_INDICATOR  = '';
  XCOMM.ORIG_TLR_DOC    = '';
  XCOMM.CAD_MATCH       = '';
  XCOMM.REPRICE         = '';
  XCOMM.AOTHREXP        = 0;
  XCOMM.QTRAVMI         = 0;
  XCOMM.IOL             = '';
  XCOMM.SQBFPAD         = '';

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': BEFORE SELECT ICCAUTH=('||AEQCOMM.ICCAUTH||
                 ')';
     CALL WRITE_TO_OPER;

   END;

 /*----------------------------------------------------------------*/
 /*        Original Credit Card work (ICCAUTH) was SR01007         */
 /*        -----------------------------------------------         */
 /*              Credit Card Reference Number Logic                */
 /*                                                                */
 /* If ICCAUTH not blank and...                                    */
 /*                                                                */
 /*     SC is 01 or 08 then autobill.                              */
 /*                                                                */
 /*     SC is 20 or 36 and...                                      */
 /*        BA Code is blank or 1 or 3 the autobill                 */
 /*        BA Code is 4 then send to RES                           */
 /*                                                                */
 /* (IBM internals are to be NoBill)                               */
 /*                                                                */
 /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
 /* The BA Code will be set to 3 here to auto bill CC ref# records.*/
 /* ICCAUTH exceptions will be handled in QBBIL4.                  */
 /*----------------------------------------------------------------*/

 IF AEQCOMM.ICCAUTH ^= '' &
    (AEQCOMM.S0CSVC  = '01' |  /*----------------------------------*/
     AEQCOMM.S0CSVC  = '08' |  /*   If CC Auth# present and        */
     AEQCOMM.S0CSVC  = '20' |  /*   Svc Code is 01 08 20 or 36.... */
     AEQCOMM.S0CSVC  = '36')   /*----------------------------------*/
   THEN DO;
                                             /*--------------------*/
     AEQCOMM.CEBBILL  = AEQCOMM.S0CBIOSA;    /*  save original BA  */
     AEQCOMM.S0CBIOSA = '3';                 /*  Force to Billable */
                                             /*--------------------*/
     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': BA RESET 1 S0CBIOSA ('||
                AEQCOMM.S0CBIOSA||') CEBBILL('||AEQCOMM.CEBBILL||')';
         CALL WRITE_TO_OPER;
       END;
   END;                                              /* IF ICCAUTH */

 /* --------------------------------------------------------------- */
 /*  GP021333 - 3NSE Do a direct assignment of CSPLCHG              */
 /*  exempt SC 20 and 36, per call service ( not on file or on file */
 /*  and not on warranty), if it not a depot QSAR from incident fee */
 /*  code assignment and not a PD/PSI branch office                 */
 /*  should be per call type of billing                     +4NSC   */
 /*  RQ4649 : QLX will behave as Onsite branch & no longer will be  */
 /*         Depot like SQL/ACR                                      */
 /* put SC 44 check here because of production abend. 9NSG          */
 /*---------------------------------------------------------------- */
       
   IF AEQCOMM.CGQHIGSE >= PEND  |
      CANADA                    |
      AEQCOMM.S0CSVC = '44'     |
      AEQCOMM.S0CSVC = '55'     |
      AEQCOMM.S0CSVC = '65' 
     THEN;
     ELSE IF PRICE.CNONRATE  = 'Y'     /* RQ057017 NON-STD RATE     */
                 |                     
      BILL_ONLY_PARTS                  /* RQ4527 6NSH               */
     THEN;

     ELSE  IF (AEQCOMM.S0CSVC  = '20'  | /*incident fee pcr 010     */
               AEQCOMM.S0CSVC  = '36'  |
               (AEQCOMM.M_MPI  = 'N'   | /*not in inventory         */
               (AEQCOMM.M_MPI  = 'Y' &   /*on inventory as per call */
               (AEQCOMM.GJCSTAT = '30' | 
               AEQCOMM.GJCSTAT  = '33') ) &
                       ^AEQCOMM.FWARRNTY )   )
                                        /* on inventory */
                                        /*  (MPI or DSI)           */
                                        /* as per call and past WED*/
                 &
              ^PDPSI_OFFICE
                 &
             ( AEQCOMM.ISOURCE = '' | AEQCOMM.ISOURCE = 'QLX' )
                                      /* AC 25 REMOTE SUPPORT CENTER*/
                                      /* WILL HANDLE LATER          */
                 &
                    
               ^BILL_ONLY_PARTS

     THEN DO;
       AEQCOMM.CCOTYPE = '';
       TEMP_CTYPE      = '';         /*6NSH 4527  */
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||':  2 BLANK OUT SPECIAL CHARGE';
           CALL WRITE_TO_OPER;
         END;

     END;
 
  /* -------------------------------------------------------------- */
  /* If there is reasons for certain processes to not be included   */
  /* in the outside hours process then set the billing labor flags  */
  /* to "Y".                                         4NSC           */
  /* -------------------------------------------------------------- */
  /*IF NOT_Part_Of_OUTSIDE_HOURS THEN                               */
  /*  DO                                                            */
  /*    AEQCOMM.FBILACTH = 'Y'                                      */
  /*    AEQCOMM.FBILTRVH = 'Y'                                      */
  /*  END                                                           */

  /* -------------------------------------------------------------- */
  /* Note: This select clause check 3 different conditions,         */
  /* "NEVERBILL", "ALWAYSBILL", and "CHECK_SELECT_CONDITIONS".      */
  /* -------------------------------------------------------------- */
  /* Because the first 2 calls are function calls that will return  */
  /* a true if any of the conditions are met. The billing status    */
  /* will be set based on the outcome of the return from these      */
  /* function calls. If the calls to "NEVERBILL", "ALWAYSBILL", do  */
  /* not result in a billing decision then check to see if an       */
  /* exclusion condition exist. If there are no reasons to          */
  /* exclude the record from the billing process then set the       */
  /* billing decision to a blank and let it flow through the        */
  /* process.                                            4NSC       */
  /* -------------------------------------------------------------- */
     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': before NEVERBILL check ';
         CALL WRITE_TO_OPER;
       END;
  SELECT;
    /* ------------------------------------------------------------ */
    /* Note: This  sets the "NOBILL" status for certain conditions. */
    /* ------------------------------------------------------------ */
    /* There are various hard and fast reasons to set the billing   */
    /* decision to "NOBILL". For these conditions no INVOICE will be*/
    /* created and no futher billing processing is needed.   4NSC   */
    /* ------------------------------------------------------------ */
   WHEN (NEVERBILL())
     DO;
       /* CALL ASSIGN_BILL_DECISION(NOBILL,'- xx ','- MAIN') */
       AEQCOMM.FBILACTH = 'N';
       AEQCOMM.FBILTRVH = 'N';
       AEQCOMM.FBILPART = 'N';
       AEQCOMM.FBILDIST = 'N';
       AEQCOMM.FBILEXP  = 'N';
       AEQCOMM.IENTSRC = 'HSI';
     END;

    /* ------------------------------------------------------------ */
    /* Note: This sets the billing decision to "BILL" for certain   */
    /* conditions that would always result in a invoice being       */
    /* created.                                          4NSC       */
    /* ------------------------------------------------------------ */
    WHEN(ALWAYSBILL() ) FALWAYSBILL = '1'B;
      /* CALL ASSIGN_BILL_DECISION(BILL,'- xx ','- MAIN') */

    /* ------------------------------------------------------------ */
    /* Check to see if there is any exclusion condions that would   */
    /* set the Bill decision to no bill.                   4NSC     */
    /* ------------------------------------------------------------ */

    OTHERWISE
      CALL CHECK_SELECT_CONDITIONS;
  END;                                   /* END OF SELECT           */

 %PAGE;
 /*******************************************************************/
 /* At this point 'XCOMM.BILL_DECISION'(Set in ASSIGN_BILL_DECISION */
 /* proc) has been set to one of the following values based on the  */
 /* "Never Bill", "Always Bill" or the "No Bill exculision" logic.  */
 /* --------------------------------------------------------------- */
 /*    BLANK (NO DECISION YET)                                      */
 /*    'X'   (NOT_ELIGIBLE)                                         */
 /*    'P'   (PENDED_REC)                                           */
 /*    'N'   (NOBILL)                                               */
 /*    'B'   (BILL)                                                 */
 /*    'R'   (REVIEW)                                               */
 /*                                                                 */
 /* Now set up other processing based on bill decision at this point*/
 /*******************************************************************/

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': AFTER CHECK_SELECT_CONDITIONS,'||
                 ' BILL DECISION = '||XCOMM.BILL_DECISION|| ' CCOTYPE '
                 ||AEQCOMM.CCOTYPE;
     CALL WRITE_TO_OPER;
     DIAG_TEXT = MODULE||': BILL FLAGS act/trvl/part/trvl/exp '||
                AEQCOMM.FBILACTH||AEQCOMM.FBILTRVH||AEQCOMM.FBILPART||
                AEQCOMM.FBILDIST||AEQCOMM.FBILEXP||' ENT SRC ='||
                AEQCOMM.IENTSRC;
     CALL WRITE_TO_OPER;
   END;

  XCOMM.FWARRNTY = AEQCOMM.FWARRNTY;

 /* --------------------------------------------------------------- */
 /* if there is an incident fee from the call record and the activit*/
 /* is eligible for billing (see neverbill for not_eligible cond)   */
 /* check to see if the incident fee is a valid incident fee and set*/
 /* the billing flags accordingly.  RQ057017                        */
 /* --------------------------------------------------------------- */
  IF AEQCOMM.CCOTYPE ^= '' & 
     XCOMM.BILL_DECISION ^= NOT_ELIGIBLE &
     XCOMM.BILL_DECISION ^= PENDED_REC  
     THEN IF PRICE.CNONRATE ^= 'Y'
            THEN CALL FIND_UPGRADE_RATE;

  IF TEST_SW 
    THEN DO;
     DIAG_TEXT = MODULE||': BIL FLAGS-Aft act/trvl/part/trvl/exp '||
                AEQCOMM.FBILACTH||AEQCOMM.FBILTRVH||AEQCOMM.FBILPART||
                AEQCOMM.FBILDIST||AEQCOMM.FBILEXP||' TEMP_CTYPE ='||
                TEMP_CTYPE;

     CALL WRITE_TO_OPER;
   END;  

  IF  AEQCOMM.FBILACTH    = 'N' &
      AEQCOMM.FBILTRVH    = 'N' &
      AEQCOMM.FBILPART    = 'N' &
      AEQCOMM.FBILDIST    = 'N' &
      AEQCOMM.FBILEXP     = 'N' &
      XCOMM.BILL_DECISION = ''  &
      AEQCOMM.CCOTYPE     = ''  &
     (AEQCOMM.S0CSVC = '01' | AEQCOMM.S0CSVC = '08')
    THEN CALL ASSIGN_BILL_DECISION(NOBILL,'- 77 ','- AFTER UPGDE');

 /* --------------------------------------------------------------- */
 /* if non std rate code is there in the call record and nothing is */
 /* to bill means all the flags 'NNNNN'                             */
 /* Make a decision NOBILL                                          */
 /* --------------------------------------------------------------- */

  /* IF AEQCOMM.CGQHIGSE >= PEND
    THEN CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'pended - 78 ',
                '- AFTER NON_STD')  */
  /* IF AEQCOMM.CGQHIGSE >= PEND | 
     CANADA                   |      commented out 9NSG added
     AEQCOMM.S0CSVC = '44'    |      following check logic  LBS
     AEQCOMM.S0CSVC = '55'    |
     AEQCOMM.S0CSVC = '65'  */
  IF XCOMM.BILL_DECISION = PENDED_REC  |
     XCOMM.BILL_DECISION = NOT_ELIGIBLE
    THEN;
    ELSE IF  PRICE.CNONRATE      = 'Y' &
             AEQCOMM.CCOTYPE    ^= '' 
           THEN DO;  
             IF AEQCOMM.FBILACTH    = 'N' &
                AEQCOMM.FBILTRVH    = 'N' &
                AEQCOMM.FBILPART    = 'N' &
                AEQCOMM.FBILDIST    = 'N' &
                AEQCOMM.FBILEXP     = 'N' &
                XCOMM.BILL_DECISION = ''  
               THEN DO;
                 PRICE.CNONRATE      = 'N';
                 AEQCOMM.CCOTYPE     = '' ;
                 TEMP_CTYPE          = ''; /* 6NSH 4527 */
                CALL ASSIGN_BILL_DECISION(NOBILL,'- 79 ',
                                                 '- AFTER NON-STD');
              END;
          END;
       
   /*  ------------------------------------------------------------- */
   /*  this select checks the bill decision to determine what other  */
   /* processing needs to be done                                   */
   /* ------------------------------------------------------------- */

 SELECT (XCOMM.BILL_DECISION);
   /* ------------------------------------------------------------- */
   /* no more processing needs to be done.                          */
   /* ------------------------------------------------------------- */
   WHEN(NOT_ELIGIBLE,NOBILL,PENDED_REC)
     DO;
       P# = 0;                           /* NO PARTS LINES NEEDED   */
       /* --------------------------------------------------------- */
       /*  P# = AEQCOMM.IPARTCNT                                    */
       /*  Reset the BA code if ICCAUTH is not blank.               */
       /* --------------------------------------------------------- */
       IF AEQCOMM.ICCAUTH ^= '' &
          (AEQCOMM.S0CSVC  = '01' |
           AEQCOMM.S0CSVC  = '08' |
           AEQCOMM.S0CSVC  = '20' |
           AEQCOMM.S0CSVC  = '36')
         THEN DO;
           IF TEST_SW
             THEN DO;
               DIAG_TEXT = MODULE||': BA RESET 2 S0CBIOSA ('||
                           AEQCOMM.S0CBIOSA||
                          ') CEBBILL('||     AEQCOMM.CEBBILL||')';
               CALL WRITE_TO_OPER;
             END;

           AEQCOMM.S0CBIOSA = AEQCOMM.CEBBILL;
           AEQCOMM.CEBBILL  = '';
         END;
       CALL CREATE_COMMAREA;  /* create the output record           */
       COMMAREA.BILL_DECISION = XCOMM.BILL_DECISION;
     END;
   /* ------------------------------------------------------------- */
   /* Check for other conditions.                                   */
   /* ------------------------------------------------------------- */
   OTHERWISE
     DO;
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': SELECT OTHER ';
           CALL WRITE_TO_OPER;
         END;

        DCL PSBNAME CHAR(8) INIT('QBBIL1');
        EXEC DLI SCHEDULE PSB((PSBNAME)) NODHABEND;
        PSB_SCHEDULED = '1'B;

       SELECT;
    /*-------------------------------------------------------------*/
    /* GP0619035151 - Add IBILLSTAT = 'L' check.         Sept.2003 */
    /*-------------------------------------------------------------*/
    /* Commented out SC 94, is not valid not            RQ4527 6NSH*/
    /*-------------------------------------------------------------*/
    /*    WHEN (AEQCOMM.S0CSVC   = '94')           SERVICE CODE 94 */
    /*      DO;                                                    */
    /*        P# = 0;                                              */
    /*        AEQCOMM.FBILPART = 'N';     NO PART TO BILL SET FLAG */
    /*      END;                                                   */
    /*-------------------------------------------------------------*/

         WHEN (AEQCOMM.IBILLSTAT = 'L')
           DO;
             P# = 0;
             AEQCOMM.FBILPART = 'N';
           END;
           
 /* ----------------------------------------------------------------- */
 /* 4NSC - pcr011 added base warranty value is blank                  */
 /* ----------------------------------------------------------------- */
         WHEN (AEQCOMM.GJCSDT   ^= '' &
               AEQCOMM.CBASEWAR  = '' )            /* SDT             */
           DO;
             P# = 0;
             AEQCOMM.FBILPART = 'N';
           END;
           
         WHEN (AEQCOMM.CCOTYPE  ^= ''  & AEQCOMM.FINCDPRT = 'N' &
               PRICE.CNONRATE   ^= 'Y' &     /* RQ057017  */
               ^BILL_ONLY_PARTS        &     /* RQ4527 P & T & B  */  
               TEMP_CTYPE       ^= 'B')     
           DO;
             P# = 0;
             AEQCOMM.FBILPART = 'N';
           END;
         OTHERWISE CALL DO_PARTS;
       END;

       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': NUMBER OF PARTS = '|| P#;
           CALL WRITE_TO_OPER;
         END;
         
    /* ------------------------------------------------------------ */
    /* Check added for ManageNow Prob# 24556667 where a record had  */
    /* nothing to bill except a part.  The part was S0CFUNC 01,     */
    /* which is not billable. Because of the part, the NoBillActual */
    /* NoBillTravel NoBillPart NoBillDistance NoBillExpenses check  */
    /* in NEVERBILL did not consider this a NO BILL situation.      */
    /*                                                  7-7-2005 RY */
    /* ------------------------------------------------------------ */
       IF (NOBILLACTUAL()   & NOBILLTRAVEL()   & P# = 0 &
          NOBILLDISTANCE() & NOBILLEXPENSES() & AEQCOMM.CCOTYPE = '' &
            (AEQCOMM.S0CSVC = '01' | AEQCOMM.S0CSVC = '08')) 
         THEN DO;
           CALL ASSIGN_BILL_DECISION(NOBILL,
                                   'NOTHING TO BILL- 79 ','- MAIN');
         END;

    /*--------------------------------------------------------------*/
    /* When parts only code is present but the part is with a S0FUNC*/
    /* other than 02 or 21, then there is nothing to bill. NOBILL   */
    /* should be assigned                                           */
    /* -------------------------------------------------------------*/

       IF BILL_ONLY_PARTS & P# =0
          THEN DO;
             CALL ASSIGN_BILL_DECISION(NOBILL,
                                   'NOTHING TO BILL- 80 ','- MAIN');
         END;


       CALL CREATE_COMMAREA;            /* create the output record */

       EXEC DLI TERMINATE;              /* TERMINATE QBBIL1 PSB     */

       CALL HVLC_LOGIC;                 /* (NEED FOR DECISION LOGIC)*/

       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': AFTER HVLC_LOGIC,'||
                       ' BILL DECISION = '||XCOMM.BILL_DECISION||
                       ' CSPLCHG ('|| COMMAREA.QBBILL.CSPLCHG||')';
           CALL WRITE_TO_OPER;
         END;

       /*-----------------------------------------------------------*/
       /* Don't need to go to Check billing logic for SC 36  4NSC   */
       /*-----------------------------------------------------------*/
       /*? IF ^(AEQCOMM.S0CSVC  = '36' & AEQCOMM.FONSITE = 'N')THEN?*/
       /*-----------------------------------------------------------*/

       IF FALWAYSBILL
         THEN DO;
           COMMAREA.PERFORM_PRICING = YES;  /* HSI_4NSC_00X         */
           COMMAREA.SEND_TO_CE      = HSI;
           COMMAREA.CCONTROL        = 'QB';
           COMMAREA.QBBILL.IENTSRC  = 'HSI';
         END;
         ELSE CALL BA_LOGIC;             /* SETS 'BILL_DECISION'    */

       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': AFTER BA_LOGIC,'||
                       ' BILL DECISION = '||XCOMM.BILL_DECISION||
                       ' CSPLCHG ('|| COMMAREA.QBBILL.CSPLCHG||')';
           CALL WRITE_TO_OPER;
         END;

       CALL CHECK_REVIEW_CONDITIONS;    /* MAY SET 'BILL_DECISION'  */
     END; /* end of otherwise */
 END;     /* end of select    */

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': AFTER CHECK_REVIEW_CONDITION, '||
                 ' BILL_DECISION = '|| XCOMM.BILL_DECISION ||
                 ' CSPLCHG ('|| COMMAREA.QBBILL.CSPLCHG||')';
     CALL WRITE_TO_OPER;
   END;

 COMMAREA.BILL_DECISION = XCOMM.BILL_DECISION; /* 3NSE              */

 SELECT_BILL_DECISION:                         /* label             */
 SELECT (COMMAREA.BILL_DECISION);
   WHEN(BILL,REVIEW)
     DO;
       CALL INIT_BILL_DATA;

       IF PENDED_PART = NO          /* I94786                       */
         THEN COMMAREA.BILL_S = NO; /*SHOW BILLING SEGMENTS NOT SENT*/
         ELSE COMMAREA.BILL_S = YES;/* DON'T OFFLOAD BILLING SEGS   */
                                    /* UNTIL CLEAN UP PEND PROB     */
         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': SEND_TO_CE= '||COMMAREA.SEND_TO_CE;
             CALL WRITE_TO_OPER;
             DIAG_TEXT = MODULE||': HVLC_INDICATOR= ' ||
                                         COMMAREA.HVLC_INDICATOR;
             CALL WRITE_TO_OPER;
             DIAG_TEXT = MODULE||': CCONTROL= '  ||
                     COMMAREA.QBBILL.CCONTROL ||' CSPLCHG ('||
                     COMMAREA.QBBILL.CSPLCHG||')';
             CALL WRITE_TO_OPER;
             DIAG_TEXT = MODULE||': CBILLERR= '  ||
                                COMMAREA.QBBILL.CBILLERR||
                               ' FSPWN08 = ' || COMMAREA.FSPWN08;
             CALL WRITE_TO_OPER;
             DIAG_TEXT = MODULE||': ABOUT TO LINK TO QBBIL2,'||
                         ' BILL DECISION = '||XCOMM.BILL_DECISION;
             CALL WRITE_TO_OPER;
           END;

 /*-------------------------------------------------------*/
 /*    Remove SC 08 SPAWNED logic.    (August 2002 - REY) */
 /*- - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
 /*    IF COMMAREA.S0CSVC = '01' & COMMAREA.FSPWN08       */
 /*      THEN CALL RETRIEVE_SPAWNED_SC08                  */
 /*-------------------------------------------------------*/
       IF @PRICE ^= NULL
		THEN CALL CICS_FREEMAIN(@PRICE);
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': BILLING FLAGS ' ||
                               'ACT/TRVL/PARTS/DIST/EXP '||
              COMMAREA.FBILACTH||' '|| COMMAREA.FBILTRVH||' '||
              COMMAREA.FBILPART||' '|| COMMAREA.FBILDIST||' '||
              COMMAREA.FBILEXP ;
            CALL WRITE_TO_OPER;
          END;

       EXEC CICS XCTL PROGRAM('QBBIL2')
                      COMMAREA(COMMAREA)
                      RESP(RESPONSE);

       IF RESPONSE ^= DFHRESP(NORMAL)  /* IF ABNORMAL RESPONSE THEN */
         THEN DO;                      /* PASS CONTROL TO ERROR PGM */
           ET_TEXT1 = ERR2 || MODULE || ' FAILURE ON XCTL TO QBBIL2';
           SIGNAL ERROR;
         END;
     END;

   OTHERWISE
     DO;
       COMMAREA.BILL_S = YES;      /* INDICATE "NO BILLING SEGMENTS"*/

       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': MISCELL PAD '||
                                  COMMAREA.UMISCELL.SPAD01;
           CALL WRITE_TO_OPER;
	       DIAG_TEXT = MODULE||': TRANID - '||EIBTRNID;
           CALL WRITE_TO_OPER;
         END;

     /*--------------------------------------------------------------*/
     /*CALL TO QBDBU3 OR AEQDBU3 BASED ON LAST TRAN ID INCASE NOTHING*/
     /* TO BILL FOR SERVICE RECORD RECEIVED FROM CROSS OR QSAR       */
     /*                                                     2010_0NSE*/
     /*--------------------------------------------------------------*/

     IF EIBTRNID = 'QBMN'
       THEN DO;
        DCL COMMLENGTH   PIC'(9)9'  INIT(0);
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': XCTL TO QBDBU3. TRANID: '||EIBTRNID;
            CALL WRITE_TO_OPER;
          END;
        COMMLENGTH = CSTG(COMMAREA);
		
		IF TEST_SW
          THEN DO;
			DIAG_TEXT = MODULE||': COMM LENGTH '||COMMLENGTH;
			CALL WRITE_TO_OPER;
		  END;
		  
        EXEC CICS XCTL PROGRAM('QBDBU3')
                       COMMAREA(COMMAREA)
                       RESP(RESPONSE);

        IF RESPONSE ^= DFHRESP(NORMAL)
        THEN DO;                      
           PIC9999999  = CSTG(COMMAREA);
           PIC_RESP = RESPONSE;
           ET_TEXT1 = ERR2 || MODULE||' FAILURE ON XCTL TO QBDBU3 '||
                        PIC_RESP ||' '||PIC9999999;
           SIGNAL ERROR;
         END;
        

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': AFTER LINK TO QBDBU3';
             CALL WRITE_TO_OPER;
           END;
      END;

     ELSE DO;          

        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': XCTL TO AEQDBU3. TRANID: '||
                                EIBTRNID;
            CALL WRITE_TO_OPER;
          END;

       EXEC CICS XCTL PROGRAM('AEQDBU3')
                      COMMAREA(COMMAREA)
                      RESP(RESPONSE);

        IF RESPONSE ^= DFHRESP(NORMAL) 
         THEN DO;                      
           PIC9999999  = CSTG(COMMAREA);
           PIC_RESP = RESPONSE;
           ET_TEXT1 = ERR2 || MODULE||' FAILURE ON XCTL TO AEQDBU3 '||
                        PIC_RESP ||' '||PIC9999999;
           SIGNAL ERROR;
         END;

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': AFTER LINK TO AEQDBU3';
             CALL WRITE_TO_OPER;
           END;
       END;
       
     
      CALL LEAVE_QBBIL1;

     END;

 END SELECT_BILL_DECISION;

 /* --------------------------------------------------------------- */
 /* End of program                                                  */
 /* --------------------------------------------------------------- */

 %PAGE;
 /*******************rcq1882 changes start here**********************/
 /*******************************************************************/
 /*******************************************************************/
 CHECK_FOR_SDT: PROC REORDER;
  DCL FB31LILDAY   FIXED BIN(31);
  CALL READ_SDT_FILE;
                                                                     
  IF AEQCOMM.GJCSDT ^= ''                                            
    THEN DO;                                                         
      IF TEST_SW                                                     
        THEN DO;                                                     
          DIAG_TEXT = MODULE||': IN SDT NOT BLANK';
           CALL WRITE_TO_OPER;                                       
        END;                                                         
                                                                     
      DCL LIL_WAREX         FIXED DEC(7,0);                          
      DCL DCALC             CHAR(8);
      DCL GRG_WAREX         CHAR(8);
      DCL GRG_DCALC         PIC'(8)9' BASED(ADDR(DCALC));             
      DCL LIL_COMPDATE      FIXED DEC(7,0);                           
      /* ---------------------------------------------------------- */
      /* CHECK THE WARRANTY DATE TO SEE IF A DATE IS PRESENT        */
      /* IF ONE IS PRESENT THEN ASSIGN IT ELSE SET TO DEFAULT DATE  */
      /* ---------------------------------------------------------- */
      IF AEQCOMM.GJDWAREX = ''                                        
        THEN DCALC = '19000101';        /* DEFAULT DATE             */
        ELSE DCALC = AEQCOMM.GJDWAREX;  /* PIC(8)9  <- CHAR(8)      */

      /* ---------------------------------------------------------- */
      /* GET THE LILIAN FORM OF THE WARRENTY EXPIRATION DATE        */
      /* ---------------------------------------------------------- */
       LIL_WAREX = GREGORIAN_TO_LILIAN(DCALC,'1');
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': CAD REC DATE '||AEQCOMM.DRECCALL||
                  ' QSAR ACTIVITY DATE '||AEQCOMM.S0DCALCY||
                                          AEQCOMM.S0DCALCM||
                                          AEQCOMM.S0DCALCD;
            CALL WRITE_TO_OPER;
         END;
       
       IF AEQCOMM.DRECCALL ^= ''  &  /* Use the call receive date  */
          AEQCOMM.DRECCALL ^= '99991231'
         THEN DCALC = AEQCOMM.DRECCALL;
         ELSE DO;
         DCALC = AEQCOMM.S0DCALCY||        /* QSAR ACTIVITY DATE    */
                 AEQCOMM.S0DCALCM||
                 AEQCOMM.S0DCALCD;         /* POSSIBLE '99'         */
 
       /* ----------------------------------------------------------*/
       /* ASSIGN THE CALL COMPLETE DATE (convert to positive (*-1)  */
       /* GET THE LILIAN FORM OF THE CALL COMPLETION DATE           */
       /* ----------------------------------------------------------*/
         END;
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': GREG DATE '||DCALC;
            CALL WRITE_TO_OPER;
         END;
       LIL_COMPDATE = GREGORIAN_TO_LILIAN(DCALC,'2');

       FB31LILDAY = LIL_COMPDATE;
       
       /* Changed GET_DAYNUM to GET_SDT_DAYNUM  RCQXX */

       DAY_OF_WEEK = GET_SDT_DAYNUM(FB31LILDAY,'1');/*GET DAY OFWEEK*/

       IF TEST_SW
        THEN DO;
          DIAG_TEXT = MODULE||': DAY OF WEEK '||DAY_OF_WEEK;
          CALL WRITE_TO_OPER;
        END;

       IF LIL_COMPDATE > LIL_WAREX        /* IF PAST WARRANTY EXIT  */
        THEN DO;
          IF TEST_SW
            THEN DO;
             DIAG_TEXT = MODULE||
                     ': compdate > warex date for svc plan ('||
                      AEQCOMM.GJCSDT||') BLANK OUT GJCSDT';
             CALL WRITE_TO_OPER;
           END;

          AEQCOMM.GJCSDT = '';
        END;
        ELSE DO;
         IF PH_ARRAY_CNT > 1
           THEN DO;
           LIL_DATE = LIL_WAREX;
           GRG_WAREX   = LILIAN_TO_GREGORIAN(LIL_DATE,'2');

           PHASE_ARRAY(PH_ARRAY_CNT).PHASEEXITYR= SUBSTR(GRG_WAREX,1,4);
           PHASE_ARRAY(PH_ARRAY_CNT).PHASEEXITMO= SUBSTR(GRG_WAREX,5,2);
           PHASE_ARRAY(PH_ARRAY_CNT).PHASEEXITDA= SUBSTR(GRG_WAREX,7,2);

           CALL CALCULATE_PHASE_EXITS;
           CALL CALCULATE_WARR_PHASE;
         END;
         ELSE DO;
            CURR_PHASE = 1;
            PH_ARRAY_CNT = 1;
         END;
            @START_STOP = ADDR(AEQCOMM.HSTRTSAT);
            AEQCOMM.FWAR24X7 = WARR_24X7();
       END;
      END;

 END   CHECK_FOR_SDT;

 %PAGE;
 /*******************************************************************/
 /*******************************************************************/
 READ_SDT_FILE: PROC;

  SDTKEY = AEQCOMM.GJCSDT||' '||'1';

    IF TEST_SW
    THEN DO;
      DIAG_TEXT =MODULE||': READ SDT KEY '||AEQCOMM.GJCSDT||' '||'1';
      CALL WRITE_TO_OPER;
    END;

  EXEC CICS STARTBR FILE('QBSDT')
                    RIDFLD(SDTKEY)
                    KEYLENGTH(5)
                    RESP(RESPONSE)
                    RESP2(RESPONSE2)
                    EQUAL;


  SELECT(RESPONSE);
    WHEN (DFHRESP(NORMAL))
      DO;
       CALL FIND_SDT_RECORD;
       EXEC CICS ENDBR FILE('QBSDT')
                       RESP(RESPONSE);

      END;

    WHEN (DFHRESP(DSIDERR))             /* FILE NOT FOUND           */
      DO;
        ET_TEXT1 = ERR1||MODULE||' FILE NOT FOUND (QBSDT)';
        SIGNAL ERROR;
      END;
    WHEN (DFHRESP(NOTFND))              /* KEY NOT FOUND            */
      DO;
          IF TEST_SW
           THEN DO;
              DIAG_TEXT = MODULE||': KEY (' || SDTKEY ||
                   ') NOT FOUND ON SDT FILE (QBSDT) BLANK OUT GJCSDT';
             CALL WRITE_TO_OPER;
           END;

         AEQCOMM.GJCSDT = '';
      END;
    OTHERWISE                           /* OTHER VSAM ERROR         */
      DO;
         ET_TEXT1 = ERR1||MODULE||'  ERROR ON STARTBR OF ' ||
                    'SDT FILE (QBSDT)';
         PIC_RESP  = RESPONSE;
         PIC_RESP2 = RESPONSE2;
         ET_TEXT2 = ERR1||MODULE||'  KEY=' || SDTKEY    ||' RESP= '||
                                   PIC_RESP||' RESP2 = '||PIC_RESP2;
        SIGNAL ERROR;
        END;
   END;   /* END SELECT */

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': END OF READ_SDT_FILE';
       CALL WRITE_TO_OPER;
     END;

 END READ_SDT_FILE;

 %PAGE;
 /*******************************************************************/
 /*******************************************************************/
 FIND_SDT_RECORD: PROC;

  IF TEST_SW
    THEN DO;
      DIAG_TEXT = MODULE||': BUILD_PHASE_ARRAY '||SDTKEY;
      CALL WRITE_TO_OPER;
    END;

  RECD_LENGTH = CSTG(SDT_REC);
  EXEC CICS READNEXT FILE('QBSDT')
                     RIDFLD(SDTKEY)
                     INTO (SDT_REC)
                     LENGTH(RECD_LENGTH)
                     RESP(RESPONSE)
                     RESP2(RESPONSE2);

  PH_ARRAY_CNT = 0;
   CONTINUE = '1'B;

  DO WHILE (CONTINUE & RESPONSE ^= DFHRESP(ENDFILE));
    SELECT(RESPONSE);
      WHEN (DFHRESP(NORMAL))            /* ASSIGN DATA TO SDT ARRAY */
        DO;
          IF SDT_REC.ISDT = AEQCOMM.GJCSDT
            THEN DO;
              PH_ARRAY_CNT = PH_ARRAY_CNT + 1;
              IF TEST_SW
                THEN DO;
                  DIAG_TEXT = MODULE||': SDT ARRAY '||PH_ARRAY_CNT||
                              ' '||SDT_REC.CSDTBILL||
                              ' hard disk '||SDT_REC.CSDTOPTN;
                  CALL WRITE_TO_OPER;
                  DIAG_TEXT = MODULE||': SDT rec '||
                             SDT_REC.HMONSTRT||' '||SDT_REC.HMONSTOP||
                             SDT_REC.HTUESTRT||' '||SDT_REC.HTUESTOP||
                             SDT_REC.HWEDSTRT||' '||SDT_REC.HWEDSTOP||
                             SDT_REC.HTHUSTRT||' '||SDT_REC.HTHUSTOP||
                             SDT_REC.HFRISTRT||' '||SDT_REC.HFRISTOP||
                             SDT_REC.HSATSTRT||' '||SDT_REC.HSATSTOP||
                             SDT_REC.HSUNSTRT||' '||SDT_REC.HSUNSTOP;
                  CALL WRITE_TO_OPER;                               
                END;                                                
                                                                    
              PHASE_ARRAY(PH_ARRAY_CNT).CWPHASE  = SDT_REC.CWPHASE; 
              PHASE_ARRAY(PH_ARRAY_CNT).QWARRLEN = SDT_REC.QWMONTHS;
              PHASE_ARRAY(PH_ARRAY_CNT).PHASEDUR = SDT_REC.QWARDUR;
              PHASE_ARRAY(PH_ARRAY_CNT).CSDTBILL = SDT_REC.CSDTBILL;
        /*    PHASE_ARRAY(PH_ARRAY_CNT).TWARSVC  = SDT_REC.TWARSVC;*/
              PHASE_ARRAY(PH_ARRAY_CNT).HSATSTRT = SDT_REC.HSATSTRT; 
              PHASE_ARRAY(PH_ARRAY_CNT).HSATSTOP = SDT_REC.HSATSTOP; 
              PHASE_ARRAY(PH_ARRAY_CNT).HSUNSTRT = SDT_REC.HSUNSTRT; 
              PHASE_ARRAY(PH_ARRAY_CNT).HSUNSTOP = SDT_REC.HSUNSTOP; 
              PHASE_ARRAY(PH_ARRAY_CNT).HMONSTRT = SDT_REC.HMONSTRT; 
              PHASE_ARRAY(PH_ARRAY_CNT).HMONSTOP = SDT_REC.HMONSTOP; 
              PHASE_ARRAY(PH_ARRAY_CNT).HTUESTRT = SDT_REC.HTUESTRT; 
              PHASE_ARRAY(PH_ARRAY_CNT).HTUESTOP = SDT_REC.HTUESTOP; 
              PHASE_ARRAY(PH_ARRAY_CNT).HWEDSTRT = SDT_REC.HWEDSTRT; 
              PHASE_ARRAY(PH_ARRAY_CNT).HWEDSTOP = SDT_REC.HWEDSTOP; 
              PHASE_ARRAY(PH_ARRAY_CNT).HTHUSTRT = SDT_REC.HTHUSTRT; 
              PHASE_ARRAY(PH_ARRAY_CNT).HTHUSTOP = SDT_REC.HTHUSTOP; 
              PHASE_ARRAY(PH_ARRAY_CNT).HFRISTRT = SDT_REC.HFRISTRT; 
              PHASE_ARRAY(PH_ARRAY_CNT).HFRISTOP = SDT_REC.HFRISTOP; 
              PHASE_ARRAY(PH_ARRAY_CNT).CBASEWAR = SDT_REC.CBASEWAR;
              PHASE_ARRAY(PH_ARRAY_CNT).CSDTOPTN = SDT_REC.CSDTOPTN;
              IF TEST_SW
                 THEN DO;
                   DIAG_TEXT = MODULE||': SDT ARRAY '||PH_ARRAY_CNT;
                   CALL WRITE_TO_OPER;   
                   DIAG_TEXT = MODULE||': MON '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HMONSTRT||' '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HMONSTOP;
                   CALL WRITE_TO_OPER;  
                   DIAG_TEXT = MODULE||': TUE '|| 
                      PHASE_ARRAY(PH_ARRAY_CNT).HTUESTRT||' '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HTUESTOP;
                   CALL WRITE_TO_OPER;  
                   DIAG_TEXT = MODULE||': WED '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HWEDSTRT||' '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HWEDSTOP;
                   CALL WRITE_TO_OPER;  
                   DIAG_TEXT = MODULE||': THU '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HTHUSTRT||' '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HTHUSTOP;
                   CALL WRITE_TO_OPER;  
                   DIAG_TEXT = MODULE||': FRI '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HFRISTRT||' '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HFRISTOP;
                   CALL WRITE_TO_OPER;                         
                   DIAG_TEXT = MODULE||': SAT '|| 
                      PHASE_ARRAY(PH_ARRAY_CNT).HSATSTRT||' '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HSATSTOP;
                   CALL WRITE_TO_OPER;  
                   DIAG_TEXT = MODULE||': SUN '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HSUNSTRT||' '||
                      PHASE_ARRAY(PH_ARRAY_CNT).HSUNSTOP;
                   CALL WRITE_TO_OPER;
                END;
             END;
            ELSE CONTINUE = '0'B;                                     
        END;                                                          
      WHEN (DFHRESP(NOTFND))           /* KEY NOT FOUND */            
        DO;                            /* PASS CONTROL TO ERROR PGM */
           DIAG_TEXT = MODULE||': UPGRADE RATE KEY NOT FOUND ' ||
                      'ON QBSTDRAT';
           CALL WRITE_TO_OPER;                                               
           PIC_RESP  = RESPONSE;
           PIC_RESP2 = RESPONSE2;
           DIAG_TEXT = MODULE||': KEY=' || SDTKEY||' RESP= '||
                        PIC_RESP||' RESP2= '||PIC_RESP2;
           CALL WRITE_TO_OPER;                                                 
           CONTINUE = '0'B;
        END;
      OTHERWISE                   /* ALL OTHER ERRORS */              
        DO;                       /* PASS CONTROL TO ERROR PGM */     
          ET_TEXT1 = ERR1||MODULE||' ERROR ON READNEXT OF ' ||
                      'SDT FILE (QBSDT)';
           PIC_RESP  = RESPONSE;
           PIC_RESP2 = RESPONSE2;
           ET_TEXT2 = ERR1||MODULE||' KEY=' || SDTKEY||' RESP '||
                      PIC_RESP||' RESP2 '||PIC_RESP2;
           SIGNAL ERROR;
           CONTINUE = '0'B;
        END;                                                         
    END;  /* END SELECT */                                           
                                                                     
    IF CONTINUE                                                      
      THEN DO;                                                       
        EXEC CICS IGNORE CONDITION ENDFILE;
        EXEC CICS READNEXT FILE('QBSDT')                             
                           RIDFLD(SDTKEY)                            
                           INTO (SDT_REC)                            
                           LENGTH(RECD_LENGTH)                       
                           RESP(RESPONSE)                            
                           RESP2(RESPONSE2);                         
      END;                                                           
                                                                     
  END;                                /*   END OF DO               */
                                                                     
 END FIND_SDT_RECORD;

 %PAGE;
 /*******************************************************************/
 /*******************************************************************/
 CALCULATE_PHASE_EXITS: PROC;
  IF TEST_SW                                                          
    THEN DO;                                                          
    DIAG_TEXT = MODULE||': CALCULATE PHASE EXITS';
      CALL WRITE_TO_OPER;                                             
    END;                                                              
                                                                      
  DCL PHASEYEARS    FIXED BIN(15)  INIT(0);
  DCL PHASE_REM     FIXED BIN(15)  INIT(0);
                                                                      
  IF TEST_SW                                                          
    THEN DO;                                                          
      DIAG_TEXT = MODULE||': IN CALCULATE PHASE EXITS';
        CALL WRITE_TO_OPER;
    END;                                                       
                                                               
  DO I = PH_ARRAY_CNT TO 2 BY -1;                              
     PHASEEXITDA(I-1)   = PHASEEXITDA(I);                      
                                                               
     PHASEYEARS = PHASEDUR(I)/12;                              
     PHASE_REM  = MOD(PHASEDUR(I),12);                         
                                                               
     IF PHASE_REM > 0                                          
       THEN PHASEYEARS = PHASEYEARS + 1;                       
                                                               
     PHASEEXITYR(I-1) = PHASEEXITYR(I) - PHASEYEARS;           
     PHASEEXITMO(I-1) =                                        
                PHASEEXITMO(I) + 12 * PHASEYEARS - PHASEDUR(I);
                                                               
     IF PHASEEXITMO(I-1) > 12                                  
       THEN DO;                                                
         PHASEEXITMO(I-1) = PHASEEXITMO(I-1) - 12;
          PHASEEXITYR(I-1) = PHASEEXITYR(I-1) + 1;
       END;                                                           
   END;

 END CALCULATE_PHASE_EXITS;

 %PAGE;
 /*******************************************************************/
 /*******************************************************************/
 CALCULATE_WARR_PHASE: PROC;
  IF TEST_SW                                                         
    THEN DO;                                                         
      DIAG_TEXT = MODULE||': CALCULATE WARR EXITS';
      CALL WRITE_TO_OPER;                                            
    END;                                                             
                                                                     
  CONTINUE = '1'B;                                                   
  DO I = 1 TO PH_ARRAY_CNT WHILE(CONTINUE);                          
                                                                     
    IF TEST_SW                                                       
      THEN DO;                                                       
        DIAG_TEXT=MODULE||': '||AEQCOMM.S0DCALCY||AEQCOMM.S0DCALCM||
              AEQCOMM.S0DCALCD||' '||PHASE_ARRAY(I).PHASEEXITYR||
         PHASE_ARRAY(I).PHASEEXITMO||PHASE_ARRAY(I).PHASEEXITDA||' '||
         PHASE_ARRAY(I).CSDTBILL;
        CALL WRITE_TO_OPER;                                          
      END;                                                           

    IF AEQCOMM.S0DCALCY||AEQCOMM.S0DCALCM||AEQCOMM.S0DCALCD <=  
       PHASE_ARRAY(I).PHASEEXITYR||                             
       PHASE_ARRAY(I).PHASEEXITMO||                             
       PHASE_ARRAY(I).PHASEEXITDA                               
      THEN DO;                                                  
         CURR_PHASE = I;                                        
         AEQCOMM.CBASEWAR = PHASE_ARRAY(I).CBASEWAR;
           CONTINUE = '0';
       END;                                                            
   END;                                                                
                                                                       
 END CALCULATE_WARR_PHASE;
                                                                       
 /*****************rcq1882 changes end here**************************/
 %PAGE;
 LOAD_START_END_INSIDE_HOURS:  PROC;
 /*******************************************************************/
 /* LOAD VALUES FOR THE START AND STOP TIMES                  4NSC  */
 /* IF IT IS PART OF OUTSIDE HOURS                                  */
 /*******************************************************************/
  IF AEQCOMM.HSTRTSUN ^= ''
    THEN DO;
       PIC_HSTRTSUN = AEQCOMM.HSTRTSUN;  /* START Sunday            */
       PIC_HENDSUN  = AEQCOMM.HENDSUN;   /* END   Sunday            */
       PIC_HSTRTMON = AEQCOMM.HSTRTMON;  /* START Monday            */
       PIC_HENDMON  = AEQCOMM.HENDMON;   /* END   Monday            */
       PIC_HSTRTTUE = AEQCOMM.HSTRTTUE;  /* START Tuesday           */
       PIC_HENDTUE  = AEQCOMM.HENDTUE;   /* END   Tuesday           */
       PIC_HSTRTWED = AEQCOMM.HSTRTWED;  /* START Wednesday         */
       PIC_HENDWED  = AEQCOMM.HENDWED;   /* END   Wednesday         */
       PIC_HSTRTTHU = AEQCOMM.HSTRTTHU;  /* START Thursday          */
       PIC_HENDTHU  = AEQCOMM.HENDTHU;   /* END   Thursday          */
       PIC_HSTRTFRI = AEQCOMM.HSTRTFRI;  /* START Friday            */
       PIC_HENDFRI  = AEQCOMM.HENDFRI;   /* END   Friday            */
       PIC_HSTRTSAT = AEQCOMM.HSTRTSAT;  /* START Saturday          */
       PIC_HENDSAT  = AEQCOMM.HENDSAT;   /* END   Saturday          */
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||
                     ': Load passed in inside Start/Stop hours '||
                        AEQCOMM.HSTRTSUN||'/'||
                        AEQCOMM.HENDSUN;
           CALL WRITE_TO_OPER;
         END;
     END;
  ELSE
     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||
                    ': Load default inside Start/Stop hours '||
                        PIC_HSTRTSUN||'/'||PIC_HENDSUN;
         CALL WRITE_TO_OPER;
         CALL PRINT_BILLING_FLAGS_HOURS('2');
       END;

 END LOAD_START_END_INSIDE_HOURS;

 %PAGE;
 SETUP_PRICING:  PROC;
 /*******************************************************************/
 /* SET UP COPY MEMBER 'QBPRICE' FOR CALL TO PRICING                */
 /*******************************************************************/
 /* NOTE: Holidays are assigned in QBPRIC1                          */
 /* ----------------------------------------------------------------*/
      IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': setup_pricing ';
         CALL WRITE_TO_OPER;
       END;
       
   P# = 0;                              /* NO PARTS PRICED          */
   /*ALLOCATE PRICE ;                   /* SETS OBJECT OF 'REFER',  */
                                        /*   I.E., X##PARTS         */
                                        
   EXEC CICS GETMAIN SET(@PRICE)
           FLENGTH(CSTG(PRICE));
  IF TEST_SW
    THEN DO;
      DIAG_TEXT = MODULE||': PRICE COMMLENGTH '||CSTG(PRICE);
      CALL WRITE_TO_OPER;           
    END;
                                      
   CALL INIT_PRICING;
   
   PRICE.X##PARTS = P#;
   PRICE.CSERVCDE = AEQCOMM.S0CSVC;     /* FROM QSGENL              */
   PRICE.IMACT    = AEQCOMM.S0IMACTC;   /* FROM QSGENL              */

   PRICE.CTCUS    = 'A';
   PRICE.CGSASCH  = AEQCOMM.CGSASCH;    /* FROM QSGENL               */

   PRICE.QSTOTI   = PIC_STOP;          /* FROM QSGENL (S0QSTOTI)   */

   IF AEQCOMM.S0QSVCHR = '   '
     THEN PRICE.QSVCHR   = 0;           /* FROM QSGENL (S0QSVCHR)   */
     ELSE PRICE.QSVCHR   = PIC_SVCHR;   /* FROM QSGENL (S0QSVCHR)   */

   IF AEQCOMM.S0QTRAHR = '   '
     THEN PRICE.QTRAHR   = 0;           /* FROM QSGENL (S0QTRAHR)   */
     ELSE PRICE.QTRAHR   = PIC_TRAHR;   /* FROM QSGENL (S0QTRAHR)   */

   PRICE.QTRAMI   = 0;
   PRICE.ATRAEX   = 0;

   PRICE.DCALL = AEQCOMM.S0DCALCY || '-' /* FROM QSGENL             */
              || AEQCOMM.S0DCALCM || '-'
              || AEQCOMM.S0DCALCD;

   PRICE.CCPFIN   = AEQCOMM.CGCBILCL;    /* FROM QSGENL             */
   PRICE.CHVLC    = HVLC;
                                         /* SET BILLING TYPE        */
   PRICE.CRATTYP = 'C';

  /*----------------------------------------------------------------*/
  /* 4NSC - ALSO IN QBILL4                                          */
  /*----------------------------------------------------------------*/

  PRICE.FBILACTH = 'Y';         /* set to "Y" to bill inside/outside*/
  PRICE.FBILTRVH = 'Y';         /* set to "Y" to bill inside/outside*/
  PRICE.FBILPART = 'Y';         /* set to "Y" to bill parts         */
  PRICE.FBILDIST = 'Y';         /* set to "Y" to bill distance      */
  PRICE.FBILEXP  = 'Y';         /* set to "Y" to bill expenses      */

  PRICE.TEST_SW  = TEST_SW;     /* set tracing flag                 */

  TEMP_DATE      = AEQCOMM.S0DCALCY ||   /* FROM QSGENL             */
                   AEQCOMM.S0DCALCM ||
                   AEQCOMM.S0DCALCD;

  LIL_DATE     = GREGORIAN_TO_LILIAN(TEMP_DATE,'2');
  TEMP_LILDATE = LIL_DATE;
  DAY_OF_WEEK  = GET_DAYNUM(TEMP_LILDATE,'2');/*GET THE DAY OF  WEEK*/
                                 /* ------------------------------- */
                                 /* Get_DAYNUM RETURNS              */
                                 /* 1  SUNDAY                       */
                                 /* 2  MONDAY                       */
                                 /* 3  TUESDAY                      */
                                 /* 4  WEDNESDAY                    */
                                 /* 5  THURSDAY                     */
                                 /* 6  FRIDAY                       */
                                 /* 7  SATURDAY                     */
                                 /* ------------------------------- */
  SELECT (DAY_OF_WEEK);          /* SELECT THE DAY OF THE WEEK      */
    WHEN(1)                      /* SERVICE CALL DAY 1 IS SUNDAY    */
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||'QBBIL1: DAY 1 SUNDAY ('||
                                TEMP_DATE||')';
            CALL WRITE_TO_OPER;
          END;
        INSIDE_HRS(3).START = PIC_HSTRTSUN; /* START CURRENT    DAY */
        INSIDE_HRS(3).END   = PIC_HENDSUN;  /* END   CURRENT    DAY */
        INSIDE_HRS(2).START = PIC_HSTRTSAT; /* START CURRENT -1 DAY */
        INSIDE_HRS(2).END   = PIC_HENDSAT;  /* END   CURRENT -1 DAY */
        INSIDE_HRS(1).START = PIC_HSTRTFRI; /* START CURRENT -2 DAY */
        INSIDE_HRS(1).END   = PIC_HENDFRI;  /* END   CURRENT -2 DAY */
      END;

    WHEN(2)                        /* SERVICE CALL DAY 2 IS MONDAY */
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': DAY 2 MONDAY ('||TEMP_DATE||')';
            CALL WRITE_TO_OPER;
          END;
        INSIDE_HRS(3).START = PIC_HSTRTMON; /* START CURRENT    DAY */
        INSIDE_HRS(3).END   = PIC_HENDMON;  /* END   CURRENT    DAY */
        INSIDE_HRS(2).START = PIC_HSTRTSUN; /* START CURRENT -1 DAY */
        INSIDE_HRS(2).END   = PIC_HENDSUN;  /* END   CURRENT -1 DAY */
        INSIDE_HRS(1).START = PIC_HSTRTSAT; /* START CURRENT -2 DAY */
        INSIDE_HRS(1).END   = PIC_HENDSAT;  /* END   CURRENT -2 DAY */
      END;

    WHEN(3)                     /* SERVICE CALL DAY 3 IS TUESDAY */
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': DAY 3 TUESDAY ('||TEMP_DATE||')';
            CALL WRITE_TO_OPER;
          END;
        INSIDE_HRS(3).START = PIC_HSTRTTUE;  /* START CURRENT    DAY */
        INSIDE_HRS(3).END   = PIC_HENDTUE;   /* END   CURRENT    DAY */
        INSIDE_HRS(2).START = PIC_HSTRTMON;  /* START CURRENT -1 DAY */
        INSIDE_HRS(2).END   = PIC_HENDMON;   /* END   CURRENT -1 DAY */
        INSIDE_HRS(1).START = PIC_HSTRTSUN;  /* START CURRENT -2 DAY */
        INSIDE_HRS(1).END   = PIC_HENDSUN;   /* END   CURRENT -2 DAY */
      END;

    WHEN(4)                     /* SERVICE CALL DAY 4 IS WEDNESDAY */
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': DAY 4 WEDNESDAY ('||TEMP_DATE||')';
            CALL WRITE_TO_OPER;
          END;
        INSIDE_HRS(3).START = PIC_HSTRTWED; /* START CURRENT    DAY */
        INSIDE_HRS(3).END   = PIC_HENDWED;  /* END   CURRENT    DAY */
        INSIDE_HRS(2).START = PIC_HSTRTTUE; /* START CURRENT -1 DAY */
        INSIDE_HRS(2).END   = PIC_HENDTUE;  /* END   CURRENT -1 DAY */
        INSIDE_HRS(1).START = PIC_HSTRTMON; /* START CURRENT -2 DAY */
        INSIDE_HRS(1).END   = PIC_HENDMON;  /* END   CURRENT -2 DAY */
      END;

    WHEN(5)                      /* SERVICE CALL DAY 5 IS THURSDAY */
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': DAY 5 THURSDAY ('||TEMP_DATE||')';
            CALL WRITE_TO_OPER;
          END;
        INSIDE_HRS(3).START = PIC_HSTRTTHU; /* START CURRENT    DAY */
        INSIDE_HRS(3).END   = PIC_HENDTHU;  /* END   CURRENT    DAY */
        INSIDE_HRS(2).START = PIC_HSTRTWED; /* START CURRENT -1 DAY */
        INSIDE_HRS(2).END   = PIC_HENDWED;  /* END   CURRENT -1 DAY */
        INSIDE_HRS(1).START = PIC_HSTRTTUE; /* START CURRENT -2 DAY */
        INSIDE_HRS(1).END   = PIC_HENDTUE;  /* END   CURRENT -2 DAY */
      END;

    WHEN(6)                        /* SERVICE CALL DAY 6 IS FRIDAY */
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': DAY 6 FRIDAY ('||TEMP_DATE||')';
            CALL WRITE_TO_OPER;
          END;
        INSIDE_HRS(3).START = PIC_HSTRTFRI; /* START CURRENT    DAY */
        INSIDE_HRS(3).END   = PIC_HENDFRI;  /* END   CURRENT    DAY */
        INSIDE_HRS(2).START = PIC_HSTRTTHU; /* START CURRENT -1 DAY */
        INSIDE_HRS(2).END   = PIC_HENDTHU;  /* END   CURRENT -1 DAY */
        INSIDE_HRS(1).START = PIC_HSTRTWED; /* START CURRENT -2 DAY */
        INSIDE_HRS(1).END   = PIC_HENDWED;  /* END   CURRENT -2 DAY */
      END;

    WHEN(7)                      /* SERVICE CALL DAY 7 IS SATURDAY */
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': DAY 7 SATURDAY ('||TEMP_DATE||')';
            CALL WRITE_TO_OPER;
          END;
        INSIDE_HRS(3).START = PIC_HSTRTSAT; /* START CURRENT    DAY */
        INSIDE_HRS(3).END   = PIC_HENDSAT;  /* END   CURRENT    DAY */
        INSIDE_HRS(2).START = PIC_HSTRTFRI; /* START CURRENT -1 DAY */
        INSIDE_HRS(2).END   = PIC_HENDFRI;  /* END   CURRENT -1 DAY */
        INSIDE_HRS(1).START = PIC_HSTRTTHU; /* START CURRENT -2 DAY */
        INSIDE_HRS(1).END   = PIC_HENDTHU;  /* END   CURRENT -2 DAY */

      END;
    OTHERWISE;

   END;                                            /* END OF SELECT */

 END SETUP_PRICING;

 %PAGE;
 INIT_PRICING:  PROC;
 /*******************************************************************/
 /* INITIALIZE PRICING STRUCTURE ...                                */
 /* (CAREFULLY, DUE TO 'REFER' OPTIONS)                             */
 /*******************************************************************/
   PRICE = '';
   PRICE.IMACT    = '';
   PRICE.ICUST    = '';
   PRICE.IINVOICE = '';
   PRICE.CTCUS    = '';
   PRICE.QSTOTI   = '';
   PRICE.QSVCHR   = '';
   PRICE.QTRAHR   = '';
   PRICE.DCALL    = '';
   PRICE.QTRAMI   = '';
   PRICE.ATRAEX   = '';
   PRICE.ABILRATE = '';

   PRICE.CCPFIN   = '';
   PRICE.CHVLC    = '';
   PRICE.CRATTYP  = '';
   PRICE.AMILRATE = '';
   PRICE.AINRATE  = '';
   PRICE.AOUTRATE = '';
   PRICE.AINCDNT  = '';
   PRICE.PDISCNT  = '';
   PRICE.QMINCHG  = '';
   PRICE.AMAXCHG  = '';

   PRICE.QHCOUNT  = '';
   PRICE.DHOLIDAY(*) = '';
   /*DO I=1 TO 30;
     PRICE.DHOLIDAY(I) = '';
   END;  */

   PRICE.QTOTDAYS = '';
   PRICE.HSTART   = '';
   PRICE.QINHRS   = '';
   PRICE.AINLAB   = '';
   PRICE.QOUTHRS  = '';
   PRICE.AOUTLAB  = '';
   PRICE.AMILEXP  = '';
   PRICE.APARTAMT(*) = 0;
   /*DO I=1 TO PRICE.X##PARTS;
     PRICE.APARTAMT(I) = '';
   END;  */

   PRICE.ATOTTIME = '';
   PRICE.ATOTEXP  = '';
   PRICE.ATOTPART = '';
   PRICE.CMININD  = '';
   PRICE.AMINCHG  = '';
   PRICE.QMINHRS  = '';
   PRICE.QINSTART = '';
   PRICE.QINSTOP  = '';

   /* --------------- */
   /* 4nsc            */
   /* --------------- */
   PRICE.FBILACTH = '';
   PRICE.FBILTRVH = '';
   PRICE.FBILPART = '';
   PRICE.FBILDIST = '';
   PRICE.FBILEXP  = ''; 
   PRICE.TEST_SW  = '0'B;
   PRICE.FABEND   = '0'B;
   PRICE.FBIL1    = '1'B;
   PRICE.FBIL4    = '0'B;
   
   PRICE.INSIDE_HRS(*)  = '';
   PRICE.CNONRATE = 'N';  /*RQ057017 */
   
 END INIT_PRICING;

 %PAGE;
 LINK_TO_PRICING: PROC;
 /*******************************************************************/
 /* LINK TO QBPRIC1 TO INITIATE PRICING...                          */
 /* QBPRIC1 READS SUPPORT (VSAM) TABLES, THEN XCTLS TO QBPRIC2 TO   */
 /* PERFORM ACTUAL PRICING LOGIC.                                   */
 /*******************************************************************/
   IF PRICE.TEST_SW
     THEN DO;
       /* PRICE.TEST_SW = '0'B */
       DIAG_TEXT = MODULE||': PRICE TEST SWITCH IS ON, DOC = '||
                    AEQCOMM.S0IDOCMN;
       CALL WRITE_TO_OPER;
     END;
     
   PRICE.X##PARTS = P#;
   PRICE.IINVOICE = SUBSTR(AEQCOMM.S0IDOCMN,3,7);
      IF PRICE.TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': PRICE NUM PARTS '||PRICE.X##PARTS;
       CALL WRITE_TO_OPER;
     END;

   EXEC CICS LINK PROGRAM('QBPRIC1')
                  COMMAREA(PRICE)
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);      /* END EXEC CICS LINK ...  */

   IF TEST_SW & RESPONSE = DFHRESP(NORMAL)
     THEN DO;
       DIAG_TEXT = MODULE||': NORMAL RETURN FROM PRICING, INVOICE = '||
                    PRICE.IINVOICE;
       CALL WRITE_TO_OPER;
     END;

   PRICE.IINVOICE = '';

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC3 = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' FAILURE ON LINK TO QBPRIC1 RESP '||
                         PIC3|| ' RESP2 '||PIC_RESP2;
       SIGNAL ERROR;
     END;
   
   IF PRICE.FABEND 
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       PIC3 = RESPONSE;
       PIC_RESP2 = RESPONSE2;
       ET_TEXT1 = ERR2||MODULE||' ABEND IN QBPRIC1';
       SIGNAL ERROR;
     END;
 END LINK_TO_PRICING;

 %PAGE;
 NEVERBILL: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* Check for hard and fast no bill condition. These are records    */
 /* that will be excluded from the biling process. No invoice will  */
 /* be created.                                               4NSC  */
 /*******************************************************************/
  IF TEST_SW
    THEN DO;
      DIAG_TEXT = MODULE||': IN THE NEVERBILL PROCEDURE! ------------';
      CALL WRITE_TO_OPER;
    END;
    
  SELECT;

    WHEN ( CANADA ) 
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'CANADA - 01 ',
                                                       '- NEVERBILL');
        RETURN('1'B);
      END;

    WHEN (AEQCOMM.NSDC_DEL = 'Y')         /* QSAR TO BE DELETED     */
      DO;
        CALL ASSIGN_BILL_DECISION(PENDED_REC,'DELETE - 03 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    WHEN (AEQCOMM.CGQHIGSE >= PEND)      /* QSAR PEND               */
      DO;
        CALL ASSIGN_BILL_DECISION(PENDED_REC,'PENDED - 02 ',
                                                       '- NEVERBILL');
        RETURN('1'B);
      END;
      
    /* Lenovo TPP FITS RQ054749 NOBILL CHECK             */
    /* ----------------------------------------------------------- */
    /* if SC = 36 and SRC Solectron and Contract type= 'TPP'       */
    /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.S0CSVC  = '36'  &  
          AEQCOMM.CCOTYPE = 'TPP' &
          AEQCOMM.ISOURCE = 'SQL')
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SC36 SQL TPP- 04 ',
                                           '- NEVERBILL');
        RETURN('1'B);
      END;
     

    /* ------------------------------------------------------------ */
    /* No bill for certain service codes                       4NSC */
    /* As SVC 47 is billable with PAR/PTP codes, it will be checked */
    /* below down the line, But SCs -05 msg will be same     - 6NSH */      
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.S0CSVC = '44'  |    /* SC 44 (CONTRACT SERV)      */
    /*    AEQCOMM.S0CSVC = '47'  |       SC 47 Marketing Assistance */
          AEQCOMM.S0CSVC = '48'  |    /* SC 48 Account Management   */
          AEQCOMM.S0CSVC = '55'  |    /* SC (AVAILABLE) & SC 65     */
          AEQCOMM.S0CSVC = '65'  )    /* (UNAVAILABLE)              */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SCs - 05 ',
                                                       '- NEVERBILL');
        RETURN('1'B);
      END;

   /* --------------------------------------------------------------*/
   /* Note: there are many ways to determine that a machine is an   */
   /*      IBM Machine. These checks sets FIBM, which sets CINTERNAL*/
   /* --------------------------------------------------------------*/
   /*  AEQCOMM.CGFIIC  = '1'B        INTERNAL IBM CUSTOMER (AEQRUL2)*/
   /*  AEQCOMM.GJCSTAT = '32'        INTERNAL IBM CUSTOMER (AEQRUL2)*/
   /*  SUBSTR(AEQCOMM.S8CUSTNM,I-4,5) = ' IBM '             (AEQCAD)*/
   /* IF SUBSTR(AEQCOMM.S8CUSTNM,1,4) = 'IBM '              (AEQCAD)*/
   /* if CE puts INNNNNN in the contract name              (AEQCNTR)*/
   /* if SUBSTR(CALL_SEG.NCUST,1,4) = 'IBM '                (AEQCAD)*/
   /* ------------------------------------------------------------- */
    WHEN (AEQCOMM.FIBM)                   /* IBM INTERNAL           */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'INTERNAL - 06 ',
                                                       '- NEVERBILL');
        AEQCOMM.IENTSRC = 'HSI';
        RETURN('1'B);
      END;

    WHEN (AEQCOMM.S0IPARTR ^= ' ')       /* PART TRAILER            */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'PT - 07 ',
                                                   '- NEVERBILL');
        RETURN('1'B);
      END;
      
    WHEN (AEQCOMM.FLNVEMPL   &         /* Lenovo employee 7NSR       */
          (AEQCOMM.S0CSVC  ^= '36' |   /* allow SC 36/AC 20 to bill  */
           (AEQCOMM.S0CSVC  = '36' & AEQCOMM.S0CHACT ^= '20'  )) )
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'LENOVO   - 08 ',
                                                       '- NEVERBILL');
        AEQCOMM.IENTSRC = 'HSI';
        RETURN('1'B);
      END;
      
    WHEN (AEQCOMM.FOEE)      /* OEM ENTITLEMENT ENGINE  4NSG        */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'OEE - 09 ', 
                                                   '- NEVERBILL');
        RETURN('1'B);
      END;


    /* ------------------------------------------------------------- */
    /* QualxServ should be excluded from NEVERBILL after 04/10/2006  */
    /* Both blocks should be commented out as a whole in future -6NSC*/
    /* Both QLX blocks are being commented out       -  6NSH RQ4527  */
    /* ------------------------------------------------------------- */                                
    /* WHEN (AEQCOMM.ISOURCE = 'QLX' & DT_CHK < '20060410')          */
    /* DO;                                      SOURCE IS QUALXSERV  */	                  
    /*  CALL ASSIGN_BILL_DECISION(NOBILL,'QLX - 09 ','- NEVERBILL'); */
    /*  RETURN('1'B);                                                */
    /* END;                                                          */
    /*                                                               */
    /* WHEN (AEQCOMM.ISOURCE = 'QLX'  & DT_CHK <= '20060417'         */
    /*       & AEQCOMM.FWARRNTY & AEQCOMM.S0CSVC ^= '36'             */  
    /*       & AEQCOMM.S0CHACT ^= '20')                              */
    /*  DO;                                                          */
    /*  CALL ASSIGN_BILL_DECISION(NOBILL,'QLX - 09 ','- NEVERBILL'); */
    /*     RETURN('1'B);                                             */
    /*  END;                                                         */


    WHEN (AEQCOMM.ISOURCE = 'WPS')       /* SOURCE IS Warranty      */
      DO;                                /* Processing System       */
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'WPS - 10 ',
                                                    '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* Match to MPI and it's Rent/Lease                        4NSC */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.M_MPI = 'Y' & SUBSTR(AEQCOMM.GJCSTAT,1,1) = '1')
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'LEASE - 11 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* SO offering or ISSC type record                              */
    /* ISSC Contract or enterprise # = 6222902                 4NSC */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.FISSCNTR |
          AEQCOMM.CGCIENNO= 6222902 |
          AEQCOMM.GJICUST = 6222902)
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'ISSC - 12 ',
                                                     '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* The machine is an "SO" (ent=6222902) machine            4NSC */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.FSOMACH)
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SO MACH - 13 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    WHEN (AEQCOMM.FTSSMACH)               /* DO NOT BILL TSS  QSARS */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'TSS MACH - 14 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    WHEN (AEQCOMM.CTAXCD = '19')         /* NON-BILLABLE TYPE       */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'TAXCD 19 - 15 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    WHEN ((AEQCOMM.CHCDATIT ='P') &     /* PART ONLY - SOURCED FROM */
            AEQCOMM.S0ISRCNS)           /* QAR online               */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'PO - 16 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    WHEN (AEQCOMM.CS1CFUNC = 'PO')      /* PART ONLY                */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'PO - 17 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

   /* ------------------------------------------------------------- */
   /* exclude Bill part checks from the NEVERBILL check             */
   /* Bill part and ThinkPad Protection with Parts          RQ054527*/
   /* ------------------------------------------------------------- */
     
    WHEN ((AEQCOMM.S0CSVC     = '01' | AEQCOMM.S0CSVC     = '08' |
           AEQCOMM.S0CSVC     = '20' | AEQCOMM.S0CSVC     = '33' |
           AEQCOMM.S0CSVC     = '36' | AEQCOMM.S0CSVC     = '47' ) 
            & 
            BILL_ONLY_PARTS & BILL_PARTS_PTP
            & 
           ^PDPSI_OFFICE )
       DO;
         RETURN('0'B);
       END;
      

     WHEN ((AEQCOMM.S0CSVC     = '01' | AEQCOMM.S0CSVC     = '08' |
            AEQCOMM.S0CSVC     = '20' | AEQCOMM.S0CSVC     = '33' |
            AEQCOMM.S0CSVC     = '36' | AEQCOMM.S0CSVC     = '47' ) 
            & AEQCOMM.ISOURCE ^= 'ACR'
            & AEQCOMM.ISOURCE ^= 'SQL'
            & 
            BILL_ONLY_PARTS & ^BILL_PARTS_PTP
            & 
           ^PDPSI_OFFICE )
       DO;
         RETURN('0'B);
       END;

   /* ------------------------------------------------------------- */
   /* This check for SVC 47 is brought here for FITS RQ054527       */
   /* ------------------------------------------------------------- */

    WHEN (AEQCOMM.S0CSVC = '47')       /*SC 47 Marketing Assistance */
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SCs - 18 ',
                                                     '- NEVERBILL');
        RETURN('1'B);
      END;

      
   /* -------------------------------------------------------------- */
   /* exclude SC 36 from NEVERBILL check, according to D. Hoffman    */
   /* SC 36 is always billed.  See ALWAYSBILL proc.MN#26229774       */
   /*  RQ4649 : QLX will behave as Onsite branch & no longer will be */
   /*         Depot like SQL/ACR                                     */ 
   /*----------------------------------------------------------------*/
   
     WHEN (AEQCOMM.S0CSVC     = '36'  & 
            ( AEQCOMM.ISOURCE  = '' | AEQCOMM.ISOURCE = 'QLX')  &
              ^PDPSI_OFFICE)
 
       DO;
         RETURN('0'B);
       END;


   /* ------------------------------------------------------------- */
   /* If Service Code is 20 and IDM is 1, 2, or 5              4NSC */
   /* ------------------------------------------------------------- */
    WHEN  (AEQCOMM.S0CSVC  = '20' &
           (AEQCOMM.S0CIDM  = '1' |
            AEQCOMM.S0CIDM  = '2' |
            AEQCOMM.S0CIDM  = '5')    )
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SC20IDM1/2/5 - 19 ',
                                                    '- NEVERBILL');
        RETURN('1'B);
      END;
      
    /* ----------------------------------------------------------- */
    /* if it's a SC 01 and AC 11 then do not bill             4NSC */
    /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.S0CSVC  = '01' & AEQCOMM.S0CHACT = '11')
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'SC1 AC11   - 20 ',
                                           '- NEVERBILL');
        RETURN('1'B);
      END;
      
    /* ----------------------------------------------------------- */
    /* if it's a SC 01 and AC is 10 and BA is not 3                */
    /* then do not bill                                       4NSC */
    /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.S0CSVC  = '01' &
          AEQCOMM.S0CHACT = '10' &
          AEQCOMM.S0CBIOSA ^= '3')
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'SC1 AC10^BA3- 21 ',
                                           '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ----------------------------------------------------------- */
    /* if it's a SC 01 and AC is 10 and BA is 3                    */
    /* send to alwaysbill proc                                4NSC */
    /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.S0CSVC  = '01' &
          AEQCOMM.S0CHACT = '10' &
          AEQCOMM.S0CBIOSA = '3')
      DO;
        CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SC1 AC10 BA3- 22 ',
                                           '- NEVERBILL');
        RETURN('0'B);
      END;

    /* ------------------------------------------------------------- */
    /* This is to check the 24X7 coverage from CEDB, MPI, CR or DSI  */
    /* If this record is determined to have 24 X 7 coverage from any */
    /* one of the sources then do not bill.                    4NSC  */
    /* This is for 24x7 labor, need to check the other billing flags */
    /* SC 20/33/36 are not part of contract/MA hours                 */
    /* ------------------------------------------------------------- */
    WHEN ((AEQCOMM.FMPI24X7 | AEQCOMM.FCNT24X7 )  &
          (AEQCOMM.S0CSVC = '01' | AEQCOMM.S0CSVC = '08') )
      DO;
        IF NOBILLPART()      &
           NOBILLDISTANCE()  &
           NOBILLEXPENSES()
          THEN DO;
            IF AEQCOMM.FONSITE = 'Y'
              THEN
                CALL ASSIGN_BILL_DECISION
                                  (NOT_ELIGIBLE,'MA 24x7 - 23 ',
                                                      '- NEVERBILL');
              ELSE
                CALL ASSIGN_BILL_DECISION(NOBILL,'MA 24x7 - 24 ',
                                                      '- NEVERBILL');
            RETURN('1'B);
          END;
          ELSE DO;
            AEQCOMM.FBILACTH = 'N';
            AEQCOMM.FBILTRVH = 'N';
            RETURN('0'B);
          END;
      END;

    /* ------------------------------------------------------------ */
    /* This is to check the 24X7 warranty coverage                  */
    /* If this record is determined to have 24 X 7 coverage from any*/
    /* one of the sources then do not bill.                    4NSC */
    /* ------------------------------------------------------------ */
    
    WHEN (AEQCOMM.FWAR24X7)
      DO;
        IF NOBILLPART()      &
           NOBILLDISTANCE()  &
           NOBILLEXPENSES()
          THEN DO;
            IF AEQCOMM.FONSITE = 'Y'
              THEN
                CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,
                                   'WARR 24X7 - 25 ', '- NEVERBILL');
              ELSE
                CALL ASSIGN_BILL_DECISION(NOBILL,'WARR 24X7 - 26 ',
                                                    '- NEVERBILL');
            RETURN('1'B);
          END;
          ELSE DO;
            AEQCOMM.FBILACTH = 'N';
            AEQCOMM.FBILTRVH = 'N';
            RETURN('0'B);
          END;
      END;

   WHEN (AEQCOMM.ISOURCE = 'SQL' |       /* SOURCED FROM SOLECTRON  */
         AEQCOMM.ISOURCE = 'ACR')        /* SOURCE = ACER/WISTRON   */
                                         /* OR ACER (7-1-2005 - RY) */
     DO;                                 /* BILL IF S/C 36 AND ACT  */
       SELECT (AEQCOMM.S0CSVC);          /* CODE OTHER THAN 24,25   */
         WHEN ('01','08','33')           /*                         */
           DO;
             CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SQL SC1/8 - 27 ',
                                      '- NEVERBILL');
             RETURN('1'B);
           END;
           
         WHEN ('36')                     /*                         */
           DO;                           /*                         */
             SELECT (AEQCOMM.S0CHACT);   /*                         */
               WHEN ('24','25')          /*                         */
                 DO;
                   CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,
                                   'SQL SC 36 - 28 ','- NEVERBILL');
                   RETURN('1'B);
                 END;
                                         /*                         */
               OTHERWISE RETURN('0'B);
             END;                        /*                         */
           END;
         OTHERWISE
           DO;
             CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'- 29 ',
                         '- NEVERBILL');
             RETURN('1'B);
           END;
       END;
     END;

    /* ------------------------------------------------------------ */
    /* This check would set the no bill condition when there is no  */
    /* reason to bill. This could be when there are no parts  but   */
    /* the switch is set to bill parts and all the other switches   */
    /* are off.                                                     */
    /* ------------------------------------------------------------ */
    WHEN (NOBILLACTUAL() & NOBILLTRAVEL() & NOBILLPART() &
          NOBILLDISTANCE() & NOBILLEXPENSES() & AEQCOMM.CCOTYPE = '' &
          (AEQCOMM.S0CSVC = '01' | AEQCOMM.S0CSVC = '08')    )
       DO;
         CALL ASSIGN_BILL_DECISION(NOBILL,'ALL FLGS NO - 30 ',
                                                       '- NEVERBILL');
         RETURN('1'B);
       END;

    /* ------------------------------------------------------------ */
    /* If the bill flags say to bill for inside hours but there are */
    /* no inside hours or any other reason to bill then set to      */
    /* "NOBILL"                                                4NSC */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.FBILACTH = 'I' & AEQCOMM.FBILTRVH = 'I' &
          NOBILLPART() & NOBILLDISTANCE() & NOBILLEXPENSES() &
          PRICE.QINHRS = 0)
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'NO IN HRS - 31 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* If the bill flags say to bill for inside hours but there are */
    /* no inside hours or any other reason to bill then set to      */
    /* "NOBILL"                                                4NSC */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.FBILACTH = 'N' & AEQCOMM.FBILTRVH = 'I' &
          NOBILLPART() & NOBILLDISTANCE() & NOBILLEXPENSES() &
          PRICE.QINHRS = 0)
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'NO IN HRS - 32 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------- */
    /* If the bill flags say to bill for inside hours but there are  */
    /* no inside hours or any other reason to bill then set to       */
    /* "NOBILL"                                                 4NSC */
    /* ------------------------------------------------------------- */
    WHEN (AEQCOMM.FBILACTH = 'I' & AEQCOMM.FBILTRVH = 'N' &
          NOBILLPART() & NOBILLDISTANCE() & NOBILLEXPENSES() &
          PRICE.QINHRS = 0)
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'NO IN HRS - 33 ',
                                                    '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* If the bill flags say to bill for outside hours but there are*/
    /* no inside hours or any other reason to bill then set to      */
    /* "NOBILL"                                                4NSC */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.FBILACTH = 'O' & AEQCOMM.FBILTRVH = 'O' &
          NOBILLPART() & NOBILLDISTANCE() & NOBILLEXPENSES() &
          PRICE.QOUTHRS = 0)
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'NO OUT HRS - 34 ',
                                                      '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------- */
    /* If the bill flags say to bill for outside hours but there are */
    /* no inside hours or any other reason to bill then set to       */
    /* "NOBILL"                                                 4NSC */
    /* ------------------------------------------------------------- */
    WHEN (AEQCOMM.FBILACTH = 'N' & AEQCOMM.FBILTRVH = 'O' &
          NOBILLPART() & NOBILLDISTANCE() & NOBILLEXPENSES() &
          PRICE.QOUTHRS = 0)
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'NO OUT HRS - 35 ',
                                             '- NEVERBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* If the bill flags say to bill for outside hours but there are*/
    /* no inside hours or any other reason to bill then set to      */
    /* "NOBILL"                                                4NSC */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.FBILACTH = 'O' & AEQCOMM.FBILTRVH = 'N' &
          NOBILLPART() & NOBILLDISTANCE() & NOBILLEXPENSES() &
          PRICE.QOUTHRS = 0)
      DO;
        CALL ASSIGN_BILL_DECISION(NOBILL,'NO OUT HRS - 36 ',
                                            '- NEVERBILL');
        RETURN('1'B);
      END;
    /*------------------------------------------------------------*/ 
    /* If the product division is'44'and platform code is not 'TS'*/ 
    /* for lenovo TP/Desk top machines then set to "NOBILL"       */ 
    /*------------------------------------------------------------*/ 
    WHEN (AEQCOMM.CPRODDIV = '44' & AEQCOMM.IPLATFRM ^='TS')         
      DO;                                                            
        CALL ASSIGN_BILL_DECISION(NOBILL,'PRDDIV 44&PLTFRM ^TS
                                       - 81','- NEVERBILL');
                                                      /*NOBILL-81*/                                       
        RETURN('1'B);                                                
      END;                                                           
      
    OTHERWISE
        RETURN('0'B);
  END;                                             /* end of select */

 END NEVERBILL;

 %PAGE;
 ALWAYSBILL: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* CHECK FOR ALWAYS BILL CONDITION                            4NSC */
 /*******************************************************************/
   IF TEST_SW
     THEN DO;
       DIAG_TEXT= MODULE||': IN THE ALWAYSBILL PROCEDURE! -----------';
       CALL WRITE_TO_OPER;
     END;
   SELECT;

    /* ------------------------------------------------------------ */
    /* Incident fee is UDO/UMO/UPO/UOR/UOS and the service code     */
    /* is 01 or 08. Now incident fee code is checked by             */
    /* TEMP_CTYPE.                                     RQ054527     */
    /*RQ4649 : QLX will behave as Onsite branch & no longer will be */
    /*         Depot like SQL/ACR                                   */  
    /* ------------------------------------------------------------ */
     WHEN ((AEQCOMM.S0CSVC  = '01' | AEQCOMM.S0CSVC  = '08') &
            TEMP_CTYPE      = 'I'  &
           ^PDPSI_OFFICE           &
           ( AEQCOMM.ISOURCE ^= ''  & AEQCOMM.ISOURCE ^= 'QLX' ) )

       DO;

         CALL ASSIGN_BILL_DECISION(BILL,'SC1/8 INCDT - 37 ',
                                         '- ALWAYSBILL');
         RETURN('1'B);
       END;


   /* ------------------------------------------------------------- */
   /* Always Bill parts and ThinkPad protection with parts.         */
   /* CCOTYPE= PAR or PTP                                   RQ054527*/
   /* ------------------------------------------------------------- */
     WHEN ((AEQCOMM.S0CSVC     = '01' | AEQCOMM.S0CSVC     = '08' |
            AEQCOMM.S0CSVC     = '20' | AEQCOMM.S0CSVC     = '33' |
            AEQCOMM.S0CSVC     = '36' | AEQCOMM.S0CSVC     = '47' ) 
                    & 
            BILL_ONLY_PARTS
                    &
            BILL_PARTS_PTP
                    & 
           ^PDPSI_OFFICE )
       DO;
 
         CALL ASSIGN_BILL_DECISION(BILL,'SC01-47  PTP - 38' ,
                               ' - ALWAYSBILL');

         RETURN('1'B);
       END;


     WHEN ((AEQCOMM.S0CSVC     = '01' | AEQCOMM.S0CSVC     = '08' |
            AEQCOMM.S0CSVC     = '20' | AEQCOMM.S0CSVC     = '33' |
            AEQCOMM.S0CSVC     = '36' | AEQCOMM.S0CSVC     = '47' ) 
          & AEQCOMM.ISOURCE   ^= 'ACR'
          & AEQCOMM.ISOURCE   ^= 'SQL'
          & 
            BILL_ONLY_PARTS & ^BILL_PARTS_PTP
          & 
           ^PDPSI_OFFICE )
       DO;
 
         CALL ASSIGN_BILL_DECISION(BILL,'SC01-47 PAR - 39 ' ,
                               '- ALWAYSBILL');

         RETURN('1'B);
       END;
    /* ------------------------------------------------------------ */
    /* Combo code (incident fee + parts) and the service code is 01 */
    /* or 08 and source is spaces.                                  */
    /*                                                 RQ054527     */
    /* ------------------------------------------------------------ */
     WHEN ((AEQCOMM.S0CSVC    = '01'  | AEQCOMM.S0CSVC  = '08') &
            TEMP_CTYPE        = 'B'   &
           ^PDPSI_OFFICE              &
           (AEQCOMM.ISOURCE   = ''    | AEQCOMM.ISOURCE   = 'QLX' ))

       DO;

         CALL ASSIGN_BILL_DECISION(BILL,'Combo SC1/8 INCDT - ',
                                        '40 - ALWAYSBILL');
         RETURN('1'B);
       END;

       
     /* ----------------------------------------------------------- */
     /* Always bill an incident charge regardless of BA code.  4NSC */
     /* according to CSO                                            */
     /* ----------------------------------------------------------- */
     /*WHEN (AEQCOMM.CCOTYPE ^= '' )                                */
     /*                                                             */
     /*  DO                                                         */
     /*    AEQCOMM.FBILACTH = 'Y'   see code later in qbbil1 that   */
     /*    AEQCOMM.FBILTRVH = 'Y'   sets bill rule 25               */
     /*    AEQCOMM.FBILPART = 'N'                                   */
     /*    AEQCOMM.FBILDIST = 'N'                                   */
     /*    AEQCOMM.FBILEXP  = 'N'                                   */
     /*                                                             */
     /*    CALL ASSIGN_BILL_DECISION(BILL,'  ','- ALWAYSBILL')      */
     /*    RETURN('1'B)                                             */
     /*  END                                                        */

    /* ------------------------------------------------------------ */
    /* If the service was provided by an ONSITE SSR but the service */
    /* allowed is not onsite service (service was not done by a     */
    /* depot or PD/PDS branch)                                  4NSC*/
    /*RQ4649 : QLX will behave as Onsite branch & no longer will be */
    /*         Depot like SQL/ACR                                   */ 
    /* ------------------------------------------------------------ */
    WHEN(ONSITE() & ( AEQCOMM.ISOURCE = '' | AEQCOMM.ISOURCE = 'QLX'))
      DO;
        CALL ASSIGN_BILL_DECISION
                               (BILL,'NOT ONSITE - 41 ',
                                                     '- ALWAYSBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.ISOURCE = 'SQL'  &      /* SOURCED FROM SOLECTRON */
          AEQCOMM.S0CSVC  = '36'   &      /* BILL IF S/C 36 AND ACT */
          AEQCOMM.S0CHACT = '20')         /* CODE IS 20             */
      DO;
        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        AEQCOMM.FBILPART = 'Y';
        CALL ASSIGN_BILL_DECISION(BILL,'SC36 AC20 - 42 ',
                                                     '- ALWAYSBILL');
        RETURN('1'B);
      END;

    /* ------------------------------------------------------------ */
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.ISOURCE = 'ACR'  &      /* SOURCE = ACER/WISTRON  */
          AEQCOMM.S0CSVC  = '36'   &      /* BILL IF S/C 36 AND ACT */
          AEQCOMM.S0CHACT = '20')         /* CODE IS 20             */
      DO;
        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        AEQCOMM.FBILPART = 'Y';
        CALL ASSIGN_BILL_DECISION(BILL,'SC36 AC20 - 43 ',
                                                     '- ALWAYSBILL');
        RETURN('1'B);
      END;

     /* ----------------------------------------------------------- */
     /* Service Code is 20 and IDM is 3 or 4 and no incident fee    */
     /*                                                       4NSC  */
     /* Added CNONRATE=Y cond for RQ057017                    5NSM  */
     /* ----------------------------------------------------------- */
     WHEN ((AEQCOMM.CCOTYPE   = '' | PRICE.CNONRATE = 'Y')
            & AEQCOMM.S0CSVC = '20' &
           (AEQCOMM.S0CIDM   = '3' | AEQCOMM.S0CIDM = '4'))
       DO;
         AEQCOMM.FBILACTH = 'Y';
         AEQCOMM.FBILTRVH = 'Y';
         AEQCOMM.FBILPART = 'Y';
         AEQCOMM.FBILDIST = 'Y';
         AEQCOMM.FBILEXP  = 'Y';
         CALL ASSIGN_BILL_DECISION(BILL,'SC20 IDM3/4 - 44 ',
                                          '- ALWAYSBILL');
         RETURN('1'B);
       END;

     /* ----------------------------------------------------------- */
     /* Service Code 36 with any activity code and any billable     */
     /* code and it's not a DEPOT office (isource = ACR,SQL)        */
     /* it is not a pd/psi branch office(Remote support center BO)  */
     /*                                                       4nsc  */
     /*RQ4649 : QLX will behave as Onsite branch & no longer will be*/
     /*         Depot like SQL/ACR                                  */ 
     /* ----------------------------------------------------------- */
     WHEN (AEQCOMM.S0CSVC     = '36'  & 
           ( AEQCOMM.ISOURCE  = ''  | AEQCOMM.ISOURCE = 'QLX') &
           ^PDPSI_OFFICE )
       DO;
         AEQCOMM.FBILACTH = 'Y';
         AEQCOMM.FBILTRVH = 'Y';
         AEQCOMM.FBILPART = 'Y';
         AEQCOMM.FBILDIST = 'Y';
         AEQCOMM.FBILEXP  = 'Y';
         CALL ASSIGN_BILL_DECISION(BILL,'SC 36 - 45 ','- ALWAYSBILL');
         RETURN('1'B);
       END;
     
    /* ----------------------------------------------------------- */
    /* if it's a SC 01 and AC is 10 and BA is 3                    */
    /* then 'auto bill' per Kathy Gioglio/D Hoffman           4NSC */
    /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.S0CSVC  = '01' &
          AEQCOMM.S0CHACT = '10' &
          AEQCOMM.S0CBIOSA = '3')
      DO;
        CALL ASSIGN_BILL_DECISION(BILL,'SC1 AC10 BA3 - 46 ',
                                           '- ALWAYSBILL');
        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        RETURN('1'B);
      END;

     OTHERWISE
         RETURN('0'B);                 /* CONTINUE TO PROCESS       */
   END;                                /* END SELECT                */

 END ALWAYSBILL;

 %PAGE;
 ONSITE: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* CHECK FOR AN ONSITE CONDITION                              4NSC */
 /* --------------------------------------------------------------- */
 /* FONSITE = "Y" Means service has onsite available                */
 /* FONSITE = "N" type of service does not allow for onsite service */
 /*           delivery (Must Bill)                                  */
 /* --------------------------------------------------------------- */
 /* If a service was provided by an SSR and the machine is          */
 /* on file/under contract/warranty as service level other than     */
 /* onsite, then the service activity will be billed. This          */
 /* condition will take precedence over outside hours logic since   */
 /* the billing will be for both inside and outside hours of        */
 /* service.                                                        */
 /* --------------------------------------------------------------- */
 /*******************************************************************/
  IF TEST_SW
    THEN DO;
      DIAG_TEXT = MODULE||': IN THE ONSITE FUNCTION! -----------------';
      CALL WRITE_TO_OPER;
      DIAG_TEXT = MODULE||': FONSITE '||AEQCOMM.FONSITE ||
                        ' CMIBOCE '||AEQCOMM.CMIBOCE ||
                        ' SERV TYPE ' ||AEQCOMM.ISERVTYP;
      CALL WRITE_TO_OPER;
    END;

  SELECT;
                                       /* PD/PSI branch             */
    WHEN (AEQCOMM.FONSITE   = 'N' & PDPSI_OFFICE  )
      DO;
        RETURN('0'B);                  /* not onsite                */
      END;
                                       /* activity by depot branch  */
    /* ------------------------------------------------------------ */
    /*  RQ4649 : QLX will no longer be Depot like service provider  */ 
    /* ------------------------------------------------------------ */
    WHEN (AEQCOMM.FONSITE   = 'N' & 
          ( AEQCOMM.ISOURCE ^= '' & AEQCOMM.ISOURCE ^= 'QLX') )
      DO;
        RETURN('0'B);                  /* not onsite                */
      END;

     /* ----------------------------------------------------------- */
     /* The service does not allow onsite and entitlement source is */
     /* CEDB and type of service is X                     4NSC      */
     /* Added CNONRATE cond there for RQ057017            5NSM      */
     /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.FONSITE  = 'N'   & AEQCOMM.IENTSRC = 'CDB'   &
         (AEQCOMM.ISERVTYP = 'EZS' | AEQCOMM.ISERVTYP = 'DPT') &
          (AEQCOMM.CCOTYPE = '' | PRICE.CNONRATE = 'Y'))
      DO;
      /*  use the billing flags from CEDB                */
      /*  AEQCOMM.FBILACTH         = 'Y'*/
      /*  AEQCOMM.FBILTRVH         = 'Y'*/
      /*  AEQCOMM.FBILPART         = 'N'*/
      /*  AEQCOMM.FBILDIST         = 'Y'*/
      /*  AEQCOMM.FBILEXP          = 'Y'*/

        CALL ASSIGN_BILL_DECISION(BILL,'NOT OS - EZS - 47 ',
                                                     '- ONSITE');
        RETURN('1'B);
     END;

     /* ----------------------------------------------------------- */
     /* Onsite is turned off and it's a SC 08 for all BA's     4NSC */
     /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.FONSITE   = 'N' & AEQCOMM.S0CSVC = '08')
      DO;
        AEQCOMM.FBILACTH         = 'Y';
        AEQCOMM.FBILTRVH         = 'Y';
        AEQCOMM.FBILPART         = 'N';
        AEQCOMM.FBILDIST         = 'Y';
        AEQCOMM.FBILEXP          = 'Y';

        CALL ASSIGN_BILL_DECISION(BILL,'SC 08 - 48 ','- ONSITE');
        RETURN('1'B);
      END;

     /* ----------------------------------------------------------- */
     /* Onsite is turned off and it's a SC 01 and BA is a 3         */
     /* and AC is not 10 or 11.                              4NSC   */
     /* Added CNONRATE=y for non std rate code.              5NMS   */
     /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.FONSITE   = 'N'  & AEQCOMM.S0CSVC  = '01' &
          ^(AEQCOMM.S0CHACT = '10' | AEQCOMM.S0CHACT = '11')&
           AEQCOMM.S0CBIOSA = '3'  & 
          (AEQCOMM.CCOTYPE = '' | PRICE.CNONRATE = 'Y'))
      DO;
        AEQCOMM.FBILACTH         = 'Y';
        AEQCOMM.FBILTRVH         = 'Y';
        AEQCOMM.FBILPART         = 'N';
        AEQCOMM.FBILDIST         = 'Y';
        AEQCOMM.FBILEXP          = 'Y';

        CALL ASSIGN_BILL_DECISION(BILL,'SC 01 BA 3 - 49 ','- ONSITE');
        RETURN('1'B);
     END;

     /* ----------------------------------------------------------- */
     /* Onsite is turned off and it's a SC 01 for all BA's and      */
     /* AC is blank.                                        4NSC    */
     /* Added non std rate code cond CNONRATE = Y  RQ057017 5NSM    */
     /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.FONSITE = 'N' & AEQCOMM.S0CSVC    = '01' &
          AEQCOMM.S0CHACT = ''  & 
          (AEQCOMM.CCOTYPE = '' | PRICE.CNONRATE = 'Y'))
      DO;
        AEQCOMM.FBILACTH         = 'Y';
        AEQCOMM.FBILTRVH         = 'Y';
        AEQCOMM.FBILPART         = 'N';
        AEQCOMM.FBILDIST         = 'Y';
        AEQCOMM.FBILEXP          = 'Y';

        CALL ASSIGN_BILL_DECISION(BILL,'SC01 NOT OS - 50 ',
                                                 '- ONSITE');
        RETURN('1'B);
     END;

    OTHERWISE
         RETURN('0'B);                 /* continue to process      */
   END;                                /* end of select            */

 END ONSITE;

 %PAGE;
  CHECK_SELECT_CONDITIONS: PROC REORDER;
 /*******************************************************************/
 /* TEST CONDITIONS FOR WHICH WE AVOID BILLING LOGIC...             */
 /* (CHECKED REGARDLESS OF CE'S RESPONSE TO QSAR B/A CODE)          */
 /*******************************************************************/
 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||
                     ': IN THE CHECK_SELECT_CONDITIONS PROCEDURE! -';
     CALL WRITE_TO_OPER;
   END;

 SELECT;

   /* ------------------------------------------------------------- */
   /* CHECK TO SEE IF ACTIVITY MEETS ANY GRACE CONDITIONS           */
   /* (SEE GRACE_PERIOD FOR DEFINITION OF GRACE)             4NSC   */
   /* ------------------------------------------------------------- */
  WHEN (FPARTOFOUTSIDEHRS                   &
        GRACE_PERIOD()   & NOBILLPART()     &
        NOBILLDISTANCE() & NOBILLEXPENSES() )
    DO;
      CALL ASSIGN_BILL_DECISION(NOBILL,'IN GRACE - 51 ',
                                         '- CHECK_SELECT_CONDITIONS');
      AEQCOMM.FBILACTH         = 'N';
      AEQCOMM.FBILTRVH         = 'N';
    END;
                                         /* ----------------------- */
                                         /* GP021333 - 3NSE         */
                                         /* ----------------------- */
   WHEN (AEQCOMM.S0CSVC   = '01'  &      /* WHEN SERVICE CODE =  01&*/
        (AEQCOMM.S0CHACT  = '' |         /* ACTIVITY CODE IS BLANK |*/
         AEQCOMM.S0CHACT  = '10') &      /* ACTIVITY CODE 10       &*/
         AEQCOMM.M_MPI    = 'Y'   &      /* ON MPI                 &*/
         SUBSTR(AEQCOMM.GJCSTAT,1,1) = '1'& /* RENT/LEASE          &*/
         AEQCOMM.S0CBIOSA = '1' )        /* BILLABLE CODE = 1       */
     CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SC01 LEASE - 52 ',
                                      '- CHECK_SELECT_CONDITIONS');

                                         /* ----------------------- */
                                         /* GP021333 - 3NSE         */
                                         /* ----------------------- */
   WHEN (AEQCOMM.S0CSVC   = '01'  &      /* WHEN SERVICE CODE =  01&*/
         AEQCOMM.S0CHACT  = '10'  &      /* ACTIVITY CODE = 10     &*/
         AEQCOMM.M_MPI    = 'N'   &      /* NOT ON MPI             &*/
         AEQCOMM.S0CBIOSA = '1'   &      /* BILLABLE CODE = 1      &*/
         ^AEQCOMM.GJFDSI)                /* NOT ON DSI              */
     CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SC01 AC10 - 53 ',
                     '- CHECK_SELECT_CONDITIONS');

                                         /* ----------------------- */
                                         /* GP021333 - 3NSE         */
                                         /* ----------------------- */
   WHEN (AEQCOMM.S0CSVC   = '20'  &      /* WHEN SERVICE CODE = 20 &*/
         AEQCOMM.M_MPI    = 'Y'   &      /* ON MPI                 &*/
         AEQCOMM.S0CBIOSA = '3'   &      /* BILLABLE CODE = 3      &*/
         AEQCOMM.S0CIDM   = '2')         /* IDM = 2                 */
    CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SC20 BA3 - 54 ',
                    '- CHECK_SELECT_CONDITIONS');

  /* -------------------------------------------------------------- */
  /*                                        ----------------------- */
  /* DELETED IN 4NSC                        GP021333 - 3NSE         */
  /*                                        ----------------------- */
  /* WHEN (AEQCOMM.S0CSVC   = '36'  &       WHEN SERVICE CODE = 36 &*/
  /*       AEQCOMM.S0CHACT  = '22'  &       ACTIVITY CODE = 22     &*/
  /*       AEQCOMM.M_MPI    = 'Y'   &       ON MPI                 &*/
  /*       AEQCOMM.S0CBIOSA = '4')          BILLABLE CODE = 4       */
  /*   CALL ASSIGN_BILL_DECISION(NOBILL,'  ')                       */
  /* -------------------------------------------------------------- */

  /* -------------------------------------------------------------- */
  /*                                        ----------------------- */
  /* DELETED IN 4NSC                        GP021333 - 3NSE         */
  /*                                        ----------------------- */
  /* WHEN (AEQCOMM.S0CSVC   = '36'  &       WHEN SERVICE CODE = 36 &*/
  /*       AEQCOMM.S0CHACT  = '22'  &       ACTIVITY CODE = 22     &*/
  /*       AEQCOMM.S0CBIOSA = '4'   &       BILLABLE CODE = 4      &*/
  /*                                        (NOT ON INVENTORY)      */
  /*       AEQCOMM.M_MPI    = 'N'   &       NOT ON MPI             &*/
  /*       ^AEQCOMM.GJFDSI)                 NOT ON DSI              */
  /*   CALL ASSIGN_BILL_DECISION(NOBILL,'  ')                       */
  /* -------------------------------------------------------------- */

  /* -------------------------------------------------------------- */
  /* REMOVE GP021333 - 3NSE                                         */
  /*  WHEN (AEQCOMM.S0CBIOSA = '1' &        POTENTIALLY BILLABLE    */
  /*      (AEQCOMM.FWARRNTY           |     MACHINE UNDER WARRANTY  */
  /*        (AEQCOMM.FONWARNTY = 'Y' |      MACHINE UNDER WARRANTY  */
  /*         SUBSTR(AEQCOMM.GJCSTAT,1,1) = '2') &  MACHINE ON MA    */
  /*           AEQCOMM.S0CSVC ^= '20' &     SC 20, 36, 94           */
  /*            AEQCOMM.S0CSVC ^= '36' &                            */
  /*             AEQCOMM.S0CSVC ^= '94')                            */
  /*    CALL ASSIGN_BILL_DECISION(NOBILL,'  ')                      */
  /* -------------------------------------------------------------- */

  /* -------------------------------------------------------------- */
  /* REMOVE GP021333 - 3NSE                                         */
  /* WHEN (AEQCOMM.CMIBOMKT = 'JEQ' )       MARKETING B/O = JEQ     */
  /*   CALL ASSIGN_BILL_DECISION(NOBILL,'  ')                       */
  /* -------------------------------------------------------------- */

  /* -------------------------------------------------------------- */
  /* REMOVE GP021333 - 3NSE                                         */
  /*  WHEN (AEQCOMM.GJCSTAT = '32'          F&F MACHINE, BUT...     */
  /*      & ^AEQCOMM.GJF30PCT)              MUST SEND 30%ERS TO RES */
  /*    CALL ASSIGN_BILL_DECISION(NOBILL,'  ')                      */
  /* -------------------------------------------------------------- */
  /* commented out RQ4527                                           */
  /* -------------------------------------------------------------- */
  /* WHEN (AEQCOMM.S0CSVC = '94' )           SOFTWARE WORK          */
  /*     DO;                                                        */
  /*       CALL ASSIGN_BILL_DECISION(NOBILL,'SC94 - 51 ',           */
  /*                '- CHECK_SELECT_CONDITIONS');                   */
         /* ------------------------------------------------------- */
         /* commented out in 4nsc                                   */
         /* ------------------------------------------------------- */
         /*   SELECT (SUBSTR(AEQCOMM.S0CHACT,2,1))                  */
         /*    WHEN ('4')                   AC 94 WITH ACTIVITY CODE*/
         /*      DO                        *4 ARE HSI BILLABLE      */
         /*        CALL ASSIGN_BILL_DECISION(BILL,'  ')             */
         /*        IF TEST_SW                                       */
         /*          THEN DO                                        */
         /*            DIAG_TEXT = 'QBBIL1: 3 before reset biosa '||*/
         /*                      AEQCOMM.S0CBIOSA                   */
         /*            CALL WTO                                     */
         /*          END                                            */
         /*         NO SAVING OF BA TO  CEBBILL ????                */
         /*        AEQCOMM.S0CBIOSA    = '3'                        */
         /*      END                                                */
         /*    OTHERWISE                    DEFAULT TO NOT BILLABLE */
         /*       CALL ASSIGN_BILL_DECISION(NOBILL,'  ')            */
         /*  END */
   /*     END;                                                      */

  /* -------------------------------------------------------------- */
  /*  WHEN (AEQCOMM.S0CSVC = '08'            IF THIS SC 08 QSAR WAS */
  /*       & AEQCOMM.FSPWN08 = '1'B)         SPAWNED BY THE SYSTEM  */
  /*    CALL ASSIGN_BILL_DECISION(NOBILL,'  ')                      */
  /* -------------------------------------------------------------- */

  /* -------------------------------------------------------------- */
  /*  WHEN (AEQCOMM.S0CBIOSA = '7' &       BILL FOR PARTS (NO LABOR)*/
  /*            AEQCOMM.S0CSVC = '01')     (3NSE)                   */
  /*    XCOMM.BILL_DECISION = BILL          SR1084                  */
  /*    CALL ASSIGN_BILL_DECISION(BILL,'  ')                        */
  /* -------------------------------------------------------------- */

  /* -------------------------------------------------------------- */
  /* 4NSC    Commented out                                          */
  /* -------------------------------------------------------------- */
  /********************rcq1882 changes start here*****************/ 
    WHEN (AEQCOMM.GJCSDT ^= ' '      /*    FITS GP0619035151      */
       & AEQCOMM.CBILLABOR = 'N'     /*When non-blank SDT, at     */
       & AEQCOMM.CBILLEXP  = 'N')    /*least one flag must be 'Y' */
            /*  CBILLPART is not included in this check because   */
            /*  parts are not billed when an SDT exists.          */
    CALL ASSIGN_BILL_DECISION(NOBILL,'',
                                      '- CHECK_SELECT_CONDITIONS');

  /********************rcq1882 changes end here********************/

  /* -------------------------------------------------------------- */
  /* WHEN (AEQCOMM.S0CSVC    = '08'        Pre 3NSE code            */
  /*      & AEQCOMM.S0IMACSE = 'XXXXXXX')                           */
  /*   XCOMM.BILL_DECISION   = NOBILL         BALANCE TO AEOUT)     */
  /*                                       I100019,S95000147        */
  /* -------------------------------------------------------------- */

   /* ------------------------------------------------------------- */
   /* SDT  indicates that the QSAR may not be billed.               */
   /* MN16942409 - CCOTYPE check added to allow incident fee to     */
   /* take precedence over SDT.                                     */
   /* ------------------------------------------------------------- */
   WHEN (AEQCOMM.GJCSDT  ^= ''     /* SDT                           */
        & AEQCOMM.CCOTYPE = ''     /* Incident fee                  */
        & ^SDT_BILLABLE() )        /* Function Call Is SDT billable */
     CALL ASSIGN_BILL_DECISION(NOBILL,'SDT NOBILL - 55 ',
                                        '- CHECK_SELECT_CONDITIONS');

   WHEN (AEQCOMM.GJFDSI                  /*  DSI RECORD - WARRANTY  */
        & AEQCOMM.FWARRNTY
        & AEQCOMM.GJCSDT = ''            /*                         */
        & (AEQCOMM.S0CBIOSA = ''         /*  LET SYSTEM DETERMINE   */
         | AEQCOMM.S0CBIOSA = '4'))      /*  CE SAYS 'NOT BILLABLE' */
     CALL ASSIGN_BILL_DECISION(NOBILL,'DSIWARR - 56 ',
             '- CHECK_SELECT_CONDITIONS');

   WHEN (AEQCOMM.S0CSVC = '08'  &        /*                         */
         (AEQCOMM.S0IMACSE = 'XXXXXXX'|  /*                         */
          AEQCOMM.S0IMACSE = '00XXXXX' | /*  GP021333 - 3NSE        */
          AEQCOMM.S0IMACSE = 'XXXXX'))   /*                         */
     CALL ASSIGN_BILL_DECISION(NOT_ELIGIBLE,'SNXXXX - 57 ',
                '- CHECK_SELECT_CONDITIONS');

   WHEN (AEQCOMM.S0ICSS ^= ''            /* CONTRACT NUMBER PRESENT,*/
         & ^AEQCOMM.FIBM                 /* USE CONTRACT BILL       */
             & ^AEQCOMM.FISSCNTR)        /* DECISION LOGIC          */
                         /* changed switch from FISSCADV to FISSCNTR*/
     CALL CONTRACT_BILL_DECISION_LOGIC;  /*                         */

                                         /* LEAVE IN FOR NSDC QSARS */
   OTHERWISE                             /* NOT A "NO BILL" CASE    */
      CALL ASSIGN_BILL_DECISION(' ','- 58 ',
                 '- CHECK_SELECT_CONDITIONS');

  END;  /* end of select */

 END CHECK_SELECT_CONDITIONS;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /*-----------------------------------------------------------------*/
 CONTRACT_BILL_DECISION_LOGIC: PROC;
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CONTRACT BILL DECISION PROCEDURE';
       CALL WRITE_TO_OPER;
     END;

   SELECT;
     WHEN (CONTR_PREFIX = 'TSS' &      /* FOR ALL SERVICE CODES,DO  */
            (CONTR_SUFFIX >= 1 &       /* NOT ACCEPT RECORDS INTO   */
              CONTR_SUFFIX <= 4999) &  /* HSI WITH CONTRACTS BETWEEN*/
         VERIFY(CONTR_SUFFIX,'0123456789') = 0)
       CALL ASSIGN_BILL_DECISION(NOBILL,'TSS - 59 ',
                      '- CONTRACT_BILL_DECISION_LOGIC');

     WHEN (/* INDEX(AEQCOMM.S0ICSS,'C1090')  = 1 | */
           /*INDEX(AEQCOMM.S0ICSS,'YXXKB')  = 1 |  */
           INDEX(AEQCOMM.S0ICSS,'C62GM')= 1 |
           INDEX(AEQCOMM.S0ICSS,'SC03M0Y')= 1 |
           INDEX(AEQCOMM.S0ICSS,'B36402') = 1 |
           INDEX(AEQCOMM.S0ICSS,'M77016') = 1 |
           INDEX(AEQCOMM.S0ICSS,'M86305') = 1 |
           INDEX(AEQCOMM.S0ICSS,'ADP99')  = 1)
       CALL ASSIGN_BILL_DECISION(NOBILL,'CONTR - 60 ',
                 '- CONTRACT_BILL_DECISION_LOGIC');

     WHEN (INDEX(AEQCOMM.S0ICSS,'QMSWARR')  = 1)
       CALL ASSIGN_BILL_DECISION(NOBILL,'QMSWARR - 61 ',
                       '- CONTRACT_BILL_DECISION_LOGIC');

     WHEN (AEQCOMM.S0CSVC = '01' |
            AEQCOMM.S0CSVC = '08' |
             AEQCOMM.S0CSVC = '33' |
               (AEQCOMM.S0CSVC = '36' &
                (AEQCOMM.S0CHACT = '24' |
                 AEQCOMM.S0CHACT = '25')))
       DO;
         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||':  EB CONTR '||AEQCOMM.FEBCONT;
             CALL WRITE_TO_OPER;
           END;
         /* --------------------------------------------------- */
         /*  IF AEQCOMM.FEBCONT                removed 4nsc     */
         /*    THEN                                             */
         /*      SELECT(AEQCOMM.S0CBIOSA)                       */
         /*        WHEN(' ','1','4')                            */
         /*          CALL ASSIGN_BILL_DECISION(NOBILL,'  ')     */
         /*                                                     */
         /*        OTHERWISE                                    */
         /*      END                                            */
         /*      ELSE                                           */
         /* --------------------------------------------------- */
         /* IF AEQCOMM.S0CBIOSA = ' '                           */
         /*    THEN CALL ASSIGN_BILL_DECISION(NOBILL,'  ',      */
         /*                  '- CONTRACT_BILL_DECISION_LOGIC')  */
         /* --------------------------------------------------- */
       END;

     WHEN (AEQCOMM.S0CSVC = '20')
       DO;

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': EB CONTR '||AEQCOMM.FEBCONT;
             CALL WRITE_TO_OPER;
           END;
           /* IF AEQCOMM.FEDCONT     THEN      removed 4nsc     */
           /* ELSE                                              */
         SELECT(AEQCOMM.S0CBIOSA);
           WHEN (' ','4')
             CALL ASSIGN_BILL_DECISION(NOBILL,'SC20 - 62 ',
                             '- CONTRACT_BILL_DECISION_LOGIC');

           OTHERWISE;
         END;   /* end of select */
       END;
     OTHERWISE;
   END;

 END CONTRACT_BILL_DECISION_LOGIC;

 %PAGE;
 PART_OF_OUTSIDE_HOURS: PROC() RETURNS(BIT(1));
 /*******************************************************************/
 /* These are special conditions that do not need to go through the */
 /* outside hours process                                           */
 /*******************************************************************/
  SELECT;
    WHEN ( CANADA )        
      RETURN('0'B);       
     /* ----------------------------------------------------------- */
     /* There are no hours that would make this part of the outside */
     /* hours processing                                      4NSC  */
     /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.S0QSVCHR = '' &
          (AEQCOMM.S0QTRAHR = ''| AEQCOMM.S0QTRAHR = '000'))
      DO;
        IF TEST_SW
          THEN CALL PRINT_NOT_PARTOF_OH('01');
        AEQCOMM.FBILACTH = 'N';
        AEQCOMM.FBILTRVH = 'N';
        RETURN('0'B);
      END;

     /* ----------------------------------------------------------- */
     /* it is a PD/PSI branch office                                */
     /* ----------------------------------------------------------- */
    WHEN ( PDPSI_OFFICE )
      DO;

        IF TEST_SW
          THEN CALL PRINT_NOT_PARTOF_OH('02');
        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        RETURN('0'B);
      END;

     /* ----------------------------------------------------------- */
     /* it is a remote service branch office (SQL/ACR)              */
     /* Solectron/Wistron                                           */
     /*RQ4649: QLX will behave as Onsite branch & no longer will be */
     /*         Depot like SQL/ACR                                  */
     /*BAR: BAR to flow like QLX                                    */
     /* ----------------------------------------------------------- */
    WHEN (AEQCOMM.ISOURCE ^= '' & AEQCOMM.ISOURCE ^= 'QLX' &
          AEQCOMM.ISOURCE ^= 'BAR')
      DO;
        IF TEST_SW
          THEN CALL PRINT_NOT_PARTOF_OH('03');
        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        RETURN('0'B);
      END;

   /* ------------------------------------------------------------- */
   /* If Service Code is 20 and IDM is 1, 2, or 5              4NSC */
   /* see alwaysbill and neverbill procs on SC 20                   */
   /* ------------------------------------------------------------- */

    WHEN  (AEQCOMM.S0CSVC  = '20' &
          (AEQCOMM.S0CIDM  = '1'  | AEQCOMM.S0CIDM     = '2' |
           AEQCOMM.S0CIDM  = '5'))
      DO;
        IF TEST_SW
          THEN CALL PRINT_NOT_PARTOF_OH('04');
        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        AEQCOMM.FBILPART = 'Y';
        AEQCOMM.FBILDIST = 'Y';
        AEQCOMM.FBILEXP  = 'Y';
        RETURN('0'B);
      END;
   /* ------------------------------------------------------------- */
   /* SC 20/33/36 are not part of outside hours logic               */
   /* ------------------------------------------------------------- */
    WHEN (AEQCOMM.S0CSVC = '20' |
          AEQCOMM.S0CSVC = '33' |
          AEQCOMM.S0CSVC = '36'        )
      DO;
        IF TEST_SW
          THEN CALL PRINT_NOT_PARTOF_OH('05');
        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        AEQCOMM.FBILPART = 'Y';
        AEQCOMM.FBILDIST = 'Y';
        AEQCOMM.FBILEXP  = 'Y';

        RETURN('0'B);
      END;

   /* ------------------------------------------------------------- */
   /* TSS Alliance contracts do not need to use outside hours       */
   /* processing checked for                                   4NSC */
   /* ------------------------------------------------------------- */
    WHEN (AEQCOMM.IENTSRC  = 'TSS')
      DO;
        IF TEST_SW
          THEN CALL PRINT_NOT_PARTOF_OH('06');

        AEQCOMM.FBILACTH = 'Y';
        AEQCOMM.FBILTRVH = 'Y';
        AEQCOMM.FBILPART = 'Y';
        AEQCOMM.FBILDIST = 'Y';
        AEQCOMM.FBILEXP  = 'Y';

        RETURN('0'B);
      END;
 /*-----------------------------------------------------------------*/
 /* you have determined above and exited if it was PD/PSI branch or */
 /* serviced by a depot. The following assumes this is an onsite SSR*/
 /* that is performing the service.                                 */
 /*-----------------------------------------------------------------*/
 /*   WHEN (AEQCOMM.IENTSRC  = 'CDB' &                              */
 /*        (AEQCOMM.ISERVTYP = 'EZS' | AEQCOMM.ISERVTYP = 'DPT')  ) */
 /*     DO                                                          */
 /*       IF TEST_SW                                                */
 /*         THEN CALL PRINT_NOT_PARTOF_OH('07')                     */
 /* PCR 012 - 4NSC                                                  */
 /* DO NOT USE THE START/STOP TIMES FROM CEDB, USE DEFAULT 800-1700 */
 /* USE BILLING FLAG SETTING FROM CEDB LOOKUP                       */
      /*  AEQCOMM.FBILACTH = 'Y'  */
      /*  AEQCOMM.FBILTRVH = 'Y'  */
      /*  AEQCOMM.FBILPART = 'Y'  */
      /*  AEQCOMM.FBILDIST = 'Y'  */
      /*  AEQCOMM.FBILEXP  = 'Y'  */

 /*       RETURN('0'B)                                              */
 /*     END                                                         */

   /* ------------------------------------------------------------- */
   /* if incident fee is UOS, blank out if FONSITE is Y, if UOR     */
   /* blank out if QOUTHRS is zero (0)                              */
   /* ------------------------------------------------------------- */
   /* WHEN (AEQCOMM.CCOTYPE ^= '' &     COMMENTED OUT 3/24/04       */
   /*       PRICE.QOUTHRS = 0       &                               */
   /*       AEQCOMM.FONSITE = 'Y')                                  */
   /*   DO                                                          */
   /*     IF TEST_SW                                                */
   /*       THEN CALL PRINT_NOT_PARTOF_OH('06')                     */
   /*                                                               */
   /*     AEQCOMM.FBILACTH = 'N'                                    */
   /*     AEQCOMM.FBILTRVH = 'N'                                    */
   /*     AEQCOMM.CCOTYPE  = ''                                     */
   /*     IF TEST_SW                                                */
   /*       THEN DO                                                 */
   /*         DIAG_TEXT = 'QBBIL1: 1 BLANK OUT SPECIAL CHARGE'      */
   /*         CALL WRITE_TO_OPER                                    */
   /*       END                                                     */
   /*     RETURN('1'B)                                              */
   /*   END                                                         */

    OTHERWISE
      DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||': DEFAULT NOT PART OF OH HRS ';
            CALL WRITE_TO_OPER ;
          END;
        RETURN('1'B);                  /* CONTINUE TO PROCESS      */
      END;
   END;                                /* end of select            */

  END PART_OF_OUTSIDE_HOURS;

 %PAGE;
 SDT_BILLABLE: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* FUNCTION                                                        */
 /* RETURNS BOOLEAN:                                                */
 /*   '1' IF determined to be billable                              */
 /*   '0' IF determined to be not billable                          */
 /*                                                                 */
 /* Note: all the looks up to the SDT table have been moved to QSAR */
 /* processing (AESDTR).                                            */
 /*******************************************************************/
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': SDT BILLABLE PROCEDURE, SDT = '||
                    AEQCOMM.GJCSDT||' SERVICE TYPE = '     ||
                    AEQCOMM.ISERVTYP;
       CALL WRITE_TO_OPER;
     END;
 
 /****************changes for rcq1882 start*************************/
 /* -------------------------------------------------------------- */
 /* CHECK FOR ACTUAL HOURS BEING BLANK                             */
  IF AEQCOMM.S0QSVCHR = '   ' THEN
     PICACT  = 0;
  ELSE
     PICACT  = AEQCOMM.S0QSVCHR;

 /*- CHECK FOR TRAVEL HOURS BEING BLANK -                          */
  IF AEQCOMM.S0QTRAHR = '   ' THEN
     PICTRVL = 0;
  ELSE
     PICTRVL = AEQCOMM.S0QTRAHR;

 /*   CHECK FOR STOP TIME BEING BLANK                              */
  IF AEQCOMM.S0QSTOTI = '   ' THEN
     PICSTOP = AEQCOMM.S0QSTOTI;
  ELSE
     PICSTOP = AEQCOMM.S0QSTOTI;

  IF TEST_SW
    THEN DO;
      DIAG_TEXT = 'QBBIL1: ACT HR '|| PICACT||' '||
                  ' TRAV HR ' ||' '|| PICTRVL||' '||
                  ' STOP TIME'||' '|| PICSTOP;
      CALL WRITE_TO_OPER;
    END;

  PICTEMP = PICSTOP - PICACT - PICTRVL;
  DCL 1 PICOVLY BASED (ADDR(PICTEMP)),
        3 PIC2A   PIC'99',
        3 PIC2B   PIC'99';

  PICTEMP = PICTEMP * 10;
  PIC2B   = (PIC2B/100)*60;

  DCL 1 OVLYSTO BASED (ADDR(PICSTOP)),
        3 OVR2A   PIC'99',
        3 OVR2B   PIC'99';
  PICSTOP = PICSTOP*10;
  OVR2B   = (OVR2B/100)*60;
 /* --------------------------------------------------------------- */
 /*****************changes for rcq1882 end***************************/
                                         /* FOR EZS SDTS ONLY THING */
                                         /* BILLABLE IS S/C 36 AND  */
                                         /* ACTIVITY CODE NOT 24|25 */
                                         /* ----------------------- */
      IF PHASE_ARRAY(CURR_PHASE).TWARSVC = 'EZS' /*   4NSC          */
            THEN SELECT;
            WHEN (AEQCOMM.S0CSVC ^= '36') RETURN('0'B);
            WHEN (AEQCOMM.S0CSVC  = '36' &
            (AEQCOMM.S0CHACT = '24' | AEQCOMM.S0CHACT = '25'))
                                         RETURN ('0'B);
            OTHERWISE DO;                /* Do BAU billing          */
              AEQCOMM.GJCSDT = '';
              AEQCOMM.CSDTBILL = '';     /* 4NSC                    */
              RETURN('1'B);
            END;
          END;               /* END OF SELECT                       */

   IF AEQCOMM.S0CBIOSA = '1' |
      AEQCOMM.S0CBIOSA = '3'
     THEN RETURN('1'B);

                                        /* ------------------------ */
                                        /* IF WARRANTY IS 24 X 7    */
                                        /* AND THE SDT DOES NOT HAVE*/
                                        /* ONSITE SERVICE AVAILABLE */
   IF AEQCOMM.FWAR24X7      /* 4NSC */  /* ------------------------ */
      THEN IF PHASE_ARRAY(CURR_PHASE).CSDTBILL = ''      /* 4NSC    */
                  THEN RETURN('0'B);
            ELSE RETURN('1'B);           /* POSSIBLE UPGRADE CHARGE */

  IF TEST_SW                                           
    THEN DO;                                           
      DIAG_TEXT = MODULE||': NOT SDT 24 X 7' ||' ' ||  
                  PICTEMP||' '||PICSTOP;               
      CALL WRITE_TO_OPER;                              
      DIAG_TEXT = MODULE||': EXIT SDT BILLABLE';       
      CALL WRITE_TO_OPER;                              
    END;                                               
                                                       
   RETURN('1'B);  /* THIS IS NOT SDT BILLABLE  */

 END SDT_BILLABLE;

 %PAGE;
 /**************************rcq1882 changes start here***************/
 WARR_24X7: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* FUNCTION                                                        */
 /* RETURNS BOOLEAN:                                                */
 /*   '1' IF                                                        */
 /*   '0' IF                                                        */
 /*                                                                 */
 /*******************************************************************/
 
   DCL W24X7        BIT(1)  INIT('1'B);
   DCL K      FIXED BIN(15) INIT(0);

   DO K = 1 TO 7  WHILE (W24X7);
     IF START_TIME(K) = '0000'
        &  END_TIME(K) = '2359'
       THEN W24X7 = '1'B;
       ELSE W24X7 = '0'B; 
   END;
   
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': WARR 24X7 PROC - 24x7? '||W24X7;
       CALL WRITE_TO_OPER;
     END;  

   IF W24X7
     THEN RETURN('1'B);
     ELSE RETURN('0'B);

 END WARR_24X7;
 /**********************rcq1882 changes end here********************/
 %PAGE;
 NOBILLACTUAL: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* The purpose is to check the to see if actual hours are to be    */
 /* billed.                                                         */
 /*                                                                 */
 /* If the switch is turned off or it is turned on and there are no */
 /* actual hours then it is a no bill condition.             4NSC   */
 /*******************************************************************/

   SELECT;
     WHEN (AEQCOMM.FBILACTH = 'N')   RETURN('1'B); /* NO BILL        */
     WHEN (AEQCOMM.FBILACTH = 'Y' & PIC_SVCHR = 0)
       DO;
         AEQCOMM.FBILACTH = 'N';
       /*  AEQCOMM.IENTSRC  = 'HSI' */
         RETURN('1'B);                             /* NO BILL        */
       END;
     
     WHEN (AEQCOMM.FBILACTH = 'I' & PIC_SVCHR = 0)
       DO;
         AEQCOMM.FBILACTH = 'N';
       /*  AEQCOMM.IENTSRC  = 'HSI' */
         RETURN('1'B);                             /* NO BILL       */
       END;

     WHEN (AEQCOMM.FBILACTH = 'O' & PIC_SVCHR = 0)
       DO;
         AEQCOMM.FBILACTH = 'N';
      /*   AEQCOMM.IENTSRC  = 'HSI'*/
         RETURN('1'B);                             /* NO BILL       */
       END;
     WHEN (AEQCOMM.FBILACTH = 'O' & PRICE.QOUTHRS = 0)
       DO;
         AEQCOMM.FBILACTH = 'N';
      /*   AEQCOMM.IENTSRC  = 'HSI'*/
         RETURN('1'B);                             /* NO BILL       */
       END;

     OTHERWISE RETURN('0'B);     /* THIS IS POSSIBLE BILL CONDITION */
   END;                          /* END OF SELECT                   */

 END NOBILLACTUAL;

 %PAGE;
 NOBILLTRAVEL: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* The purpose is to check the to see if Travel hours are to be    */
 /* billed.                                                         */
 /*                                                                 */
 /* If the switch is turned off or it is turned on and there are no */
 /* travel hours then it is a no bill condition.            4NSC    */
 /*******************************************************************/

   SELECT;
     WHEN (AEQCOMM.FBILTRVH = 'N')   RETURN('1'B); /* NO BILL       */
     WHEN (AEQCOMM.FBILTRVH = 'Y' & PIC_TRAHR = 0)
       DO;
         AEQCOMM.FBILTRVH = 'N';
         /* AEQCOMM.IENTSRC  = 'HSI' */
         RETURN('1'B);                              /* NO BILL      */
       END;

     WHEN (AEQCOMM.FBILTRVH = 'I' & PIC_TRAHR = 0)
       DO;
      /*   AEQCOMM.FBILTRVH = 'N'   */
      /*   AEQCOMM.IENTSRC = 'HSI'  */
         RETURN('1'B);                              /* NO BILL      */
       END;

     WHEN (AEQCOMM.FBILTRVH = 'O' & PIC_TRAHR = 0)
       DO;
         AEQCOMM.FBILTRVH = 'N';
      /*   AEQCOMM.IENTSRC = 'HSI'  */
         RETURN('1'B);                              /* NO BILL      */
       END;
     WHEN (AEQCOMM.FBILTRVH = 'O' & PRICE.QOUTHRS = 0)
       DO;
         AEQCOMM.FBILTRVH = 'N';
      /*   AEQCOMM.IENTSRC = 'HSI'  */
         RETURN('1'B);                              /* NO BILL       */
       END;
      OTHERWISE RETURN('0'B);    /* THIS IS POSSIBLE BILL CONDITION  */
   END;                          /* END OF SELECT                    */

 END NOBILLTRAVEL;

 %PAGE;
 NOBILLPART: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* The purpose is to check the to see if parts are to be billed    */
 /*                                                                 */
 /* If the switch is turned off or it is turned on and there are no */
 /* parts then it is a no bill condition.                  4NSC     */
 /*******************************************************************/

   SELECT;
     WHEN (AEQCOMM.FBILPART = 'N')                   RETURN('1'B);

     WHEN (AEQCOMM.FBILPART = 'Y' & AEQCOMM.S0IPART(1) = '')
       DO;
         AEQCOMM.FBILPART = 'N';
      /*   AEQCOMM.IENTSRC  = 'HSI'  */
         RETURN('1'B);                              /* NO BILL       */
       END;

      OTHERWISE RETURN('0'B);    /* THIS IS POSSIBLE BILL CONDITION  */
   END;                          /* END OF SELECT                    */

 END NOBILLPART;

 %PAGE;
 NOBILLDISTANCE: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* The purpose is to check the to see if distance is to be billed  */
 /*                                                                 */
 /* If the switch is turned off or it is turned on and there is no  */
 /* distance value then it is a no bill condition.         4NSC     */
 /*******************************************************************/

   SELECT;
     WHEN (AEQCOMM.FBILDIST = 'N')                  RETURN('1'B);

     WHEN (AEQCOMM.FBILDIST = 'Y' & 
            (AEQCOMM.S0QTRAMI = ''| AEQCOMM.S0QTRAMI = '000'))
       DO;
         AEQCOMM.FBILDIST = 'N';
      /*   AEQCOMM.IENTSRC  = 'HSI' */
         RETURN('1'B);                              /* NO BILL       */
       END;

     OTHERWISE RETURN('0'B);     /* THIS IS POSSIBLE BILL CONDITION */
   END;                          /* END OF SELECT                   */

  END NOBILLDISTANCE;

 %PAGE;
 NOBILLEXPENSES: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* The purpose is to check the to see if expenses are to be billed */
 /*                                                                 */
 /* If the switch is turned off or it is turned on and there are no */
 /* expenses then it is a no bill condition.               4NSC     */
 /*******************************************************************/

   SELECT;
     WHEN (AEQCOMM.FBILEXP = 'N')                   RETURN('1'B);
     WHEN (AEQCOMM.FBILEXP = 'Y' & AEQCOMM.S0ATRAEX = '')
       DO;
         AEQCOMM.FBILEXP  = 'N';
     /*    AEQCOMM.IENTSRC  = 'HSI' */
         RETURN('1'B);                              /* NO BILL      */
       END;

     OTHERWISE RETURN('0'B);     /* THIS IS POSSIBLE BILL CONDITION */
   END;                          /* END OF SELECT                   */

 END NOBILLEXPENSES;

 %PAGE;
 GRACE_PERIOD: PROC()  RETURNS(BIT(1));
 /*******************************************************************/
 /* The purpose is to check the Grace period to determine if an     */
 /* invoice(Bill) needs to be generated.                     4NSC   */
 /*                                                                 */
 /* Grace is the period of time (currently 1/2 hour) before the     */
 /* inside hours begins or after the inside hours ends for the      */
 /* current day.                                                    */
 /* --------------------------------------------------------------- */
 /* Grace period determines if outside hours are to be billed or    */
 /* not. In the condition where all the outside hours are within    */
 /* the grace period time span, no bill is to be generated.         */
 /*                                                                 */
 /* The cases where grace period is used:                           */
 /* --------------------------------------------------------------- */
 /*        ACT | TVL                                                */
 /* Case 1  O  | O All Outside hours                                */
 /* Case 2  O  | N Only Actual Outside Hours are used               */
 /* Case 3  N  | O Only Travel Outside Hours are used               */
 /* Note: Special cases are OY, NY, YN, YO where there are no       */
 /*       inside hours( No need to handle at this time)             */
 /*                                                                 */
 /* AST  = Activity Start Time                                      */
 /* AET  = Activity End   Time                                      */
 /* IHST = Inside Hours Start Time                                  */
 /* IHET = Inside Hours End   Time                                  */
 /* --------------------------------------------------------------- */
 /* The conditions that come into play are:                         */
 /* --------------------------------------------------------------- */
 /* If it's not (Case 1 or  Case 2 Or Case 3)  (1) Not Grace RETURN */
 /* If No outside hours                        (2) Not Grace RETURN */
 /* If Outside hours are 2 *  Grace(both Sides)(3) Not Grace RETURN */
 /*                                                                 */
 /* --------------------------------------------------------------- */
 /* Check if it meets the grace condition for the inside start time */
 /* side and inside end time. This is a condition where the grace   */
 /* period is on both sides of inside hours.                        */
 /* =============================================================== */
 /* Activity start  Before Inside Start Time = AST - IHST           */
 /* Activity start  After  Inside End   Time = IHET - AST           */
 /* --------------------------------------------------------------- */
 /* If AST <= IHST & AST >= (IHST - Grace Period)       &           */
 /*    AET >= IHET & AET <= (IHET + Grace Period)    (4)   then     */
 /*                                                                 */
 /*  This record has met the grace condition (no Bill) Grace RETURN */
 /* --------------------------------------------------------------- */
 /* --------------------------------------------------------------- */
 /* Check if it meets the grace for the inside start time side and  */
 /* ends within the inside hours:                                   */
 /* =============================================================== */
 /* If AST <= IHST &  AST >= (IHST - Grace Period) &                */
 /*    AET <= IHET                                        (6)  THEN */
 /*                                                                 */
 /*  This record has met the grace condition (no Bill) Grace RETURN */
 /* --------------------------------------------------------------- */
 /* Check if it meets the grace for the inside stop time side and   */
 /* start within the inside hours:                                  */
 /* =============================================================== */
 /* If AET >= IHET &  AET <= (IHET + Grace Period)        &         */
 /*    AST >= IHST                                        (7)  THEN */
 /*                                                                 */
 /*  This record has met the grace condition (no Bill) Grace RETURN */
 /* --------------------------------------------------------------- */
 /*******************************************************************/

 /*******************************************************************/
 /* Example:                                                        */
 /* --------------------------------------------------------------- */
 /* IHST = 08.0                                                     */
 /* IHET = 17.0                                                     */
 /*                                                                 */
 /*    AST  |  AET |IHST -AST |AET -IHET | result      Rule         */
 /* --------|------|----------|----------|------------------------- */
 /* 1  07.5 | 08.0 | .5       |   -9.0   | Grace     (7) See Note 3 */
 /* 2  07.8 | 08.5 | .2       |   -8.5   | Grace     (7) See Note 3 */
 /* 3  07.8 | 17.2 | .2       |     .2   | Grace     (4) See Note 3 */
 /* 4  07.5 | 17.5 | .5       |     .5   | Grace     (4) See Note 3 */
 /* 5  16.0 | 17.5 | -8.0     |     .5   | Grace     (6) See Note 3 */
 /* 6  17.0 | 17.5 | -9.0     |     .5   | Grace     (6) See Note 3 */
 /* --------|------|----------|----------|------------------------- */
 /* 7  17.5 | 18.0 |  -9.5    |    1.0   | Not Grace (7) See Note 1 */
 /* 8  17.5 | 22.0 |  -9.5    |    5.0   | Not Grace (1) See Note 1 */
 /* 9  07.2 | 07.5 |   0.8    |   -8.7   | Not Grace (7) See Note 1 */
 /* 10 06.0 | 07.2 |   2.0    |   -9.8   | Not Grace (1) See Note 1 */
 /* 11 06.0 | 17.8 |   2.0    |    0.8   | Not Grace (1) See Note 1 */
 /* 12 08.0 | 17.0 |   0.0    |    0.0   | Not Grace (3) See Note 2 */
 /* 13 06.0 | 17.0 |   2.0    |    0.0   | Not Grace (1) See Note 1 */
 /* 14 08.0 | 17.6 |   0.0    |    0.6   | Not Grace (7) See Note 1 */
 /* 15 23.5 | 08.0 | -15.5    |   -9.0   | Not Grace (2) See Note 1 */
 /* 16 Not Condition 1 or Condition 2 or condition 3 (3) See Note 2 */
 /*                                                                 */
 /*      0.0 Grace                  Grace 24.0                      */
 /* ------ |---------------------------------                       */
 /*        |   .  INSIDE       INSIDE  .    |                       */
 /*        |   .  START TIME     END   .    |                       */
 /*        |   .    |             |    .    |                       */
 /* -------|---.----|-------------|----.--------------------------  */
 /* Test 1 |   .<-->|             |    .    | Grace - (6)(8) Note 3 */
 /* Test 2 |   . <--|--->         |    .    | Grace - (6)(8) Note 3 */
 /* Test 3 |   . <--|-------------|->  .    | Grace - (4)(5) Note 3 */
 /* Test 4 |   .<---|-------------|--->.    | Grace - (4)(5) Note 3 */
 /* Test 5 |   .    |          <--|--->.    | Grace - (7)(9) Note 3 */
 /* Test 6 |   .    |             |<-->.    | Grace - (7)(9) Note 3 */
 /* -------|---.----|-------------|----.--------------------------  */
 /* Test 7 |   .    |             |    .<>  | Not Grace (7) Note 1  */
 /* Test 7 |   .    |             |    .<-> | Not Grace (1) Note 1  */
 /* Test 8 | <>.    |             |    .    | Not Grace (7) Note 1  */
 /* Test 10|<->.    |             |    .    | Not Grace (1) Note 1  */
 /* Test 11|<--.----|-------------|----.->  | Not Grace (1) Note 1  */
 /* Test 12|   .    |<----------->|    .    | Not Grace (3) Note 2  */
 /* Test 13|<--.----|------------>|    .    | Not Grace (1) Note 1  */
 /* Test 14|        |<------------|----.--->| Not Grace (7) Note 1  */
 /* Test 15|--------|-------------|----.--->| Not Grace (2) Note 1  */
 /* Test 16|        |<------------|----.--->| Not Grace (3) Note 2  */
 /* --------------------------------------------------------------- */
 /* NOTE 1: The means that the record will continue to process      */
 /*         through the "Check Selection" logic to see if there is  */
 /*         a reason to not bill.                                   */
 /* NOTE 2: Because the grace check only applies to outside hours   */
 /*         if you are dealing with records that have a "Y" or "I"  */
 /*         for the actual or travel labor billing flags then       */
 /*         continue to process through the "Check Selection" logic */
 /*         to see if there is a reason to not bill.                */
 /* NOTE 3: No bill needs to be generated unless there is a         */
 /*         different reason, such as parts.                        */
 /*******************************************************************/
 /* QINSTART = Inside hours start Time    (IHST)   (From QBPRIC2)   */
 /* QINSTOP  = Inside Hours end   Time    (IHET)   (From QBPRIC2)   */
 /* HSTART   = Activity Start Time        (AST)    (From QBPRIC2)   */
 /* QSTOTI   = Stop time of the Activity  (AET)    (From QBPRIC2)   */
 /* QINHRS   = Total Inside  Hours                 (From QBPRIC2)   */
 /* QOUTHRS  = Total Outside Hours                 (From QBPRIC2)   */
 /* QTOTDAYS = Total Number of Days                (From QBPRIC2)   */
 /*******************************************************************/

 /*-----------------------------------------------------------------*/
 /* GRACE CHECKS                                                    */
 /*-----------------------------------------------------------------*/
   DCL FD5_ACTVTY_STOP  FIXED DEC(5,0) INIT (0);
   DCL GRACE            FIXED DEC(3,0) INIT (5);
   DCL GRACE_RULE             CHAR(2)  INIT('');
   DCL 1 HINSIDE(3),
         3 START        FIXED DEC(5,0),          /* HHT              */
         3 END          FIXED DEC(5,0);          /* HHT              */
   DCL I                FIXED BIN(15)  INIT (0);
   DCL J                FIXED BIN(15)  INIT (0);
   DCL TMP_QTOTDAYS     FIXED DEC(2,0) INIT (0);
   DCL TEMP_START       FIXED DEC(5,1) INIT (0);
   DCL TESTGRACE              CHAR(9)  INIT('');

   DCL IS_GRACE               BIT (1) INIT('0'B); /* BOOLEAN RESULT   */

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': grace period check ';
       CALL WRITE_TO_OPER;
     END;

   HINSIDE(*) = '';

   FD5_ACTVTY_STOP = PRICE.QSTOTI * 10 + 480; /* REMOVE THE DECIMAL*/
   TMP_QTOTDAYS = PRICE.QTOTDAYS;

  /* --------------------------------------------------------------- */
  /* Have an issue if the inside start is 0 hours and activity start */
  /* time is between 23:30 and midnight.  We have to use the inside  */
  /* start from the proper day.                                      */
  /* Since we only do the calc once we can adjust QTOTDAYS           */
  /* --------------------------------------------------------------- */
   /* move boundary check for the array      HSI_4nsc_050             */
   IF PRICE.HSTART >= 23.5 &
      /*(5-PRICE.QTOTDAYS> 4 & 5-PRICE.QTOTDAYS <0) &*/
      PRICE.QTOTDAYS > 1 & HINSIDE(5- PRICE.QTOTDAYS).START = 0 
    THEN TMP_QTOTDAYS = TMP_QTOTDAYS - 1;
      
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': After check for grace crossing 2 days';
       CALL WRITE_TO_OPER;
     END;
 /* ---------------------------------------------------------------- */
 /* Create a number line from day 1 to day 3 in the HINSIDE array.   */
 /* This means add 24 hrs to array position 2 and 48 hrs to array    */
 /* 3.  The stop time will have 48 hours added to align it with array*/
 /* position 3 (stop time is always in array position 3).  Everything*/
 /* is multiplied by 10 to get whole integers                        */
 /* ---------------------------------------------------------------- */

    DO I = 1 TO 3;
      HINSIDE.START(I) = (CONVERT_TO_TENTHS(PRICE(I).START)*10) +
                                                  ((I-1)*240);
      HINSIDE.END  (I) = (CONVERT_TO_TENTHS(PRICE(I).END) * 10) +
                                                  ((I-1)*240);
    END;
 /* ---------------------------------------------------------------- */
 /* adjust the activity start time to the correct position on the    */
 /* number line created above.  e.g.I f the total number of days is 1*/
 /* 2 days of hours have to be added to the activity start time.     */
 /* ---------------------------------------------------------------- */
   IF PRICE.QTOTDAYS   = 3
     THEN TEMP_START   = PRICE.HSTART * 10;
     ELSE IF PRICE.QTOTDAYS = 2
            THEN TEMP_START    = (PRICE.HSTART * 10) + 240;
            ELSE TEMP_START    = (PRICE.HSTART * 10) + 480;

   SELECT;
     WHEN (AEQCOMM.FBILACTH = 'Y' & AEQCOMM.FBILTRVH = 'Y' |
           AEQCOMM.FBILACTH = 'Y' & AEQCOMM.FBILTRVH = 'N' |
           AEQCOMM.FBILACTH = 'Y' & AEQCOMM.FBILTRVH = 'I' |
           AEQCOMM.FBILACTH = 'Y' & AEQCOMM.FBILTRVH = 'O' |
           AEQCOMM.FBILACTH = 'O' & AEQCOMM.FBILTRVH = 'Y' |
           AEQCOMM.FBILACTH = 'O' & AEQCOMM.FBILTRVH = 'I' |
           AEQCOMM.FBILACTH = 'I' & AEQCOMM.FBILTRVH = 'Y' |
           AEQCOMM.FBILACTH = 'I' & AEQCOMM.FBILTRVH = 'O' |
           AEQCOMM.FBILACTH = 'I' & AEQCOMM.FBILTRVH = 'I' |
           AEQCOMM.FBILACTH = 'I' & AEQCOMM.FBILTRVH = 'N' |
           AEQCOMM.FBILACTH = 'N' & AEQCOMM.FBILTRVH = 'N' |
           AEQCOMM.FBILACTH = 'N' & AEQCOMM.FBILTRVH = 'I' |
           AEQCOMM.FBILACTH = 'N' & AEQCOMM.FBILTRVH = 'Y' )
       DO;
         GRACE_RULE = '01';     /* not part of outside hours         */
         IS_GRACE   = '0'B;     /* not grace        (1)              */
       END;

     WHEN (PRICE.QOUTHRS  > 2 * GRACE)
       DO;
         GRACE_RULE = '03';     /* outside hours is > 2 * grace      */
         IS_GRACE   = '0'B;     /* not grace  (3)                    */
       END;

     WHEN (PRICE.QOUTHRS = 0)
       DO;
         AEQCOMM.FBILACTH = 'N';
         AEQCOMM.FBILTRVH = 'N';
         GRACE_RULE = '02';     /* no outside hours                  */
         IS_GRACE   = '1'B;     /* grace  (2)                        */
       END;

    /*------------------------------------------------------------ */
    /* Check to see if there a grace condition on both sides of    */
    /* the start and end time for inside hours                     */
    /*------------------------------------------------------------ */
    /*RESULT   |RU|ACT | TVL|STOP| TOTAL    |FG|    |    |#  |     */
    /*         |  |HRS | HRS|TIME| IN  | OUT|  |HST |QST |DY |     */
    /*--------------------------------------------------------     */
    /*YES-GRACE|04| 8.2| 1.2|17.2|  0.0| 0.4|OO| 7.8|17.2| 1 |     */
    /*YES-GRACE|04| 8.8| 1.2|17.5|  0.0| 1.0|OO| 7.5|17.5| 1 |     */
    /*YES-GRACE|04|14.5|10.0|17.2|  0.0| 0.5|OO|16.7|17.2| 2 |     */
    /*--------------------------------------------------------     */

    /* check boundary at inside start and inside end time */
     WHEN (TEMP_START >= HINSIDE(4-TMP_QTOTDAYS).START - GRACE &
           TEMP_START <= HINSIDE(4-TMP_QTOTDAYS).START &
           FD5_ACTVTY_STOP >= HINSIDE(3).END &
           FD5_ACTVTY_STOP <= HINSIDE(3).END + GRACE)
       DO;
         AEQCOMM.FBILACTH = 'N';
         AEQCOMM.FBILTRVH = 'N';

         GRACE_RULE = '04';     /* has outside hours on both sides  */
         IS_GRACE   = '1'B;     /* grace condition  (4)             */
       END;

    /* ------------------------------------------------------------ */
    /* Check to see if there a grace condition before the           */
    /* inside hours start time.   outside hours is <= .5            */
    /* there was a previous check for outside hrs > 2 * grace       */
    /*------------------------------------------------------------- */
    /*RESULT   |RU|ACT | TVL|STOP| TOTAL    |FG|    |    |#  |  */
    /*         |  |HRS | HRS|TIME| IN  | OUT|  |HST |QST |DY |  */
    /*--------------------------------------------------------  */
    /*YES-GRACE|06| 3.9| 0.0|11.5|  0.0| 0.4|OO| 7.6|11.5| 1 |  */
    /*YES-GRACE|06| 8.8| 0.0|16.5|  0.0| 0.3|OO| 7.7|16.5| 1 |  */
    /*YES-GRACE|06| 0.3| 0.0| 7.8|  0.0| 0.3|OO| 7.5| 7.8| 1 |  */
    /*YES-GRACE|06| 0.5| 0.0| 8.0|  0.0| 0.5|OO| 7.5| 8.0| 1 |  */
    /*YES-GRACE|06| 0.7| 0.0| 8.5|  0.0| 0.2|OO| 7.8| 8.5| 1 |  */
    /*YES-GRACE|06|24.0|23.4|10.7|  0.0| 0.2|OO|11.3|10.7| 3 |  */
    /*YES-GRACE|06|24.0|17.4|10.7|  0.0| 0.2|OO|17.3|10.7| 3 |  */
    /*--------------------------------------------------------  */

    /* check the boundary at the inside start time */
     WHEN (TEMP_START >= HINSIDE(4-TMP_QTOTDAYS).START - GRACE &
           TEMP_START <= HINSIDE(4-TMP_QTOTDAYS).START         &
           FD5_ACTVTY_STOP    <= HINSIDE(3).END                &
           PRICE.QOUTHRS * 10 <= GRACE)
       DO;
         AEQCOMM.FBILACTH = 'N';
         AEQCOMM.FBILTRVH = 'N';

         GRACE_RULE = '06';      /* Has outside hours on left side  */
         IS_GRACE   ='1'B;       /* grace condition  (6)            */
       END;

    /*------------------------------------------------------------- */
    /* Check to see if there a grace condition after the            */
    /* inside hours stop time.     outside hours is <= grace time   */
    /* there was a previous check for outside hrs > 2 * grace       */
    /*------------------------------------------------------------- */
    /*RESULT   |RU|ACT | TVL|STOP| TOTAL    |FG|    |    |#  |  */
    /*         |  |HRS | HRS|TIME| IN  | OUT|  |HST |QST |DY |  */
    /*--------------------------------------------------------  */
    /*YES-GRACE|07| 4.2| 0.0|17.2|  0.0| 0.2|OO|13.0|17.2| 1 |  */
    /*YES-GRACE|07| 0.3| 0.0|17.5|  0.0| 0.3|OO|17.2|17.5| 1 |  */
    /*YES-GRACE|07| 0.5| 1.0|17.5|  0.0| 0.5|OO|16.0|17.5| 1 |  */
    /*YES-GRACE|07| 0.5| 0.0|17.5|  0.0| 0.5|OO|17.0|17.5| 1 |  */
    /*--------------------------------------------------------  */

    /* check boundary at inside end time */
     WHEN (FD5_ACTVTY_STOP >=  HINSIDE(3).END                &
           FD5_ACTVTY_STOP <=  HINSIDE(3).END + GRACE        &
           TEMP_START      >=  HINSIDE(4-TMP_QTOTDAYS).START &
           PRICE.QOUTHRS * 10 <= GRACE)
       DO;
         AEQCOMM.FBILACTH = 'N';
         AEQCOMM.FBILTRVH = 'N';

         GRACE_RULE = '07';    /* has outside hours on  right side */
         IS_GRACE   ='1'B;     /*grace condition  (7)              */
       END;

    /*-------------------------------------------------------  */
    /*RESULT   |RU|ACT | TVL|STOP| TOTAL    |FG|    |    |# |  */
    /*         |  |HRS | HRS|TIME| IN  | OUT|  |HST |QST |DY|  */
    /*-------------------------------------------------------  */
    /*NOT-GRACE|11| 7.0| 0.0|14.0|  0.0| 1.0|OO| 7.0|14.0| 1|  */
    /*NOT-GRACE|11| 9.0| 1.5|18.0|  0.0| 0.5|NO| 7.5|18.0| 1|  */
    /*NOT-GRACE|11| 9.0| 1.5|18.0|  0.0| 1.0|ON| 7.5|18.0| 1|  */
    /*NOT-GRACE|11| 0.1| 0.5| 7.5|  0.0| 0.5|NO| 6.9| 7.5| 1|  */
    /*NOT-GRACE|11| 0.5| 1.0| 7.5|  0.0| 0.5|ON| 6.0| 7.5| 1|  */
    /*NOT-GRACE|11| 0.5| 0.0|18.0|  0.0| 0.5|OO|17.5|18.0| 1|  */
    /*NOT-GRACE|11| 9.0| 1.0|17.0|  0.0| 1.0|OO| 7.0|17.0| 1|  */
    /*NOT-GRACE|11| 8.2| 1.4|17.6|  0.0| 0.6|OO| 8.0|17.6| 1|  */
    /*NOT-GRACE|11| 9.0| 0.6|17.0|  0.0| 0.6|OO| 7.4|17.0| 1|  */
    /*-------------------------------------------------------  */
     OTHERWISE
       DO;
         GRACE_RULE = '11';
         IS_GRACE   ='0'B;            /* not a grace condition (10)*/
       END;
   END;  /* END OF SELECT                                          */

   IF TEST_SW
     THEN DO;
       DCL PIC_QSVCHR                PIC'Z9V.9'   INIT(0);
       DCL PIC_QTRAHR                PIC'Z9V.9'   INIT(0);
       DCL PIC_QSTOTI                PIC'Z9V.9'   INIT(0);
       DCL PIC_QINSTART              PIC'Z9V.9'   INIT(0);
       DCL PIC_QINSTOP               PIC'Z9V.9'   INIT(0);
       DCL PIC_QINHRS                PIC'Z9V.9'   INIT(0);
       DCL PIC_QOUTHRS               PIC'Z9V.9'   INIT(0);
       DCL PIC_QTOTDAYS              PIC'Z99'     INIT(0);
       DCL PIC_HSTART                PIC'Z9V.9'   INIT(0);
       DCL PIC_TEMP_START            PIC'ZZZ9'    INIT(0);
       DCL PIC_FDA_STOP              PIC'ZZZ9'    INIT(0);
       DCL PIC_END                   PIC'ZZZ9'    INIT(0);
       DCL PIC_END_GRACE             PIC'ZZZ9'    INIT(0);
       DCL PIC_START                 PIC'ZZZ9'    INIT(0);
       DCL PIC_START_GRACE           PIC'ZZZ9'    INIT(0);

       PIC_QSVCHR    = PRICE.QSVCHR;
       PIC_QTRAHR    = PRICE.QTRAHR;
       PIC_QSTOTI    = PRICE.QSTOTI;
       PIC_QINSTART  = PRICE.QINSTART;
       PIC_QINSTOP   = PRICE.QINSTOP;
       PIC_QINHRS    = PRICE.QINHRS;
       PIC_QOUTHRS   = PRICE.QOUTHRS;
       PIC_QTOTDAYS  = PRICE.QTOTDAYS;
       PIC_HSTART    = PRICE.HSTART;

       IF IS_GRACE
         THEN TESTGRACE = 'YES-GRACE';
         ELSE TESTGRACE = 'NOT-GRACE';

       DIAG_TEXT = MODULE||': num line |RU|ACT | TVL|STOP|#  |'||
                 '   TOTAL |FG|    |    |  INSIDE ';
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||':          |  |HRS | HRS|TIME|DAY|'||
                          'IN  | OUT|  |STRT|STOP| STR| END';
       CALL WRITE_TO_OPER;

       DIAG_TEXT = MODULE||':'||TESTGRACE ||'|'||GRACE_RULE  ||'|'||
                     PIC_QSVCHR           ||'|'||PIC_QTRAHR  ||'|'||
                     PIC_QSTOTI           ||'|'||PIC_QTOTDAYS||'|'||
                    PIC_QINHRS           ||'|'||PIC_QOUTHRS ||'|'||
                    AEQCOMM.FBILACTH     ||AEQCOMM.FBILTRVH ||'|'||
                    PIC_HSTART           ||'|'||PIC_QSTOTI  ||'|'||
                    PIC_QINSTART         ||'|'||PIC_QINSTOP;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||':---------------------------------'||
                 '-----------------------------------';
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': RESULT   |RU|STRT|STOP|GSTR|ISTR|'||
                        'ISTP|GSTP|#DAYS';

       CALL WRITE_TO_OPER;
       PIC_TEMP_START   = TEMP_START;
       PIC_FDA_STOP     = FD5_ACTVTY_STOP;

       PIC_START        = HINSIDE(4-TMP_QTOTDAYS).START;
       PIC_START_GRACE  = HINSIDE(4-TMP_QTOTDAYS).START - GRACE;

       PIC_END          = HINSIDE(3).END;
       PIC_END_GRACE    = HINSIDE(3).END + GRACE;

       PIC_QTOTDAYS     = TMP_QTOTDAYS;

       DIAG_TEXT = MODULE||':'||TESTGRACE ||'|'||GRACE_RULE     ||'|'||
                      PIC_TEMP_START      ||'|'||PIC_FDA_STOP   ||'|'||
                      PIC_START_GRACE     ||'|'||PIC_START      ||'|'||
                      PIC_END             ||'|'||PIC_END_GRACE  ||'|'||
                      TMP_QTOTDAYS;
       CALL WRITE_TO_OPER;

     END;

   RETURN(IS_GRACE);

 END GRACE_PERIOD;

  %PAGE;
 /********************************************************************/
 /* CONVERT  4 DIGIT HHMM TO 3 DIGITS HHT                            */
 /* WHERE HH IS HOURS AND MM IS MINUTES AND T TENTH OF HOUR          */
 /* ---------------------------------------------------------------  */
 /* THE RULE FOR CONVERSION FROM MINUTES TO TENTH OF HOUR IS:        */
 /*   FOR EVERY 6 MINUTES                                            */
 /*     IF THE MINUTES ARE >= 50% THROUGH THE 6 MINUTES THEN         */
 /*       ROUND UP TO THE NEXT TENTH.                                */
 /*   NOTE: IF MINUTES IS > 56 THEN                                  */
 /*         TENTHS IS 0 AND ADD 1 TO THE HOUR                        */
 /* ---------------------------------------------------------------- */
 /*         HH:MM -> HH.T                                            */
 /* e.g. 1 - 00:01 -> 00.0 TENTHS                                   */
 /* e.g. 2 - 00:03 -> 00.1 TENTHS                                   */
 /* e.g. 3 - 00:23 -> 00.4 TENTHS                                   */
 /* e.g. 4 - 00:57 -> 01.0 TENTHS                                   */
 /*                                                                 */
 /*******************************************************************/
 CONVERT_TO_TENTHS: PROC(HRSMINS) RETURNS(DEC(3,1));

   DCL HRSMINS      FIXED DEC(5,0) UNALIGNED;
   DCL HRSTENTHS    PIC'99V9'       BASED(ADDR(PIC_HRS_TENTHS));
   DCL PIC_HH_MM    PIC'9999'       INIT(0);
   DCL PIC_MINS     PIC'99'         INIT(0);
   DCL 1 PIC_HRS_TENTHS,
         3 PIC_HOURS   PIC'99'       INIT(0),
         3 PIC_TENTHS  PIC'9'        INIT(0);

   DCL TEMP_DEC     FIXED DEC(3,1)   INIT(0);

   PIC_HH_MM = HRSMINS;
   PIC_HOURS = SUBSTR(PIC_HH_MM,1,2);   /* HOURS PORTION            */
   PIC_MINS  = SUBSTR(PIC_HH_MM,3,2);   /* MINUTES PORTION          */

  /* ------------------------------------------------------------- */
  /* This will add 3 minutes to the total to round correctly if    */
  /* the minutes is not > 56 and then it divides by 6 to convert   */
  /* the minutes to tenths form                                    */
  /* ------------------------------------------------------------- */
   IF PIC_MINS > 56
      THEN PIC_HOURS  = PIC_HOURS + 1;
      ELSE PIC_TENTHS = (PIC_MINS + 3)/6;

   TEMP_DEC      = HRSTENTHS;
   RETURN(TEMP_DEC);

 END CONVERT_TO_TENTHS;

 %PAGE;
 DO_PARTS:  PROC;
 /*******************************************************************/
 /* DETERMINE NUMBER OF PARTS LINES TO ALLOCATE FOR BILLING PARTS   */
 /* ARRAY IN COMMAREA:                                              */
 /*   - END OF QSAR PARTS LINES INDICATED BY BLANK FUNCTION CODE    */
 /*   - BILLING IS CONCERNED ONLY WITH FUNCTION CODES INDICATING    */
 /*     PARTS USAGE                                                 */
 /*   - SAME PART NUMBER ON MULTIPLE LINES GETS "FOLDED" INTO A     */
 /*     SINGLE BILLING PARTS LINE                                   */
 /*   - IF THIS ORIGINAL QSAR DOCUMENT IS BEING RESUBMITTED THEN    */
 /*     MATCH IT TO CORRESPONDING PARTS TRAILERS, IF ANY            */
 /* BUILD TEMP_PARTS ARRAY ACCORDING TO ABOVE RULES.  WE WILL ASSIGN*/
 /* BILLING PARTS LINES FROM TEMP_PARTS LATER IN INIT_BILL_DATA     */
 /* PROC.  CHECK TO SEE IF THIS PART IS A QUOTABLE PART.  IF        */
 /* S0CQUOTE FROM PART COST REFERENCE FILE IS 0,1,3,5 OR 6 THIS PART*/
 /* HAS A VALID PRICE.  USE THE PRICE GIVEN. OTHERWISE, SET THE     */
 /* PART PRICE TO 0.                                                */
 /*******************************************************************/
 DCL FOUND BIT(1);
 DCL PIC_QTY  PIC'99';

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': IN DO PARTS PROCEDURE';
     CALL WRITE_TO_OPER;
   END;

 P# = 0;
 TEMP_PARTS(*) = '';

 PARTS_LOOP:
 DO I=1 TO 4 WHILE(AEQCOMM.S0CFUNC(I) ^= '  ');
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': FPARTYPE flag '||AEQCOMM.FPARTYPE(I) ||
                             'S0CFUNC VALUE' ||  AEQCOMM.S0CFUNC(I)  ;
       CALL WRITE_TO_OPER;
    END;
 IF AEQCOMM.FPARTYPE(I) ^= 'H' | AEQCOMM.S0CSVC = '36'
  THEN DO;                   /*  RQ046246  7NSA     */
    SELECT(AEQCOMM.S0CFUNC(I));
      WHEN('02','21')
        DO;
          FOUND = '0'B;
          DO J=1 TO 4 UNTIL(FOUND);
            IF AEQCOMM.S0IPART(I) = TEMP_PARTS(J).IPART
              THEN DO; /* SAME PART...JUST INCREMENT USAGE QUANTITY */
                   IF TEST_SW
                    THEN DO;
                      DIAG_TEXT = MODULE||
                      ': Increment QTY for Existing part'||
                                   TEMP_PARTS(J).IPART ; 
                      CALL WRITE_TO_OPER;
                     END;
                PIC_QTY = AEQCOMM.S0QDISUS(I);
                TEMP_PARTS(J).QDISUS = TEMP_PARTS(J).QDISUS + PIC_QTY;
                FOUND = '1'B;
              END;
          END;
          IF ^FOUND /* DIFFERENT PART...ADD NEW ENTRY */
            THEN DO;
              P# = P# + 1;
              TEMP_PARTS(P#).IPART    = AEQCOMM.PARTS(I).S0IPART;
              TEMP_PARTS(P#).QDISUS   = AEQCOMM.PARTS(I).S0QDISUS;
              TEMP_PARTS(P#).NPARTDSC = AEQCOMM.PARTS(I).DESCR;
              IF TEST_SW
                THEN DO;
                  DIAG_TEXT = MODULE||': QUOTE= ' ||
                               AEQCOMM.PARTS(I).S0CQUOTE;
                  CALL WRITE_TO_OPER;
                END;
                                         /* I96518                  */

              SELECT ( AEQCOMM.PARTS(I).S0CQUOTE );
                WHEN ('0','1','3','5','6')
                  DO;
                    DEC112                 = AEQCOMM.PARTS(I).CGPARTPR;
                                                           /* I95217*/
                    TEMP_PARTS(P#).APARTPR = DEC112/100.0;
                  END;
                OTHERWISE TEMP_PARTS(P#).APARTPR  = 0;
              END;                      /* END OF SELECT            */
            END;
        END;
      OTHERWISE;
    END;  /* SELECT */
  END;
 END PARTS_LOOP;


                                       /* ------------------------- */
                                       /* ONLY ORIGINAL QSARS SHOULD*/
 SAVE_P# = P#;                         /* GET THIS FAR              */
                                       /* ------------------------- */
                                       /* NEED TO MATCH TO PART     */
                                       /* TRAILERS IF CERTAIN CONDS */
                                       /* ARE MET (SEE BILLING      */
                                       /* MATRIX DIAGRAM)           */
                                       /* ------------------------- */
 IF AEQCOMM.S0IPARTR = ' '             /* IF THIS IS NOT A PART TRLR*/
   THEN DO;                            /* ------------------------- */
     SELECT (AEQCOMM.S0CSVC);
  /*       WHEN ('44','47','48','55','65','94') ; RQ4527 6NSH*/
       WHEN ('44','47','48','55','65') ;
       WHEN ('01')
         IF AEQCOMM.S0CHACT = '11'
           THEN;
           ELSE CALL MATCH_TO_PART_TRAILERS;
       OTHERWISE IF ( AEQCOMM.ISOURCE = 'SQL' | 
                      AEQCOMM.ISOURCE = 'ACR'   )
                   THEN ;
                   ELSE CALL MATCH_TO_PART_TRAILERS;
     END;
   END;

 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': DO_PARTS NUM PARTS '||P#;
     CALL WRITE_TO_OPER;
   END;

 IF PENDED_PART = YES                   /*  IF ANY PART TRAILER IS  */
   THEN P# = SAVE_P#;                   /* PENDED, DON'T DO ANYTHING*/
                                        /* WITH THE TRAILERS, WILL  */
 END DO_PARTS;                          /* PROCESS THEM LATER       */

 %PAGE;
 MATCH_TO_PART_TRAILERS: PROC;
 /*******************************************************************/
 /*   FIND ALL QSAR DOCUMENTS THAT MATCH TO THE ORIGINAL QSAR       */
 /*   DOCUMENT.  THIS INCLUDES THE ORIGINAL QSAR & PART TRAILERS    */
 /*******************************************************************/

  DCL SSA       CHAR(41);
  DCL SSA_LOW   CHAR(50);
  DCL SSA_HIGH  CHAR(50);
  DCL CHAR_DATE CHAR(4)  BASED(ADDR(AEQCOMM.EMPL_DATE));

  IF TEST_SW
    THEN DO;
      DIAG_TEXT = MODULE||': IN MATCH TO TRAILER PROC';
      CALL WRITE_TO_OPER;
    END;

   SSA = AEQCOMM.S0IEMPSE ||      /* 6    */
         CHAR_DATE        ||      /* 4    */
         AEQCOMM.S0IMACTC ||      /* 4    */
         AEQCOMM.S0IMACSE ||      /*22    */
         AEQCOMM.S0QSTOTI ||      /* 3    */
         AEQCOMM.S0CSVC;          /* 2 41 */

   SSA_LOW  = SSA || LOW(9);
   SSA_HIGH = SSA || HIGH(9);

                                        /* -------------------------*/
                                        /* DELAY THE ORIGINAL QSAR  */
                                        /*DOCUMENT MATCHING TO TRLRS*/
                                        /*ONLY IF NOT A RESUBMIT AND*/
                                        /* NOT A RECYCLED DOCUMENT  */
                                        /* ------------------------ */
   IF ^AEQCOMM.S0IRESUB & ^AEQCOMM.S0IRECYC
     THEN EXEC CICS DELAY INTERVAL(7);

   ET_TEXT1 = ERR2 || MODULE || ' ERROR ON GU OF AE3EMPL SEGMENT';
   ET_TEXT2 = ERR2 || MODULE || ' KEY = '|| SSA;

   EXEC DLI GU USING PCB(1)
               SEGMENT (QSA3SNDX)
               INTO(EMPL_SEG)
               WHERE(EMPL > SSA_LOW AND
                     EMPL < SSA_HIGH);

   J = 0;                                /* INITIALIZE RECORD COUNT */
   TEMP_DOC(*) = '';
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': FIRST CALL DIBSTAT '||DIBSTAT;
       CALL WRITE_TO_OPER;           /* ******* TEST ONLY ****** */
       DIAG_TEXT = MODULE||': SSA = '||SSA;
       CALL WRITE_TO_OPER;           /* ******* TEST ONLY ****** */
     END;

   SELECT (DIBSTAT);
     WHEN ('  ')
       DO  WHILE (DIBSTAT = '  ');
         J = J + 1;
         TEMP_DOC(J) = EMPL_SEG.S3_S0IDOCMN;

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': MATCH TO DOC '||
                                          EMPL_SEG.S3_S0IDOCMN;
             CALL WRITE_TO_OPER;    /* ******* TEST ONLY ****** */
           END;

         ET_TEXT1 = ERR2 || MODULE||' ERROR ON GN OF AE3EMPL SEGMENT';
         ET_TEXT2 = ERR2 || MODULE || ' KEY = '|| SSA;
                                       /* ------------------------- */
                                       /* RETRIEVE OTHER DOCUMENTS  */
                                       /* FOR THE SAME EMPLOYEE,    */
                                       /* DATE, MACHINE, STOP TIME  */
                                       /* AND SERVICE CODE          */
                                       /* ------------------------- */
         EXEC DLI GN USING PCB(1)
                     SEGMENT (QSA3SNDX)
                     INTO(EMPL_SEG)
                     WHERE(EMPL > SSA_LOW AND
                           EMPL < SSA_HIGH);

         SELECT (DIBSTAT);
           WHEN ('  ', 'GE');
           OTHERWISE
             DO;
              ET_TEXT3 = ERR2 || MODULE ||' DIBSTAT = ' || DIBSTAT;
              SIGNAL ERROR;
             END;
         END;                            /* END OF SELECT           */
       END;

     WHEN ('GE');                        /* NO PARTS TRAILERS       */

     OTHERWISE
       DO;
         ET_TEXT3 = ERR2 || MODULE ||' DIBSTAT = ' || DIBSTAT;
         SIGNAL ERROR;
       END;
   END;                                  /* END OF SELECT           */

   ET_TEXT1 = '';
   ET_TEXT2 = '';
   ET_TEXT3 = '';

 /* ----------------------------------------------------------------*/
 /* NOW TAKE EACH DOCUMENT FOUND ABOVE AND RETRIEVE THE ROOT AND    */
 /* DETERMINE IF THIS IS TO BE PROCESSED WITH THE CURRENT QSAR      */
 /* DOCUMENT BEING PROCESSED.  IF IT IS, THEN GET ALL THE PART      */
 /* SEGMENTS UNDER THE ROOT.                                        */
 /* ----------------------------------------------------------------*/
                                        /* TAKE THE DOCUMENT NUMBERS*/
                                        /* AND DETERMINE IF ANY ARE */
                                        /* ARE PART TRAILERS USING  */
                                        /* THE QSAR DATA BASE       */
                                        /* FIRST ONE IS THE ORIGINAL*/
                                        /* QSAR DOCUMENT, NOT A TRLR*/
 /*IF J > 1               */            /* -------------------------*/
 /* MADE THE FOLLOWING CHANGE IN IF CONDITION TO PROCESS THE PT     */
 /* RECORD FROM CROSS/LAR. IN CASE OF LAR RECORD, THE ORIGINAL IR   */
 /* RECORD IS NOT STORED INITIALLY, SO THE FIRST RECORD ITSELF IS A */
 /* PART TRAILER RECORD                              IT4211XX       */

 IF J > 1  |  (EIBTRNID = 'QBMN' & J > 0)  
     THEN
      DO K = 1 TO J  WHILE (PENDED_PART = NO);

        ET_TEXT1 = ERR2 || MODULE||' ERROR ATTEMPTING TO GU QSGENL '||
                         '& QSPART SEG '||J ;
        ET_TEXT2 = ERR2 || MODULE || ' KEY = ' || TEMP_DOC(K);
        EXEC DLI GU USING PCB(2)
                    SEGMENT (QSGENL)
                    INTO(TEMP_GENL)
                       WHERE (IDOCUMNT = TEMP_DOC(K));

        ET_TEXT3 = ERR2 || MODULE || ' DIBSTAT = ' || DIBSTAT;

          SELECT (DIBSTAT);
            WHEN ('  ')  ;
            OTHERWISE SIGNAL ERROR;
          END;

        EXEC DLI GNP USING PCB(2)
                    SEGMENT (QSPART)
                    INTO(TEMP_PART);

        ET_TEXT1 = ERR2||MODULE||' ERROR ATTEMPTING TO GU QSPART SEG';
        ET_TEXT3 = ERR2 ||MODULE||' DIBSTAT = ' || DIBSTAT;

          SELECT (DIBSTAT);
            WHEN ('  ')
              IF TEMP_GENL.S0IPARTR ^= ' ' /* IF THIS IS A PART TRLR*/
                    & TEMP_GENL.S0IDOCMN ^= AEQCOMM.S0IDOCMN
                                         /* AND NOT THE ORIGINAL DOC*/
                THEN IF TEMP_GENL.CGQHIGSE >= '3'
                       THEN PENDED_PART = YES;
                       ELSE
                         DO WHILE (DIBSTAT = '  ') ;
                           IF ((TEMP_PART.S0CFUNC = '02' |
                               TEMP_PART.S0CFUNC = '21') &
                               (TEMP_PART.FPARTYPE ^= 'H'|
                                TEMP_GENL.S0CSVC = '36') ) /* 7NSA */
                             THEN CALL ASSIGN_PARTDATA;

                           ET_TEXT1 = ERR2 || MODULE ||
                                      ' ERROR ON GN ON '||
                                      'PART SEG ON MATCH TO TRAILER ';
                           EXEC DLI GNP USING PCB(2)
                                        SEGMENT (QSPART)
                                        INTO(TEMP_PART);
                           SELECT (DIBSTAT);
                             WHEN ('  ', 'GE','GB','GA') ;
                             OTHERWISE
                               DO;
                                 ET_TEXT3 = ERR2 || MODULE ||
                                            ' DIBSTAT =  '||DIBSTAT;
                                 SIGNAL ERROR;
                               END;
                            END;         /* END OF SELECT           */

                          END;           /* END OF DO WHILE         */

                                         /* NO PARTS SEGMENTS       */
            WHEN ('GE');

            OTHERWISE
              DO;
                ET_TEXT3 = ERR2 || MODULE || ' DIBSTAT =  '|| DIBSTAT;
                SIGNAL ERROR;
              END;

          END;                           /* END SELECT              */
      END;                               /* END OF DO K = 1 TO J    */

   ET_TEXT1 = '';
   ET_TEXT2 = '';
   ET_TEXT3 = '';

 END MATCH_TO_PART_TRAILERS;

 %PAGE;
 ASSIGN_PARTDATA:  PROC;
 /*******************************************************************/
 /* IN ORDER TO ASSIGN THE PARTS INFORMATION CORRECTLY, ONE MUST    */
 /* FOLD THE SAME PART NUMBER INFORMATION INTO A SINGLE BILLINGPARTS*/
 /* LINE.  FIRST DETERMINE IF THE PART NUMBER EXISTS. IF IT DOES,   */
 /* ADD THE PARTS USAGE VALUES TOGETHER.  IF THE PART DOES NOT EXIST*/
 /* CREATE ANOTHER ARRAY ENTRY.                                     */
 /* CHECK TO SEE IF THIS PART IS A QUOTABLE PART.  IF               */
 /* S0CQUOTE FROM PART COST REFERENCE FILE IS 0,1,3,5,6 THIS PART   */
 /* HAS A VALID PRICE.  USE THE PRICE GIVEN. OTHERWISE, SET THE     */
 /* PART PRICE TO 0.                                                */
 /*******************************************************************/
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': ASSIGN PART DATA PROCEDURE';
       CALL WRITE_TO_OPER;
     END;

   DCL FOUND BIT(1);
   DCL PIC_QTY  PIC'99';

   FOUND = '0';
                                         /* ------------------------*/
                                         /* CHECK TO SEE IF THE PART*/
                                         /* ALREADY EXISTS          */
   DO I = 1 TO P# UNTIL (FOUND);         /* ------------------------*/

     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': PART NUM '||I|| 
                                TEMP_PARTS(I).IPART||P#;
         CALL WRITE_TO_OPER;    /* ********** TEST ONLY ********** */
         DIAG_TEXT = MODULE||': PART NUM '|| TEMP_PART.S0IPART;
         CALL WRITE_TO_OPER;     /* ********** TEST ONLY ********** */
       END;

     IF TEMP_PARTS(I).IPART = TEMP_PART.S0IPART
       THEN DO;
         PIC_QTY = TEMP_PART.S0QDISUS;
         TEMP_PARTS(I).QDISUS = TEMP_PARTS(I).QDISUS + PIC_QTY;
         FOUND = '1';
       END;
   END;

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': PART FOUND '||FOUND;
       CALL WRITE_TO_OPER;
     END;

   IF ^FOUND                             /* DIFFERENT PART, ADD NEW */
     THEN DO;                            /* ENTRY                   */
       P# = P# + 1;
       TEMP_PARTS(P#).IPART    = TEMP_PART.S0IPART;
       TEMP_PARTS(P#).QDISUS   = TEMP_PART.S0QDISUS;
       TEMP_PARTS(P#).NPARTDSC = TEMP_PART.DESCR;
                                         /* 96518                   */
       SELECT (TEMP_PART.S0CQUOTE);
         WHEN ('0','1','3','5','6')
           DO;
             DEC112                   = TEMP_PART.CGPARTPR;
             TEMP_PARTS(P#).APARTPR  = DEC112/100.0;      /* I95217 */
           END;
         OTHERWISE TEMP_PARTS(P#).APARTPR  = 0;

       END;  /* END OF SELECT */
     END;

   DCL M FIXED BIN (15);
   DO M = 1 TO P#;
     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': PARTNUM '||TEMP_PARTS(M).IPART||
                         TEMP_PARTS(M).QDISUS||TEMP_PARTS(M).NPARTDSC;

         CALL WRITE_TO_OPER;     /* ********** TEST ONLY ********** */
       END;
   END;

 END ASSIGN_PARTDATA;

 %PAGE;
 CREATE_COMMAREA:  PROC;
 /*******************************************************************/
 /* - ALLOCATE QSAR/BILLING COMMAREA                                */
 /* - COPY QSAR (INPUT) COMMAREA TO OUTPUT COMMAREA                 */
 /*   (WITH CARE, TO ENSURE NO PROBLEM WITH 'REFER' IN BILLING PARTS*/
 /*******************************************************************/
   IF TEST_SW
     THEN DO;
       DCL PIC5   PIC '99999' INIT(0);
    /* PIC5 = CSTG(COMMAREA)  */
       DIAG_TEXT = MODULE||': CREATE_COMMAREA LENGTH: '||PIC5;
       CALL WRITE_TO_OPER;
     END;

   /*ALLOCATE COMMAREA SET(@COMM2)           B0286354   11/13/98    */

   EXEC CICS GETMAIN SET(@COMM2)
             FLENGTH(CSTG(COMMAREA));

   COMMAREA = '';

   COMMAREA.X#PARTS = P#;

 /*   COMMAREA.QBBILL       = ''            I141799           */
 /*   COMMAREA.QBPARTS(*)   = ''                              */

   IF TEST_SW
     THEN DO;
       PIC9999999 = CSTG(COMMAREA);
       DIAG_TEXT = MODULE||': CREATE COMMAREA 1 LENGTH '||PIC9999999;
       CALL WRITE_TO_OPER;
     END;

   COMMAREA.DOCUMENT_KEY = AEQCOMM.DOCUMENT_KEY;
   COMMAREA.PEND_KEY     = AEQCOMM.PEND_KEY;
   COMMAREA.RETRY_KEY    = AEQCOMM.RETRY_KEY;
   COMMAREA.EMPL_KEY     = AEQCOMM.EMPL_KEY;
   COMMAREA.TIMESTAMP_KEY= AEQCOMM.TIMESTAMP_KEY;
   COMMAREA.MIRROR_KEY   = AEQCOMM.MIRROR_KEY;
   COMMAREA.DCS_HEADER   = AEQCOMM.DCS_HEADER;
   COMMAREA.CTL_FIELDS   = AEQCOMM.CTL_FIELDS;
   COMMAREA.S0UIPARE     = AEQCOMM.S0UIPARE;  /* Sub-structure */

   IF COMMAREA.S0QSVCHR   = ''
     THEN COMMAREA.S0QSVCHR  = '000';
     ELSE COMMAREA.S0QSVCHR  = AEQCOMM.S0QSVCHR;

   IF COMMAREA.S0QTRAHR   = ''
     THEN COMMAREA.S0QTRAHR  = '000';
     ELSE COMMAREA.S0QTRAHR  = AEQCOMM.S0QTRAHR;

   COMMAREA.CHICEWK      = AEQCOMM.CHICEWK;
   COMMAREA.CHDSCAPR     = AEQCOMM.CHDSCAPR;
   COMMAREA.CHDORIRR     = AEQCOMM.CHDORIRR;
   COMMAREA.CHIREPPY     = AEQCOMM.CHIREPPY;
   COMMAREA.CHIREPPW     = AEQCOMM.CHIREPPW;
   COMMAREA.CGUERSEA     = AEQCOMM.CGUERSEA;

   COMMAREA.CGIOTHPB     = AEQCOMM.CGIOTHPB;
   COMMAREA.CGIASGPB     = AEQCOMM.CGIASGPB;
   COMMAREA.CGCCLAFG     = AEQCOMM.CGCCLAFG;
   COMMAREA.CGCCLAPI     = AEQCOMM.CGCCLAPI;
   COMMAREA.CGCSTAPI     = AEQCOMM.CGCSTAPI;
   COMMAREA.CGCEFFST     = AEQCOMM.CGCEFFST;
   COMMAREA.CGIEFFIT     = AEQCOMM.CGIEFFIT;

   /* MISCELLANEOUS FLAGS 1                        */
   COMMAREA.UMISFLG1     = AEQCOMM.UMISFLG1, BY NAME;
   /* MISCELLANEOUS FLAGS 2                        */
   COMMAREA.UMISFLG2     = AEQCOMM.UMISFLG2, BY NAME;

   COMMAREA.CGITYPMD     = AEQCOMM.CGITYPMD;
   COMMAREA.CGIOTHDV     = AEQCOMM.CGIOTHDV;
   COMMAREA.CGIOTHOP     = AEQCOMM.CGIOTHOP;
   COMMAREA.CGIOTHRG     = AEQCOMM.CGIOTHRG;
   COMMAREA.CGIOTHAR     = AEQCOMM.CGIOTHAR;
   COMMAREA.CGIOTIND     = AEQCOMM.CGIOTIND;

   COMMAREA.CIICEAB      = AEQCOMM.CIICEAB;
   COMMAREA.CICGROUP     = AEQCOMM.CICGROUP;
   COMMAREA.CIURECRE     = AEQCOMM.CIURECRE;
   COMMAREA.CGSRCBO      = AEQCOMM.CGSRCBO;

   COMMAREA.R_VER        = AEQCOMM.R_VER;
   COMMAREA.NSDC_DEL     = AEQCOMM.NSDC_DEL;
   COMMAREA.NSDC_MULTRESUB = AEQCOMM.NSDC_MULTRESUB;
   COMMAREA.S0CVEND      = AEQCOMM.S0CVEND;
   COMMAREA.S0CZIPCDE    = AEQCOMM.S0CZIPCDE;
   COMMAREA.BILL_S       = AEQCOMM.BILL_S;
   COMMAREA.CTAXCD       = AEQCOMM.CTAXCD;
   COMMAREA.TMACHDSC     = AEQCOMM.TMACHDSC;

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CREATE COMMAREA 2';
       CALL WRITE_TO_OPER;
     END;

 /* COMMAREA.CGHDAOLD    = AEQCOMM.CGHDAOLD       MAKE ASSIGNMENTS   */
 /* COMMAREA.CGHDANEW    = AEQCOMM.CGHDANEW       FOR NEW HDA AND    */
 /* COMMAREA.CGDEVADR    = AEQCOMM.CGDEVADR       UNAVAILABLE TIME   */


   
   COMMAREA.ICNVMSER     = AEQCOMM.ICNVMSER;  /* SR030023            */
   COMMAREA.CBASEWAR     = AEQCOMM.CBASEWAR;  /* SR030019            */
   COMMAREA.CCOURSE      = AEQCOMM.CCOURSE;   /* SR040017            */
   COMMAREA.IREQEMPL     = AEQCOMM.IREQEMPL;  /* SR040017            */
   COMMAREA.CBRANCH      = AEQCOMM.CBRANCH;   /* SR040017            */
   COMMAREA.CGUNTIME     = AEQCOMM.CGUNTIME;  /*  FIELDS.  - ABM     */
      
   COMMAREA.IREQDIV      = AEQCOMM.IREQDIV;
   COMMAREA.CEAMT        = AEQCOMM.CEAMT;
   COMMAREA.FMTMCSU      = AEQCOMM.FMTMCSU;
   COMMAREA.SPAD07       = AEQCOMM.SPAD07;
   COMMAREA.NSD_HRTG     = AEQCOMM.NSD_HRTG;  /*                     */

   COMMAREA.S0UIPARE.SPAD01       = AEQCOMM.S0UIPARE.SPAD01;

   COMMAREA.SPAD02       = AEQCOMM.SPAD02;
   COMMAREA.SPAD03       = AEQCOMM.SPAD03;
   COMMAREA.SPAD04       = AEQCOMM.SPAD04;

   COMMAREA.SPAD05       = AEQCOMM.SPAD05;
   COMMAREA.S0CCSCPC     = AEQCOMM.S0CCSCPC;  /*CE PROB NUMBER       */

   COMMAREA.SPAD06       = AEQCOMM.SPAD06;
   COMMAREA.CPROBNUM2    = AEQCOMM.CPROBNUM2;/*CAD PROBNUMBER-SR0702 */

   COMMAREA.FHOLDFILE    = AEQCOMM.FHOLDFILE;     /*                 */
   COMMAREA.FMPIBUSY     = AEQCOMM.FMPIBUSY;      /*                 */
   COMMAREA.FSAVBUSY     = AEQCOMM.FSAVBUSY;      /*                 */
   COMMAREA.FSPWN08      = AEQCOMM.FSPWN08;       /* SR1204          */
   COMMAREA.FPTCORR      = AEQCOMM.FPTCORR;       /* SR93110         */
   COMMAREA.FSYSSPWN     = AEQCOMM.FSYSSPWN;      /*                 */
   COMMAREA.FOEMTYPE     = AEQCOMM.FOEMTYPE;      /* S9300154        */
   COMMAREA.FOEMCNTR     = AEQCOMM.FOEMCNTR;      /* S99093          */
   COMMAREA.FAUDUNAV     = AEQCOMM.FAUDUNAV;      /* S9300220        */
   COMMAREA.FAUDBUNA     = AEQCOMM.FAUDBUNA;      /* S9300253        */
   COMMAREA.FMPIDBUN     = AEQCOMM.FMPIDBUN;      /* I234980         */
    /* changed switch from FISSCADV to FISSCNTR*/
   COMMAREA.FISSCNTR     = AEQCOMM.FISSCNTR;      /*                 */
   COMMAREA.FIBM         = AEQCOMM.FIBM;          /*                 */
   COMMAREA.FONMA        = AEQCOMM.FONMA;
   COMMAREA.FWARRNTY     = AEQCOMM.FWARRNTY;                           
   COMMAREA.FOEEUNA      = AEQCOMM.FOEEUNA;       /* SR050023        */
   /* COMMAREA.FSRCDART     = AEQCOMM.FSRCDART       S9500187        */

   COMMAREA.FPRTORD      = AEQCOMM.FPRTORD;       /* SR0776          */
   COMMAREA.IAIC         = AEQCOMM.IAIC;          /* TU0934C         */
   COMMAREA.CGSASCH      = AEQCOMM.CGSASCH;       /* SR0967          */

   COMMAREA.S0IPRDID     = AEQCOMM.S0IPRDID;  /* PRODUCT ID          */
   COMMAREA.PEND_HDA     = AEQCOMM.PEND_HDA;  /* PEND_HDA FLAG       */

   COMMAREA.CCECUSTY     = AEQCOMM.CCECUSTY; /* CE ENTERED CUST TYPE */
   COMMAREA.CSAVSRC      = AEQCOMM.CSAVSRC;  /* SOURCE OF UPDATE     */
                                             /* FOR AUDIT TRAIL      */

   COMMAREA.S0ICSS2      = AEQCOMM.S0ICSS2;  /* CE ENTERED CONTRACT  */
   COMMAREA.FSTATRST     = AEQCOMM.FSTATRST; /* MPI STATUS CHANGE    */
   COMMAREA.CVALLOC      = AEQCOMM.CVALLOC;  /*SOURCE OF CONTRACT NO */
   COMMAREA.CEBBILL      = AEQCOMM.CEBBILL;  /* CE ENTERED BA CODE   */
   COMMAREA.CNTRDIAG     = AEQCOMM.CNTRDIAG; /* CONTRACT TRACE VAR   */
   COMMAREA.CSRCHCNT     = AEQCOMM.CSRCHCNT; /*CONTRACT SEARCH COUNT */

   COMMAREA.S0ICUST      = AEQCOMM.S0ICUST;  /* CE ENTERED CUSTOMER# */
   COMMAREA.IAVALCTR     = AEQCOMM.IAVALCTR; /* AVAILABILITY B/O     */
   COMMAREA.IAVALRSO     = AEQCOMM.IAVALRSO; /* AVAILABILITY B/O RSO */

   COMMAREA.IMFGMOD      = AEQCOMM.IMFGMOD;  /* DART/GE DATA         */
   COMMAREA.CFAILCD      = AEQCOMM.CFAILCD;  /*    "                 */

   COMMAREA.FECICALL     = AEQCOMM.FECICALL;
   COMMAREA.FEBCONT      = AEQCOMM.FEBCONT ;
   COMMAREA.FRSTCNTR     = AEQCOMM.FRSTCNTR;
   COMMAREA.FCADMTCH     = AEQCOMM.FCADMTCH;

   COMMAREA.FSRCNSS      = AEQCOMM.FSRCNSS;
   COMMAREA.FTSSMACH     = AEQCOMM.FTSSMACH;     /* S9500187        */
   COMMAREA.FPETMSG      = AEQCOMM.FPETMSG;
   COMMAREA.FSYSBILL     = AEQCOMM.FSYSBILL;

   COMMAREA.FMICRO       = AEQCOMM.FMICRO;
   COMMAREA.FMES         = AEQCOMM.FMES;
   COMMAREA.FECA         = AEQCOMM.FECA;
   COMMAREA.FREA         = AEQCOMM.FREA;
   COMMAREA.FSPCCNTR     = AEQCOMM.FSPCCNTR;
   COMMAREA.FCTRBUSY     = AEQCOMM.FCTRBUSY;
   COMMAREA.FCTRDBUN     = AEQCOMM.FCTRDBUN;
   COMMAREA.FPREPEND     = AEQCOMM.FPREPEND;

   COMMAREA.ICADID       = AEQCOMM.ICADID  ;  /* CAD CALL ID        */
   COMMAREA.ICUSTPH      = AEQCOMM.ICUSTPH ;  /*                    */
   COMMAREA.FCMPS_S      = AEQCOMM.FCMPS_S;

   COMMAREA.ISRVGCE      = AEQCOMM.ISRVGCE;
   COMMAREA.ISRVGRSO     = AEQCOMM.ISRVGRSO;
   COMMAREA.IPETLVL      = AEQCOMM.IPETLVL ;  /* PET/2 VER/LEVEL    */
   COMMAREA.IPARTCNT     = AEQCOMM.IPARTCNT;  /* TOT NUMBER OF PARTS*/
                                              /* ENTERED PET/2 TRUER*/
   COMMAREA.HOFFSHFT     = AEQCOMM.HOFFSHFT;
   COMMAREA.CINVCNTR     = AEQCOMM.CINVCNTR;
   COMMAREA.HOFFSHFT     = AEQCOMM.HOFFSHFT;
   COMMAREA.CHERITAG     = AEQCOMM.CHERITAG;
   COMMAREA.FSPCCNTR     = AEQCOMM.FSPCCNTR;
   COMMAREA.CSEVRITY     = AEQCOMM.CSEVRITY;
   COMMAREA.FACTWORK     = AEQCOMM.FACTWORK;   /* S970133           */

   COMMAREA.FACTPLAN     = AEQCOMM.FACTPLAN;   /* S970133           */
   COMMAREA.CACTFAIL     = AEQCOMM.CACTFAIL;   /* S970133           */

   COMMAREA.CRTSSTAT     = AEQCOMM.CRTSSTAT;   /* S970133           */
   COMMAREA.FCLM_S       = AEQCOMM.FCLM_S  ;   /* S970219           */
   COMMAREA.CCNTRSRC     = AEQCOMM.CCNTRSRC;   /* S970219           */

   COMMAREA.CPRODDIV     = AEQCOMM.CPRODDIV;
   COMMAREA.CIACTIND     = AEQCOMM.CIACTIND;   /* S970219           */
   COMMAREA.IGROUP       = AEQCOMM.IGROUP  ;   /* S970219           */

   /* COMMAREA.PAD01        = AEQCOMM.PAD01;  */
   COMMAREA.SPAD08       = AEQCOMM.SPAD08;  
   COMMAREA.IQARMOD      = AEQCOMM.IQARMOD;

   COMMAREA.ISOURCE      = AEQCOMM.ISOURCE ;
   COMMAREA.FSTDER_S     = AEQCOMM.FSTDER_S;
   COMMAREA.FSFTPEND     = AEQCOMM.FSFTPEND;

   COMMAREA.IWKNUMAC     = AEQCOMM.IWKNUMAC;
   COMMAREA.FWNUCHG      = AEQCOMM.FWNUCHG;
   COMMAREA.FCEDBTS      = AEQCOMM.FCEDBTS;

   COMMAREA.FBILACTH     = SAVE_FBILACTH;        /* ASSIGN BACK INTO */
   COMMAREA.FBILTRVH     = SAVE_FBILTRVH;        /* QSGENL SEGEMENT  */
   COMMAREA.FBILPART     = SAVE_FBILPART;        /* 4NSC             */
   COMMAREA.FBILDIST     = SAVE_FBILDIST;        /* 4NSC             */
   COMMAREA.FBILEXP      = SAVE_FBILEXP;         /* 4NSC             */
   COMMAREA.IENTSRC      = SAVE_IENTSRC;
   COMMAREA.FOVRTIME     = AEQCOMM.FOVRTIME;  /* SR040017            */
   COMMAREA.FSEROVRD     = AEQCOMM.FSEROVRD;  /* SR040017            */

   COMMAREA.CWARLIAB     = AEQCOMM.CWARLIAB;     /* 5NSC             */
   COMMAREA.CWUPLIAB     = AEQCOMM.CWUPLIAB;     /* 5NSC             */
   COMMAREA.CMALIAB      = AEQCOMM.CMALIAB;      /* 5NSC             */
   COMMAREA.FPERCALL     = AEQCOMM.FPERCALL;     /* 5NSC             */
   COMMAREA.CSPECAPR     = AEQCOMM.CSPECAPR;     /* 5NSC             */
   COMMAREA.CFUTRUSE     = AEQCOMM.CFUTRUSE;     /* 5NSC             */
   COMMAREA.ILIABSRC     = AEQCOMM.ILIABSRC;     /* 5NSC             */
   COMMAREA.CWARRUP      = AEQCOMM.CWARRUP;      /* 5NSC             */
   COMMAREA.NWARPHSE     = AEQCOMM.NWARPHSE;     /* 5NSC             */
   COMMAREA.NWUPHSE      = AEQCOMM.NWUPHSE;      /* 5NSC             */
   COMMAREA.IPLATFRM     = AEQCOMM.IPLATFRM;     /* 5NSC             */

   COMMAREA.CCSTACTH     = AEQCOMM.CCSTACTH;
   COMMAREA.CCSTTRVH     = AEQCOMM.CCSTTRVH;
   COMMAREA.CCSTPART     = AEQCOMM.CCSTPART;
   COMMAREA.ICOSTSET     = AEQCOMM.ICOSTSET;
   COMMAREA.IHRSSRC      = AEQCOMM.IHRSSRC;

   COMMAREA.QJBILMTR     = AEQCOMM.QJBILMTR;
   COMMAREA.FOEMMTCH     = AEQCOMM.FOEMMTCH;
   COMMAREA.UFLAGS       = AEQCOMM.UFLAGS, BY NAME;    /* 7NSR */
   /*COMMAREA.FMPI24X7     = AEQCOMM.FMPI24X7;         /* 4NSC */
   /*COMMAREA.FCNT24X7     = AEQCOMM.FCNT24X7;         /* 4NSC */
   COMMAREA.FWAR24X7     = AEQCOMM.FWAR24X7;           /* 4NSC */
   /*COMMAREA.FSOMACH      = AEQCOMM.FSOMACH;          /* 4NSC */
   /*COMMAREA.FOEE         = AEQCOMM.FOEE;             /* 4NSC */
   /*COMMAREA.FACTADMN     = AEQCOMM.FACTADMN;         /* 5NSO */
   /*COMMAREA.FLNVEMPL     = AEQCOMM.FLNVEMPL;         /* 7NSR */
   
   COMMAREA.IMACOWNR     = AEQCOMM.IMACOWNR;         /* 7NSM */
   COMMAREA.IMACMFGR     = AEQCOMM.IMACMFGR;         /* 7NSM */
   COMMAREA.CWUMP        = AEQCOMM.CWUMP;            /* 7NSM */
   COMMAREA.CCOSTCAT     = AEQCOMM.CCOSTCAT;         /* 7NSM */
   COMMAREA.CGWSCNTRY    = AEQCOMM.CGWSCNTRY;        /* 7NSM */
   COMMAREA.CWARSERV     = AEQCOMM.CWARSERV;         /* 7NSM */
   COMMAREA.CBWCPHSE     = AEQCOMM.CBWCPHSE;         /* 7NSM */
   COMMAREA.ICCOSTSQ     = AEQCOMM.ICCOSTSQ;         /* 7NSM */
   COMMAREA.SPAD99       = AEQCOMM.SPAD99;           /* 7NSM */
   
     /* COMMAREA.IENTSRC      = AEQCOMM.IENTSRC  SEE ABOVE */
   COMMAREA.IAPPLID      = AEQCOMM.IAPPLID;
   COMMAREA.ITRANSID     = AEQCOMM.ITRANSID;

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CREATE COMMAREA 3';
       CALL WRITE_TO_OPER;
     END;

   COMMAREA.NARRATIVE    = AEQCOMM.NARRATIVE;  /* QSNARR          */
   COMMAREA.INVENTORY    = AEQCOMM.INVENTORY;  /* QSINVT          */
   COMMAREA.PARTS        = AEQCOMM.PARTS;      /* QSPARTS         */

   COMMAREA.TACTCOMT     = AEQCOMM.TACTCOMT;   /* QSMISC          */
   COMMAREA.IUNIQUE      = AEQCOMM.IUNIQUE;    /* QSMISC          */
   COMMAREA.IWAYBILL     = AEQCOMM.IWAYBILL;   /* QSMISC          */
   COMMAREA.ICUSTNUM     = AEQCOMM.ICUSTNUM;   /* QSMISC          */
   COMMAREA.NNSSCUST     = AEQCOMM.NNSSCUST;   /* QSMISC          */
   COMMAREA.IPONUM       = AEQCOMM.IPONUM;     /* QSMISC    4NSG  */
   COMMAREA.TCUSTADR     = AEQCOMM.TCUSTADR;   /* SR040017        */
   COMMAREA.UMISCELL.NCONTACT  = AEQCOMM.UMISCELL.NCONTACT;
   COMMAREA.CCHIS        = AEQCOMM.CCHIS;      /* 6NSN            */
   COMMAREA.UMISCELL.SPAD01    = AEQCOMM.UMISCELL.SPAD01;
   
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CREATE COMMAREA 4 icnvmser '||
                       COMMAREA.ICNVMSER;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': SET UP CUSTOMER NUM IS A PIC FIELD';
       CALL WRITE_TO_OPER;
     END;

   IF COMMAREA.S0ICUST ^= '' & COMMAREA.GJICUST = 0
     THEN DO;
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': CREATE COMMAREA 5, '||
                        'INSIDE CUST # ASSIGNMENT';
           CALL WRITE_TO_OPER;
         END;
       PIC7 = COMMAREA.S0ICUST;
       COMMAREA.GJICUST = PIC7;
     END;

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CMR INDICATORS IN CREATE_COMMAREA '||
                   AEQCOMM.FRESTIND ||' '||AEQCOMM.NRESABRV ||' '||
                   AEQCOMM.FOEMIND  ||' '||AEQCOMM.IMKTAFFN ||' '||
                   AEQCOMM.IBPACCT  ||' '||AEQCOMM.CRESTRCT;
       CALL WRITE_TO_OPER;
     END;

   COMMAREA.M_FEDF          = AEQCOMM.M_FEDF;
   COMMAREA.M_FROMBO        = AEQCOMM.M_FROMBO;
   COMMAREA.M_FROMOL        = AEQCOMM.M_FROMOL;
   COMMAREA.M_MPI           = AEQCOMM.M_MPI;
   COMMAREA.M_MTM_REG       = AEQCOMM.M_MTM_REG;
   COMMAREA.M_MTM_SUPERLOW  = AEQCOMM.M_MTM_SUPERLOW;
   COMMAREA.M_SRC           = AEQCOMM.M_SRC;
   COMMAREA.M_MPIREQ        = AEQCOMM.M_MPIREQ;
   COMMAREA.M_OTHOFF_S      = AEQCOMM.M_OTHOFF_S;
   COMMAREA.M_OTHOFF_M      = AEQCOMM.M_OTHOFF_M;
   COMMAREA.M_PART1         = AEQCOMM.M_PART1;
   COMMAREA.M_PART2         = AEQCOMM.M_PART2;
   COMMAREA.M_PART3         = AEQCOMM.M_PART3;
   COMMAREA.M_PART4         = AEQCOMM.M_PART4;
   COMMAREA.M_PTBO_BOREF    = AEQCOMM.M_PTBO_BOREF;
   COMMAREA.M_PMSCHED       = AEQCOMM.M_PMSCHED;
   COMMAREA.M_RCVBO_1       = AEQCOMM.M_RCVBO_1;
   COMMAREA.M_RCVBO_2       = AEQCOMM.M_RCVBO_2;
   COMMAREA.M_RCVBO_3       = AEQCOMM.M_RCVBO_3;
   COMMAREA.M_RCVBO_4       = AEQCOMM.M_RCVBO_4;
   COMMAREA.M_RCVOL_1       = AEQCOMM.M_RCVOL_1;
   COMMAREA.M_RCVOL_2       = AEQCOMM.M_RCVOL_2;
   COMMAREA.M_RCVOL_3       = AEQCOMM.M_RCVOL_3;
   COMMAREA.M_RCVOL_4       = AEQCOMM.M_RCVOL_4;
   COMMAREA.FINCDPRT        = AEQCOMM.FINCDPRT; /* 3NSE */
   COMMAREA.BRFUNC          = AEQCOMM.BRFUNC;

   DO I=1 TO 4;
     COMMAREA.HAZ_PART(I)  = AEQCOMM.HAZ_PART(I);
   END;
                                      /* APPLICATION CONTROL FIELDS */
   COMMAREA.LINKFAIL_MPI    = AEQCOMM.LINKFAIL_MPI;
   COMMAREA.LINKFAIL_CNTR   = AEQCOMM.LINKFAIL_CNTR;
   COMMAREA.NSDC_TERMID     = AEQCOMM.NSDC_TERMID;
   COMMAREA.PTUID           = AEQCOMM.PTUID;
   COMMAREA.M_COS           = AEQCOMM.M_COS;
   COMMAREA.FMPIABND        = AEQCOMM.FMPIABND;
   COMMAREA.FCTRABND        = AEQCOMM.FCTRABND;
   COMMAREA.PEND_PM         = AEQCOMM.PEND_PM;
   COMMAREA.M_PRODID        = AEQCOMM.M_PRODID;
   COMMAREA.M_ISSC          = AEQCOMM.M_ISSC;
   COMMAREA.MT_IS_PRODID    = AEQCOMM.MT_IS_PRODID;
   COMMAREA.COS_VALID       = AEQCOMM.COS_VALID;
   COMMAREA.SCORE_VALID     = AEQCOMM.SCORE_VALID;
   COMMAREA.M_CMR           = AEQCOMM.M_CMR;
   
   COMMAREA.FPASTDEACT      = AEQCOMM.FPASTDEACT;  /* BMS  */
   COMMAREA.FPREACT         = AEQCOMM.FPREACT;     /* BMS  */
   COMMAREA.FHRSINV         = AEQCOMM.FHRSINV;     /* BMS  */
   COMMAREA.VALID_ZIP_CODE  = AEQCOMM.VALID_ZIP_CODE;
   COMMAREA.VALID_BILL_CODE = AEQCOMM.VALID_BILL_CODE;

   DO I=1 TO 4;
     COMMAREA.FOLINVLD(I)  = AEQCOMM.FOLINVLD(I);
   END;

   COMMAREA.CMTMOVRD        = AEQCOMM.CMTMOVRD;
   COMMAREA.CTARGET         = AEQCOMM.CTARGET;
   COMMAREA.CPERCALL        = AEQCOMM.CPERCALL;
   COMMAREA.FPARTUSE        = AEQCOMM.FPARTUSE;

   COMMAREA.QMSERMIN        = AEQCOMM.QMSERMIN;
   COMMAREA.QMSERMAX        = AEQCOMM.QMSERMAX;
   COMMAREA.FMTYPCHK        = AEQCOMM.FMTYPCHK;
   COMMAREA.M_MACH_REG      = AEQCOMM.M_MACH_REG;
   COMMAREA.CSDTOPTN        = AEQCOMM.CSDTOPTN;             /* 4NSN */

   COMMAREA.ISERVPLN        = AEQCOMM.ISERVPLN;
   COMMAREA.IBILLSTAT       = AEQCOMM.IBILLSTAT;

   COMMAREA.ICONPHON        = AEQCOMM.ICONPHON;
   COMMAREA.CCOTYPE         = AEQCOMM.CCOTYPE;
   COMMAREA.COWNCALC        = AEQCOMM.COWNCALC;             /* 8NSA */
   COMMAREA.IEMERGBO        = AEQCOMM.IEMERGBO;

   COMMAREA.HSTRTSUN        = PIC_HSTRTSUN;                 /* 4NSC */
   COMMAREA.HENDSUN         = PIC_HENDSUN;                  /* 4NSC */
   COMMAREA.HSTRTMON        = PIC_HSTRTMON;                 /* 4NSC */
   COMMAREA.HENDMON         = PIC_HENDMON;                  /* 4NSC */
   COMMAREA.HSTRTTUE        = PIC_HSTRTTUE;                 /* 4NSC */
   COMMAREA.HENDTUE         = PIC_HENDTUE;                  /* 4NSC */
   COMMAREA.HSTRTWED        = PIC_HSTRTWED;                 /* 4NSC */
   COMMAREA.HENDWED         = PIC_HENDWED;                  /* 4NSC */
   COMMAREA.HSTRTTHU        = PIC_HSTRTTHU;                 /* 4NSC */
   COMMAREA.HENDTHU         = PIC_HENDTHU;                  /* 4NSC */
   COMMAREA.HSTRTFRI        = PIC_HSTRTFRI;                 /* 4NSC */
   COMMAREA.HENDFRI         = PIC_HENDFRI;                  /* 4NSC */
   COMMAREA.HSTRTSAT        = PIC_HSTRTSAT;                 /* 4NSC */
   COMMAREA.HENDSAT         = PIC_HENDSAT;                  /* 4NSC */

   COMMAREA.CWARRPHS        = AEQCOMM.CWARRPHS;             /* 4NSC */
   COMMAREA.FONSITE         = AEQCOMM.FONSITE;              /* 4NSC */
   COMMAREA.ICVGTYPE        = AEQCOMM.ICVGTYPE;             /* 4NSC */
   COMMAREA.ISERVTYP        = AEQCOMM.ISERVTYP;             /* 4NSC */
   COMMAREA.ISTPMNT         = AEQCOMM.ISTPMNT;              /* 4NSC */
   COMMAREA.CSDTBILL        = AEQCOMM.CSDTBILL;             /* 4NSC */
   COMMAREA.IHELDCNTR       = AEQCOMM.IHELDCNTR;
   COMMAREA.ICADENT         = AEQCOMM.ICADENT;
      
   IF AEQCOMM.ICCAUTH ^= '' &         /*  SR 01007                 */
      (COMMAREA.S0CSVC = '01' |       /* (See INIT_BILL_DATA also) */
       COMMAREA.S0CSVC = '08' |
       COMMAREA.S0CSVC = '20' |       /* SC 20 & 36 added Aug.2002 */
       COMMAREA.S0CSVC = '36')
     THEN DO;
           COMMAREA.ICCAUTH = AEQCOMM.ICCAUTH;
        /*------------------------------------------------*/
        /* Reset the BA Code if this is a no-bill record. */
        /*------------------------------------------------*/
       IF XCOMM.BILL_DECISION = NOT_ELIGIBLE |
          XCOMM.BILL_DECISION = PENDED_REC |
          XCOMM.BILL_DECISION = NOBILL
         THEN DO;
           IF TEST_SW
             THEN DO;
               DIAG_TEXT = MODULE||': CREATE COMMAREA 7, '||
               ' before reset SOCBIOSA('|| COMMAREA.S0CBIOSA||
               ')cebbill('||COMMAREA.CEBBILL||')';
               CALL WRITE_TO_OPER;
             END;

           COMMAREA.S0CBIOSA = AEQCOMM.CEBBILL;
           COMMAREA.CEBBILL  = '';
         END;
     END;

   /*COMMAREA.TACTCOMT        = AEQCOMM.TACTCOMT;
   COMMAREA.IUNIQUE         = AEQCOMM.IUNIQUE;  */
   COMMAREA.IECCONUM        = AEQCOMM.IECCONUM;
   
   COMMAREA.FRSTCNTR        = AEQCOMM.FRSTCNTR;
   COMMAREA.FHVCNTR         = AEQCOMM.FHVCNTR;
   COMMAREA.FCORABND        = AEQCOMM.FCORABND;   
   COMMAREA.FLIABRECALC     = AEQCOMM.FLIABRECALC;
   COMMAREA.CMTMBASEW       = AEQCOMM.CMTMBASEW;  
   COMMAREA.COFRLIAB        = AEQCOMM.COFRLIAB;
   COMMAREA.CMPISPLN        = AEQCOMM.CMPISPLN;
   COMMAREA.ISVCCLAS        = AEQCOMM.ISVCCLAS;
   COMMAREA.ISVCTYPE        = AEQCOMM.ISVCTYPE;
   COMMAREA.TCALLRSP        = AEQCOMM.TCALLRSP;
   COMMAREA.TDALYHRS        = AEQCOMM.TDALYHRS;
   COMMAREA.DRECCALL        = AEQCOMM.DRECCALL;
   
                 /* END   OF AEQFLAGS ASSIGNMENTS -A/E MATCH FLAGS */

                                      /* INITIALIZE QBBILL SEGMENT  */
   COMMAREA.QBBILL          = '';

 /* --------------------------------------------------------------- */
 /* ANY CODE FOR COMMAREA.QBBILL GOES HERE BECAUSE THE              */
 /* SEGMENT NEEDS TO BE CLEARED OUT BEFORE MOVING ON                */
 /* --------------------------------------------------------------- */
 /*  GP021333 - 3NSE Do a direct assignment of csplchg              */
 /*  exempt SC 20 and 36, per call service ( not on file or on file */
 /*  and not on warranty)  if it not a depot QSAR from incident fee */
 /*  code assignment and not a PD/PSI branch office          PCR010 */
 /*  should be per call type of billing                     +4NSC   */
 /* --------------------------------------------------------------- */
 /*IF ( COMMAREA.S0CSVC  = '20'  |       /* incident fee pcr 010    */
 /*     COMMAREA.S0CSVC  = '36'  |
 /*    ( COMMAREA.M_MPI   = 'N'  |       /* not in inventory        */
 /*      (COMMAREA.M_MPI   = 'Y' &       /* on inventory as per call*/
 /*      (COMMAREA.GJCSTAT = '30' | COMMAREA.GJCSTAT = '33') ) &
 /*                             ^COMMAREA.FWARRNTY )   )
 /*                                      /* on inventory */
 /*                                      /*  (MPI or DSI)           */
 /*                                      /* as per call and past WED*/
 /*              &
 /*     ^((AEQCOMM.CMIBOCE = 'EN1' & AEQCOMM.CIICETER = 'O11') |
 /*       (AEQCOMM.CMIBOCE = 'EN2' & AEQCOMM.CIICETER = 'O22') |
 /*       (AEQCOMM.CMIBOCE = 'EN3' & AEQCOMM.CIICETER = 'O33'))
 /*                &
 /*       COMMAREA.ISOURCE = ''
 /*                                   /* AC 25 REMOTE SUPPORT CENTER*/
 /*                                   /* WILL HANDLE LATER          */
 /*  THEN DO
 /*    COMMAREA.QBBILL.CSPLCHG = ''
 /*    IF TEST_SW
 /*      THEN DO
 /*        DIAG_TEXT = 'QBBIL1:  3 BLANK OUT SPECIAL CHARGE'
 /*        CALL WRITE_TO_OPER
 /*      END
 /*
 /*    END
 /*    ELSE IF COMMAREA.CCOTYPE = 'U80'   */

   IF COMMAREA.CCOTYPE = 'U80'
     THEN COMMAREA.QBBILL.CSPLCHG = 'UPG';
     ELSE COMMAREA.QBBILL.CSPLCHG = AEQCOMM.CCOTYPE;

   /*---------------------------------------------------------------*/
   /* FITS GP0619035151                               September 2003*/
   /* New logic added to support PCD Stewart limited on-site service*/
   /* An IBILLSTAT value of 'L' indicates that labor and travel are */
   /* billable for a product on warranty.                           */
   /*---------------------------------------------------------------*/

   COMMAREA.CCDBILACT = AEQCOMM.IBILLSTAT;

   IF COMMAREA.IBILLSTAT = 'L'
     THEN XCOMM.IOL = 'Y';
     ELSE XCOMM.IOL = '';

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': CREATE COMMAREA 6,CSPLCHG = '||
                      COMMAREA.QBBILL.CSPLCHG||' CCOTYPE ' ||
                      COMMAREA.CCOTYPE;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': branch use '||COMMAREA.CBRANCH ||
                   'serial override '||COMMAREA.FSEROVRD;
       CALL WRITE_TO_OPER;
     END;

 END CREATE_COMMAREA;

 %PAGE;
 HVLC_LOGIC:  PROC;
 /*******************************************************************/
 /* SET HVLC INDICATOR IN BILLING DECISION COMMAREA                 */
 /*   XCOMM.HVLC_INDICATOR                                          */
 /* FOR CALL TO QBBILX1, QBBILX2.                                   */
 /*                                                                 */
 /* HVLC IS DETERMINED FROM PRODUCT TAXING CATEGORY IN MTM.         */
 /*******************************************************************/
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': START PROC HVLC_LOGIC PROCEDURE';
       CALL WRITE_TO_OPER;
     END;

    SELECT (COMMAREA.CTAXCD);
     WHEN('01','02','07','  ')
       XCOMM.HVLC_INDICATOR = HVLC;
     OTHERWISE
       XCOMM.HVLC_INDICATOR = NON_HVLC;
   END;
                                         /* THIS WILL INDICATE THE  */
                                         /* MIN HRS IS 1 HR ON SC   */
                                         /* 94 INVOICES             */
 /*******************************************************************/
 /* Commented out RQ4527 6NSH                                       */
 /*  IF COMMAREA.S0CSVC = '94'                                      */
 /*    THEN XCOMM.HVLC_INDICATOR = HVLC;                            */
 /*******************************************************************/
   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': - 28 HVLC_INDICATOR - '||
                               XCOMM.HVLC_INDICATOR;
       CALL WRITE_TO_OPER;
     END;

 END HVLC_LOGIC;

 %PAGE;
 BA_LOGIC:  PROC;
 /*******************************************************************/
 /* PERFORM B/A CODE LOGIC                                          */
 /*                                                                 */
 /* THIS ROUTINE SETS THE FOLLOWING (QBFLAGS):                      */
 /*   COMMAREA.BILL_DECISION                                        */
 /*           .PERFORM_PRICING                                      */
 /*           .SEND_TO_CE      -----   I = HSI, SEND MSG TO CE      */
 /*                                    D = HSD, SEND LEAVE HSD MSG  */
 /*                                    N = DON'T SEND ANY MESSAGE   */
 /*                                                                 */
 /* THIS ROUTINE MAY ALSO SET:                                      */
 /*   COMMAREA.QBBILL.CCONTROL                                      */
 /*                  .CBILLERR                                      */
 /*******************************************************************/
   IF TEST_SW
      THEN DO;
        DIAG_TEXT = MODULE||': IN THE BA_LOGIC PROCEDURE!';
        CALL WRITE_TO_OPER;
      END;

 /* FIRST, COPY QSAR DATA FOR INTERFACE TO DECISION LOGIC */
   XCOMM = AEQCOMM, BY NAME;

 BASELECT:
   SELECT (AEQCOMM.S0CBIOSA);

   /*---------------------------------------------------------------*/
   /* B/A = BLANK                                                   */
   /*   - PERFORM BILLABLE DECISION LOGIC                           */
   /*   - ATTEMPT TO FIND BILL DECISION FROM CAD DB                 */
   /*   - (IF BILLABLE) PERFORM BILLING CALCULATION AND             */
   /*   - SEND RESULTING INFO TO CE                                 */
   /*---------------------------------------------------------------*/
     WHEN(' ')
       DO;

         COMMAREA.CAD_MATCH = NO;

         IF COMMAREA.CCDBILACT = 'A '    /* IBM AND CUST AGREE NOT  */
           THEN CALL ASSIGN_BILL_DECISION(NOBILL,'CAD A - 63 ',
                                '- BA_LOGIC');
           ELSE CALL LINK_TO_QBBILX1;
                                         /* REMOVED CODE FOR CAD BA */
                                         /* = 'B'        S9300218   */
         SELECT (XCOMM.BILL_DECISION);
           WHEN(BILL)
             DO;
              COMMAREA.PERFORM_PRICING = YES;
              COMMAREA.SEND_TO_CE      = HSI;
              COMMAREA.CCONTROL        = 'QB';
             END;
           WHEN(NOBILL)
             DO;
              COMMAREA.PERFORM_PRICING = NO;
              COMMAREA.SEND_TO_CE      = NO;
             END;
           WHEN(REVIEW)
             DO;
              COMMAREA.PERFORM_PRICING = YES;
              COMMAREA.SEND_TO_CE      = HSD;
              COMMAREA.CCONTROL        = 'QP';
              COMMAREA.CBILLERR        = '214';
             END;
           OTHERWISE ;
         END;                            /* END OF SELECT             */

         COMMAREA.BILL_DECISION = XCOMM.BILL_DECISION;
   END;

 %PAGE;
   /*---------------------------------------------------------------*/
   /* B/A = '1'  (REVIEW)                                           */
   /*   - perform billable decision logic if not SC 94              */
   /*   - perform billing calculation                               */
   /*   - mark record for revenue exceptions (RES)                  */
   /*---------------------------------------------------------------*/
     WHEN('1')
       DO;
         IF COMMAREA.S0CSVC = '94'       /* SW WORK DO NOT CHECK    */
           THEN;
           ELSE CALL LINK_TO_QBBILX1;

         CALL ASSIGN_BILL_DECISION(REVIEW,'BA 1 - 64 ','- BA_LOGIC');

         COMMAREA.PERFORM_PRICING = YES;
         COMMAREA.SEND_TO_CE      = HSD;
         COMMAREA.CCONTROL        = 'QP';
         COMMAREA.CBILLERR        = '207';
       END;

   /*---------------------------------------------------------------*/
   /* B/A = '3'  (BILL)                                             */
   /*   - perform billing calculation                               */
   /*   - send resulting invoice info to CE                         */
   /*---------------------------------------------------------------*/
     WHEN('3')
       DO;
         CALL ASSIGN_BILL_DECISION(BILL,'BA 3 -  65 ','- BA_LOGIC');
         COMMAREA.PERFORM_PRICING = YES;
         COMMAREA.SEND_TO_CE      = HSI;
         COMMAREA.CCONTROL        = 'QB';
       END;

 %PAGE;
   /*---------------------------------------------------------------*/
   /* B/A = '4'  (NO BILL)                                          */
   /*   - perform billable decision logic                           */
   /*   - perform billing calculation                               */
   /*   - if decision is billable and machine HVLC or NON-HVLC then */
   /*     mark record for revenue exceptions (RES)                  */
   /*---------------------------------------------------------------*/
     WHEN('4')
       DO;
         CALL LINK_TO_QBBILX1;

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': AFTER link to QBBILX1, '||
                         ' BILL_DECISION = '|| XCOMM.BILL_DECISION;
             CALL WRITE_TO_OPER;
           END;

         SELECT (XCOMM.BILL_DECISION);
           WHEN(NOBILL)                  /* WE AGREE NOT BILLABLE   */
             DO;
               CALL ASSIGN_BILL_DECISION(NOBILL,'BA 4 - 66 ',
                                                     '- BA_LOGIC');
               COMMAREA.PERFORM_PRICING = NO;
               COMMAREA.SEND_TO_CE      = NO;
             END;
           OTHERWISE                    /* WE THINK IT'S BILLABLE OR*/
             DO;                        /* ...POTENTIALLY BILLABLE  */
               IF XCOMM.HVLC_INDICATOR = HVLC |
                  XCOMM.HVLC_INDICATOR = NON_HVLC
                   THEN DO;       /*IF HVLC OR NON-HVLC SEND TO RES */
                     CALL ASSIGN_BILL_DECISION(REVIEW,'BA 4 - 67 ',
                                         '- BA_LOGIC');
                     COMMAREA.PERFORM_PRICING = YES;
                     COMMAREA.SEND_TO_CE      = HSD;
                     COMMAREA.CCONTROL        = 'QP';
                     COMMAREA.CBILLERR        = '209';
                   END;
             END;
           END;

       END;  /* WHEN('4') */

     OTHERWISE; /* WOULD MEAN BAD B/A CODE.QSAR WON'T LET IT HAPPEN!*/

   END BASELECT;

 END BA_LOGIC;



 %PAGE;
 CHECK_REVIEW_CONDITIONS:  PROC;
 /*******************************************************************/
 /* CHECK FOR CONDITIONS WHICH FORCE REVIEW                         */
 /*******************************************************************/
 /*-----------------------------------------------------------------*/
 /* RULE:  CE OVERRIDES.                                            */
 /*        (HANDLED IN OVERRIDE TRANSACTION "QB02", PGM QBOVR1)     */
 /*                                                                 */
 /*        RESULTS IN CODES 1XX.                                    */
 /*-----------------------------------------------------------------*/
 /*-----------------------------------------------------------------*/
 /* RULE:  B/A '1' ON QSAR.                                         */
 /*        (HANDLED IN BA_LOGIC)                                    */
 /*                                                                 */
 /*        RESULTS IN CODE 207.                                     */
 /*-----------------------------------------------------------------*/

 /*-----------------------------------------------------------------*/
 /* RULE:  B/A '9' CHECK FAILS.                                     */
 /*        (HANDLED IN BA_LOGIC)                                    */
 /*                                                                 */
 /*        RESULTS IN CODE 208.                                     */
 /*-----------------------------------------------------------------*/

 /*-----------------------------------------------------------------*/
 /* RULE:  30% MACHINE.                                             */
 /*                                                                 */
 /*        RESULTS IN CODE 206.                                     */
 /*-----------------------------------------------------------------*/
 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': IN THE CHECK_REVIEW_CONDITIONS PROCEDURE!';
     CALL WRITE_TO_OPER;
   END;

 IF AEQCOMM.GJF30PCT
   THEN DO;
     CALL ASSIGN_BILL_DECISION(REVIEW,'30% - 68 ',
                                  '- CHECK_REVIEW_CONDITIONS');
     COMMAREA.PERFORM_PRICING = YES;
     COMMAREA.SEND_TO_CE = HSD;
     COMMAREA.CCONTROL = 'QP';
     COMMAREA.CBILLERR = '206';
   END;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /* RULE:  40% MACHINE.                                             */
 /*        NORMALLY THIS IS A "NO BILL" RULE HANDLED IN QBBILX1,    */
 /*        EXCEPT... IF THE CE HAS CODED A B/A = 3 (BILL) WE DON'T  */
 /*        GO THROUGH THE QBBILX1,2 LOGIC.  SO WE CHECK HERE FOR    */
 /*        A B/A = 3 AND FORCE THE ACTIVITY TO REVENUE EXCEPTIONS.  */
 /*                                                                 */
 /*        RESULTS IN CODE 206.                                     */
 /*                                                           I96093*/
 /*-----------------------------------------------------------------*/

 IF COMMAREA.BILL_DECISION = BILL
    & AEQCOMM.GJF40PCT
   THEN DO;
     CALL ASSIGN_BILL_DECISION(REVIEW,'40% -  69 ',
                             '- CHECK_REVIEW_CONDITIONS');

     COMMAREA.PERFORM_PRICING = YES;
     COMMAREA.SEND_TO_CE = HSD;
     COMMAREA.CCONTROL = 'QP';
     COMMAREA.CBILLERR = '206';
   END;

 /*-----------------------------------------------------------------*/
 /* RULE:  IF OTHERWISE BILLABLE (OR REVIEW)...                     */
 /*        AND WE HAVE AN MPI MATCH (AND RSO NOT 'UNA'VAILABLE)     */
 /*        IF SOURCED FROM AMIGO/KODAK                              */
 /*          AND 'OTHER OFFICE' DOES NOT EQUAL RSO                  */
 /*          AND QSAR "OTHER OFFICE" IS NOT BLANK.                  */
 /*                                                                 */
 /*        IF NOT SOURCED FROM AMIGO                                */
 /*          AND CE ASSIGNED OFFICE NOT EQUAL TO RSO                */
 /*          AND QSAR "OTHER OFFICE" IS BLANK.                      */
 /*                                                                 */
 /* RESULTS IN CMR/INV EXCEPTION 'R'.                               */
 /* NOW RESULTS IN CODE 201.   (WAS CMR EXCEPTION = 'R')            */
 /*-----------------------------------------------------------------*/

 IF (COMMAREA.BILL_DECISION = BILL | COMMAREA.BILL_DECISION = REVIEW)
      & AEQCOMM.M_MPI = 'Y'
      & AEQCOMM.GMIRSO ^= 'UNA'

    THEN IF AEQCOMM.CIICEAB ^= AEQCOMM.GMIRSO  &
            AEQCOMM.S0IOTBCW = ''
           THEN DO;

  /* -------------------------------------------------------------- */
  /*                             USED TO SET TO  R                  */
  /*   COMMAREA.CCMREXCP = 'R'   NO LONGER SET FOR THIS CONDITION   */
  /* -------------------------------------------------------------- */

             COMMAREA.CCMREXCP = '';
             CALL ASSIGN_BILL_DECISION(REVIEW,'CMR - 70 ',
                            '- CHECK_REVIEW_CONDITIONS');

             COMMAREA.PERFORM_PRICING = YES;
             COMMAREA.SEND_TO_CE = HSD;
             COMMAREA.CCONTROL = 'QP';
             COMMAREA.CBILLERR = '201';
           END;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /* RULE:  PART CANNOT BE PRICED.                                   */
 /*        (HANDLED IN QBBIL4)                                      */
 /*                                                                 */
 /*        RESULTS IN CODE 202.                                     */
 /*-----------------------------------------------------------------*/

 /*-----------------------------------------------------------------*/
 /* RULE:  TAXING CANNOT BE PERFORMED.                              */
 /*        (HANDLED IN QBBIL4)                                      */
 /*                                                                 */
 /*        RESULTS IN CODE 204.                                     */
 /*-----------------------------------------------------------------*/

 /*-----------------------------------------------------------------*/
 /* RULE:  CUSTOMER REFERENCE/TELEPHONE MISSING.                    */
 /*        (HANDLED IN QBCAD1)                                      */
 /*                                                                 */
 /*        RESULTS IN CODE 205.                                     */
 /*-----------------------------------------------------------------*/

 /*-----------------------------------------------------------------*/
 /*                                                                 */
 /*-----------------------------------------------------------------*/

 IF PENDED_PART = YES                    /* IF ANY TRLR IS PENDED...*/
   THEN DO;                              /* DON'T SEND INVOICE INFO */
     SELECT (COMMAREA.SEND_TO_CE);
       WHEN (HSI)
         DO;
           COMMAREA.SEND_TO_CE = HSD;
           COMMAREA.CSYSINV    = YES;
         END;
       WHEN (HSD, NO);
       OTHERWISE;
     END;
   END;

 /*-----------------------------------------------------------------*/
 /* ONLY THE QSAR WHICH ARE DETERMINED TO BE BILLABLE BUT DO NOT    */
 /* HAVE AN INVENTORY MATCH SHOULD GO TO CMR/INV MISMATCH FUNCTION  */
 /*-----------------------------------------------------------------*/

   IF AEQCOMM.M_MPI ^= YES & COMMAREA.CCONTROL = 'QB'
                                        /* CMR/INV EXCEPT - DCR9892E*/
     THEN  COMMAREA.QBBILL.CCMREXCP = 'C';

 /* ---------------------------------------------------------------- */
 /* No incident fee and SC 20 and IDM 3 or 4 and BA is 4      4nsc   */
 /* ---------------------------------------------------------------- */
   IF AEQCOMM.CCOTYPE    = ''  & AEQCOMM.S0CSVC = '20' &
       (AEQCOMM.S0CIDM   = '3' | AEQCOMM.S0CIDM = '4') &
        AEQCOMM.S0CBIOSA = '4'
     THEN DO;
       COMMAREA.PERFORM_PRICING = YES;
       COMMAREA.SEND_TO_CE      = HSD;
       COMMAREA.CCONTROL        = 'QP';
       COMMAREA.CBILLERR        = '231';
       CALL ASSIGN_BILL_DECISION(REVIEW,'SC20 - 71 ',
                      '- CHECK_REVIEW_CONDITIONS');
     END;

   /* ----------------------------------------------------------- */
   /* Service Code is 36 and activity code is 22 or 25, and there */
   /* is no incident fee and ba is not 3                    4nsc  */
   /* ----------------------------------------------------------- */
    IF AEQCOMM.CCOTYPE    = ''   & AEQCOMM.S0CSVC  = '36'  &
       (AEQCOMM.S0CHACT   = '22' | AEQCOMM.S0CHACT = '25') &
        AEQCOMM.S0CBIOSA ^= '3'
      THEN DO;
        COMMAREA.PERFORM_PRICING = YES;
        COMMAREA.SEND_TO_CE      = HSD;
        COMMAREA.CCONTROL        = 'QP';
        COMMAREA.CBILLERR        = '232';
        CALL ASSIGN_BILL_DECISION(REVIEW,'SC36 - 72 ',
                                 '- CHECK_REVIEW_CONDITIONS');
      END;

    /* ----------------------------------------------------------- */
    /* If the is a Uxx type incident fee but the branch is not an  */
    /* onsite branch, set RES error to 231                   4nsc  */
    /*RQ4649 : QLX will behave as Onsite branch & no longer will be*/
    /*      Depot like SQL/ACR                                     */ 
    /* Added TEMP_CTYPE       check for the RQ054527               */
    /* ----------------------------------------------------------- */
    IF TEMP_CTYPE = 'I'   &
      ( ( AEQCOMM.ISOURCE ^= '' & AEQCOMM.ISOURCE ^= 'QLX')
             | 
        PDPSI_OFFICE  )
      THEN DO;
        COMMAREA.PERFORM_PRICING = YES;
        COMMAREA.SEND_TO_CE      = HSD;
        COMMAREA.CCONTROL        = 'QP';
        COMMAREA.CBILLERR        = '231';
        CALL ASSIGN_BILL_DECISION(REVIEW,'INCDT - 73 ',
                                 '- CHECK_REVIEW_CONDITIONS');
      END;

    /* ----------------------------------------------------------- */
    /* If the is a Dxx type incident fee but the branch is not a   */
    /* depot, set RES error to 231                           4nsc  */
    /*RQ4649 : QLX will behave as Onsite branch & no longer will be*/
    /*         Depot like SQL/ACR                                  */ 
    /* Added TEMP_CTYPE check for the RQ054527                     */
    /* ----------------------------------------------------------- */
    IF TEMP_CTYPE       = 'D'   &
      ( AEQCOMM.ISOURCE = ''    |  AEQCOMM.ISOURCE = 'QLX' |
        PDPSI_OFFICE  )
      THEN DO;
        COMMAREA.PERFORM_PRICING = YES;
        COMMAREA.SEND_TO_CE      = HSD;
        COMMAREA.CCONTROL        = 'QP';
        COMMAREA.CBILLERR        = '231';
        CALL ASSIGN_BILL_DECISION(REVIEW,'INCDT - 74 ',
                                 '- CHECK_REVIEW_CONDITIONS');
      END;


    /* ----------------------------------------------------------- */
    /* If the is a Rxx type incident fee but the branch is not an  */
    /* PD/PSI branch, set RES error to 231                   4nsc  */
    /* ----------------------------------------------------------- */
    IF SUBSTR(AEQCOMM.CCOTYPE,1,1) = 'R'   & ^PDPSI_OFFICE 
      THEN DO;
        COMMAREA.PERFORM_PRICING = YES;
        COMMAREA.SEND_TO_CE      = HSD;
        COMMAREA.CCONTROL        = 'QP';
        COMMAREA.CBILLERR        = '231';
        CALL ASSIGN_BILL_DECISION(REVIEW,'INCDT - 75 ',
                                 '- CHECK_REVIEW_CONDITIONS');
      END;

 END CHECK_REVIEW_CONDITIONS;

 %PAGE;
 INIT_BILL_DATA:  PROC;
 /*******************************************************************/
 /* INITIALIZE BILLING DATA IN COMMAREA                             */
 /*******************************************************************/
 IF TEST_SW
   THEN DO;
     DIAG_TEXT = MODULE||': START INIT_BILL_DATA, '||
                 ' BILL_DECISION = '|| XCOMM.BILL_DECISION;
     CALL WRITE_TO_OPER;
   END;

 DCL 1 ZIP_OVER BASED(ADDR(AEQCOMM.S0CZIPCDE)),
       3 ZIP5   CHAR(5),
       3 ZIP4   CHAR(4);
   ET_TEXT1 = '';
   ET_TEXT2 = '';
                                       /* SET QBFLAGS ENTRIES      */
                                       /* NOT SET BY BA_LOGIC      */
   COMMAREA.ORIG_TLR_DOC = '';
   COMMAREA.CAD_MATCH    = '';
   COMMAREA.HVLC_INDICATOR = XCOMM.HVLC_INDICATOR;

 /*-----------------------------------------------------------------*/
 /* SET QBBILL SEGMENT ENTRIES                                      */
 /*-----------------------------------------------------------------*/

   COMMAREA.CHVLC = XCOMM.HVLC_INDICATOR;   /* HVLC INDICATOR-I86938*/

   COMMAREA.QBBILL.CCPFIN = AEQCOMM.CGCBILCL;/*USE BILL CLASS-I88668*/

   IF AEQCOMM.GJICUST > 0              /* IF MPI/CMR CUSTOMER NUMBER*/
                                       /* THEN USE IT               */
     THEN DO;
       PIC_ICUST = AEQCOMM.GJICUST;
       COMMAREA.QBBILL.ICUST = PIC_ICUST;
     END;
                                       /* ELSE USE QSAR/CE CUST NO. */
     ELSE COMMAREA.QBBILL.ICUST = AEQCOMM.S0ICUST;
    
 

 /*-----------------------------------------------------------------*/
 /* IF A/E HAS MATCHED CMR THEN INVOKE RULE FOR DETERMINING         */
 /* TYPE CUSTOMER, TAX CLASS, AND STATE/COUNTY/CITY CODES.          */
 /* OTHERWISE, WE DEFAULT THE CUSTOMER TO COMMERCIAL AND TAXABLE,   */
 /* AND TRY TO PICK UP STATE/COUNTY/CITY CODES FROM ZIP TABLE MATCH */
 /* IN QBBIL2.                                                      */
 /*-----------------------------------------------------------------*/
   IF AEQCOMM.M_MPI = YES                /* MPI/CMR MATCH           */
        & AEQCOMM.CGCTCUS1 > ''          /* AND YOU DID GET DATA    */
                                         /* BACK FROM CMR  PCR010   */
     THEN DO;
       CALL TAX_CLASS_LOGIC;
     END;
     ELSE DO;                            /* NO MATCH...DEFAULT:     */
       COMMAREA.QBBILL.CTCUS  = 'A';     /* TYPE CUST: COMMERCIAL   */
       COMMAREA.QBBILL.CTAXCL = '000';   /* TAX CLASS: TAXABLE      */
     END;

   IF COMMAREA.QBBILL.CTCUS  = ' ' &
       COMMAREA.QBBILL.CTAXCL = ' '
     THEN DO;                            /* DEFAULT:                */
       COMMAREA.QBBILL.CTCUS  = 'A';     /* TYPE CUST: COMMERCIAL   */
       COMMAREA.QBBILL.CTAXCL = '000';   /* TAX CLASS: TAXABLE      */
     END;

    SELECT (COMMAREA.QBBILL.CTCUS);      /* SET FEDERAL ACCOUNT ID  */
      WHEN('B','E','U','V')              /* BASED ON CUSTOMER TYPE  */
        COMMAREA.QBBILL.IFEDID = 'Y';
      OTHERWISE
        COMMAREA.QBBILL.IFEDID = 'N';
    END;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /* IF HAVE RSO THEN SERVICE OFFICE <- RSO.                         */
 /* ELSE IF NO RSO THEN...                                          */
 /*   IF OTHER OFFICED WORKED NOT BLANK                             */
 /*     THEN SERVICE OFFICE <- OTHER OFFICED WORKED                 */
 /*     ELSE SERVICE OFFICE <- CE ASSIGNED BO FROM EDF.             */
 /*-----------------------------------------------------------------*/

   IF AEQCOMM.M_MPI = 'Y'
     & AEQCOMM.GMIRSO ^= ''
     & AEQCOMM.GMIRSO ^= 'UNA'
     & AEQCOMM.GMIRSO ^= LOW(3)        /* DO NOT HAVE INVENTORY     */
     THEN COMMAREA.QBBILL.CBOSVC = AEQCOMM.GMIRSO;
     ELSE IF AEQCOMM.S0IOTBCW ^= '' & AEQCOMM.S0IOTBCW ^= LOW(3)
            THEN COMMAREA.QBBILL.CBOSVC = AEQCOMM.S0IOTBCW;
            ELSE COMMAREA.QBBILL.CBOSVC = AEQCOMM.CIICEAB;

   IF COMMAREA.QBBILL.CBOSVC = LOW(3)
     THEN COMMAREA.QBBILL.CBOSVC = '';
                                        /* OUTSIDE CITY LIMITS FLAG */
   IF AEQCOMM.CGFOCL                    /* I138122                  */
     THEN COMMAREA.QBBILL.COCL = '1';
     ELSE COMMAREA.QBBILL.COCL = '0';
                                        /* ZIP CODE                 */
   IF ZIP4 = '0000'
     THEN COMMAREA.QBBILL.CZIP = ZIP5 ||' ';
     ELSE COMMAREA.QBBILL.CZIP = AEQCOMM.S0CZIPCDE;

                                        /* CUSTOMER REFERENCE       */
   COMMAREA.QBBILL.TCUSTREF = AEQCOMM.S8CUSTRF;

 %PAGE;
 /*-----------------------------------------------------------------*/
 /* SET SYSTEM INVOICE REQUIRED INDICATOR BASED ON BILLABLE DECISION*/
 /* A "BILL" ASSUMES CE HAS LEFT AN HSI (INVOICE).                  */
 /* A "REVIEW" ASSUMES CE HAS LEFT AN HSD AND CIS MUST CUT INVOICE. */
 /*-----------------------------------------------------------------*/
   SELECT (COMMAREA.BILL_DECISION);
     WHEN(BILL)   COMMAREA.QBBILL.CSYSINV = NO;
     WHEN(REVIEW) COMMAREA.QBBILL.CSYSINV = YES;
     OTHERWISE;
   END;

   IF AEQCOMM.S0ISRCNS |                 /* IF SOURCE IS NSDC  OR   */
      AEQCOMM.S0IRESUB |                 /* NSDC RESUBMIT  OR       */
      AEQCOMM.S0IRECYC                   /* RECYCLE THEN ...        */
     THEN DO;                            /* NO MESSAGE TO CE        */
       COMMAREA.SEND_TO_CE = NO;         /* (MAY OVERRIDE BA_LOGIC) */
                                         /* SYSTEM MUST INVOICE CUST*/
       SELECT (COMMAREA.BILL_DECISION);  /* I88190                  */
         WHEN(BILL)   COMMAREA.QBBILL.CSYSINV = YES;
         WHEN(REVIEW) COMMAREA.QBBILL.CSYSINV = YES;
         OTHERWISE;
       END;

     END;

   IF AEQCOMM.S0QSVCHR = ''
     THEN COMMAREA.QBBILL.QACTHRS   = '000';
     ELSE COMMAREA.QBBILL.QACTHRS   = AEQCOMM.S0QSVCHR;

   IF AEQCOMM.S0QTRAHR = ''
     THEN COMMAREA.QBBILL.QTRAHRS   = '000';
     ELSE COMMAREA.QBBILL.QTRAHRS   = AEQCOMM.S0QTRAHR;

   /*----------------------------------------------------------------*/
   /* Add new fields to qbsbill.                                 4NSC*/
   /*----------------------------------------------------------------*/
   COMMAREA.QBBILL.FBILACTH = AEQCOMM.FBILACTH; /* BILL ACTUAL HOURS */
   COMMAREA.QBBILL.FBILTRVH = AEQCOMM.FBILTRVH; /* BILL TRAVEL HOURS */
   COMMAREA.QBBILL.FBILPART = AEQCOMM.FBILPART; /* BILL PARTS        */
   COMMAREA.QBBILL.FBILDIST = AEQCOMM.FBILDIST; /* BILL DISTANCE     */
   COMMAREA.QBBILL.FBILEXP  = AEQCOMM.FBILEXP;  /* BILL EXPENSES     */
   COMMAREA.QBBILL.IENTSRC  = AEQCOMM.IENTSRC;  /*ENTITLEMENT SOURCE */

   IF AEQCOMM.ICVGTYPE = ''
     THEN COMMAREA.QBBILL.ICVGTYPE = 'PC';     /* set to 'PC' for   */
                                               /* percall if blank  */
     ELSE COMMAREA.QBBILL.ICVGTYPE =AEQCOMM.ICVGTYPE;
                                              /*e.g.WARR,W/U,CONT,MA*/
   COMMAREA.QBBILL.ISERVTYP = AEQCOMM.ISERVTYP;/* SERVICE TYPE      */
                                               /* e.g., IOR,IOE,EZS */
   COMMAREA.QBBILL.FONSITE  = AEQCOMM.FONSITE; /*ONSITE COVERAGE Y/N*/

   PIC4                      = START(1);
   COMMAREA.QBBILL.HDAY1STRT = PIC4;       /* START TIME CURR DAY -2*/
   PIC4                      = END(1);
   COMMAREA.QBBILL.HDAY1STOP = PIC4;       /* END   TIME CURR DAY -2*/
   PIC4                      = START(2);
   COMMAREA.QBBILL.HDAY2STRT = PIC4;       /* START TIME CURR DAY -1*/
   PIC4                      = END(2);
   COMMAREA.QBBILL.HDAY2STOP = PIC4;       /* END   TIME CURR DAY -1*/
   PIC4                      = START(3);
   COMMAREA.QBBILL.HDAY3STRT = PIC4;       /* START TIME CURR DAY   */
   PIC4                      = END(3);
   COMMAREA.QBBILL.HDAY3STOP = PIC4;       /* END   TIME CURR DAY   */

 /*-----------------------------------------------------------------*/
 /* ASSIGN QBPARTS SEGMENTS FROM TEMP_PARTS                         */
 /*-----------------------------------------------------------------*/
   DO I=1 TO COMMAREA.X#PARTS;
      IF TEST_SW
        THEN DO;
          DIAG_TEXT = MODULE||': PARTS-' || I || TEMP_PARTS(I).IPART||
                          ' ' || TEMP_PARTS(I).QDISUS   || ' ' ||
                                 TEMP_PARTS(I).NPARTDSC || ' ' ||
                                 TEMP_PARTS(I).APARTPR;
          CALL WRITE_TO_OPER;/* ***** TEST ONLY ***** */
        END;

      COMMAREA.QBPARTS(I).IPART    = TEMP_PARTS(I).IPART;
      COMMAREA.QBPARTS(I).QDISUS   = TEMP_PARTS(I).QDISUS;
      COMMAREA.QBPARTS(I).NPARTDSC = TEMP_PARTS(I).NPARTDSC;

      COMMAREA.QBPARTS(I).APARTPR  = TEMP_PARTS(I).APARTPR;
      COMMAREA.QBPARTS(I).APARTAMT = 0;

      COMMAREA.QBPARTS(I).APSTATTX = 0;
      COMMAREA.QBPARTS(I).APCNTYTX = 0;
      COMMAREA.QBPARTS(I).APCITYTX = 0;
      COMMAREA.QBPARTS(I).SPAD01   = '';
   END;

 /* --------------------------------------------------------------- */
 /* the following code may not be valid anymore since we no longer  */
 /* assign 'U' in batch QBSDTCK (QB4259).              lbs 4NSC     */
 /* --------------------------------------------------------------- */
   IF AEQCOMM.GJCSDT ^= '' &          /* YOU HAVE A SDT VALUE AND A */
 /*   AEQCOMM.CSDTBILL = 'U'       /* ONE TIME UPGRADE CHRG  rcq1882*/
      PHASE_ARRAY(CURR_PHASE).CSDTBILL = 'U' /*ONE TIME UPGRADE CHRG*/
       THEN IF AEQCOMM.CCOTYPE ^= ''  /* IF CAD INDICATES INCIDENT  */
                                      /* FEE APPLIES, FIRST USE THE */
                                      /* INCIDENT FEE NOT THE SDT   */
              THEN COMMAREA.QBBILL.CSPLCHG = AEQCOMM.CCOTYPE;
              ELSE COMMAREA.QBBILL.CSPLCHG = 'SDT';
              
   COMMAREA.QBBILL.NCONTACT = AEQCOMM.UMISCELL.NCONTACT;
   COMMAREA.QBBILL.ICONPHON = COMMAREA.ICONPHON; /* AND PHONE       */

   IF AEQCOMM.FIBM
     THEN COMMAREA.QBBILL.CINTERNAL = YES;
     ELSE COMMAREA.QBBILL.CINTERNAL = NO;  /* init field            */

   IF AEQCOMM.ICCAUTH ^= ''   &        /*  SR 01007                 */
      (COMMAREA.S0CSVC = '01' |
       COMMAREA.S0CSVC = '08' |
       COMMAREA.S0CSVC = '20' |        /* SC 20 & 36 added Aug.2002 */
       COMMAREA.S0CSVC = '36')
      THEN COMMAREA.QBBILL.ICCAUTH = COMMAREA.ICCAUTH;

  IF TEST_SW
    THEN DO;
      DIAG_TEXT = MODULE||': END INIT_BILL_DATA, '||
                  ' BILL_DECISION = '|| XCOMM.BILL_DECISION||
                  ' CSPLCHG ('|| COMMAREA.QBBILL.CSPLCHG||')';
      CALL WRITE_TO_OPER;
    END;

 END INIT_BILL_DATA;

 %PAGE;
 TAX_CLASS_LOGIC:  PROC;
 /*******************************************************************/
 /* SET TYPE CUSTOMER/TAX CLASS                                     */
 /*                                                                 */
 /* MULTIPLE TYPE CUSTOMERS/TAX CLASSES ARE HANDLED AS FOLLOWS:     */
 /* 1. IF ALL TAX CLASS FIELDS ARE OTHER THAN "0" THEN THE FIRST    */
 /*    IS SELECTED.                                                 */
 /* 2. IF ONE OF THE TAX CLASS FIELDS CONTAINS A "0" THEN THAT ONE  */
 /*    IS SELECTED.                                                 */
 /* 3. IF MORE THAN ONE OF THE TAX CLASS FIELDS CONTAIN A "0" THEN  */
 /*    THE FIRST ONE CONTAINING A "0" IS SELECTED.                  */
 /*                                                                 */
 /* THIS ROUTINE SETS:                                              */
 /*   COMMAREA.QBBILL.CTCUS     TYPE CUSTOMER                       */
 /*                  .CTAXCL    TAX CLASS                           */
 /*                  .CSTATCD   STATE  CODE                         */
 /*                  .CCNTYCD   COUNTY CODE                         */
 /*                  .CCITYCD   CITY   CODE                         */
 /*******************************************************************/
 DCL PIC_CODES  PIC'(9)9';           /* FOR STATE/COUNTY/CITY CODES */
 DCL 1 CODES    BASED(ADDR(PIC_CODES)),     /* CHAR OVERLAY OF ABOVE*/
       3 STATE  CHAR(2),
       3 COUNTY CHAR(3),
       3 CITY   CHAR(4);
 DCL TYPECUS(3)    CHAR(1);
 DCL TAXCLASS(3)   CHAR(3);
 DCL KEEPER_CTCUS  CHAR(1);
 DCL KEEPER_CTAXCL CHAR(3);

   TYPECUS(1)    = AEQCOMM.CGCTCUS1;
   TAXCLASS(1)   = AEQCOMM.CGCTAX1;
   TYPECUS(2)    = AEQCOMM.CGCTCUS2;
   TAXCLASS(2)   = AEQCOMM.CGCTAX2;
   TYPECUS(3)    = AEQCOMM.CGCTCUS3;
   TAXCLASS(3)   = AEQCOMM.CGCTAX3;

   KEEPER_CTCUS  = AEQCOMM.CGCTCUS1;
   KEEPER_CTAXCL = AEQCOMM.CGCTAX1;

   DO I=2 TO 3 WHILE(TYPECUS(I) ^= ' ');
      IF VERIFY('0',TAXCLASS(I))    = 0   /* '0' IN THE NEW ONE     */
       & VERIFY('0',KEEPER_CTAXCL) ^= 0   /* BUT NOT IN THE OLD...  */
        THEN DO;
          KEEPER_CTCUS  = TYPECUS(I);
          KEEPER_CTAXCL = TAXCLASS(I);
        END;
   END;

   COMMAREA.QBBILL.CTCUS    = KEEPER_CTCUS;
   COMMAREA.QBBILL.CTAXCL   = KEEPER_CTAXCL;
   PIC_CODES                = AEQCOMM.CGCCD;
   COMMAREA.QBBILL.CSTATCD  = CODES.STATE;
   COMMAREA.QBBILL.CCNTYCD  = CODES.COUNTY;
   COMMAREA.QBBILL.CCITYCD  = CODES.CITY;

 END TAX_CLASS_LOGIC;



 %PAGE;
 LINK_TO_QBBILX1: PROC;
 /*******************************************************************/
 /* LINK TO BILLABLE DECISION LOGIC (QBBILX1 -> QBBILX2)            */
 /*                                                                 */
 /* COMMUNICATE VIA "XCOMM" COMMAREA.                               */
 /*******************************************************************/
   IF PSB_SCHEDULED
     THEN DO;
       EXEC DLI TERMINATE;
     END;

   EXEC CICS LINK PROGRAM('QBBILX1')
                  COMMAREA(XCOMM)
                  RESP(RESPONSE)
                  RESP2(RESPONSE2);

   IF RESPONSE ^= DFHRESP(NORMAL)       /* IF ABNORMAL RESPONSE THEN*/
     THEN DO;                           /* PASS CONTROL TO ERROR PGM*/
       ET_TEXT1 = ERR2 || MODULE ||' FAILURE ON LINK TO QBBILX1';
       SIGNAL ERROR;
     END;

 END LINK_TO_QBBILX1;

  %PAGE;
 PRINT_NOT_PARTOF_OH: PROC(LOCATION) REORDER;
 /*******************************************************************/
 /* WRITE BILL DECISION INDICATOR     - ** FOR TEST ONLY **         */
 /*******************************************************************/
   DCL LOCATION      CHAR (2);

   DIAG_TEXT = MODULE||': NOT PART OF OUTSIDE HOURS, RULE - '||
                LOCATION;
   CALL WRITE_TO_OPER; /* ******* TEST ONLY ****** */

 END PRINT_NOT_PARTOF_OH;

 %PAGE;
 FIND_UPGRADE_RATE: PROC;
 /*******************************************************************/
 /* FIND THE ONE TIME ENTITLEMENT UPGRADE RATE, KEY IS THE INCIDENT */
 /* FEE CODE ON THE  STANDARD RATE FILE TO GET THE CURRENT UPGRADE  */
 /* CHARGE.  THE CALL MUST BE AFTER THE EFFECTIVE DATE AND BEFORE   */
 /* ANY ADDITIONAL RATE EFFECTIVE DATES.                            */
 /* IF THE UPGRADE RATE OR KEY IS NOT FOUND THEN  SIGNAL ERROR.     */
 /*******************************************************************/


   DCL STDKEY             CHAR(16)     INIT('');
   DCL STD_SEARCH_KEY     CHAR( 3)     INIT('');

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': IN FIND UPGRADE RATE'||' DOC= '||
                        AEQCOMM.S0IDOCMN||' KEY= '||
                        AEQCOMM.CCOTYPE;
       CALL WRITE_TO_OPER;
     END;

   IF AEQCOMM.CCOTYPE  = 'SDT'          /* there is not a SDT code  */
     THEN STDKEY = 'UPG';               /* need to set the UPG code */
     ELSE STDKEY = AEQCOMM.CCOTYPE;     /* GP021333 - 3NSE          */

   STD_SEARCH_KEY = SUBSTR(STDKEY,1,3);
   EXEC CICS STARTBR FILE('QBSTDRAT')
                     RIDFLD(STDKEY)
                     KEYLENGTH(5)
                     RESP(RESPONSE)
                     RESP2(RESPONSE2)
                     GENERIC GTEQ;

   SELECT(RESPONSE);
     WHEN (DFHRESP(NORMAL))
      DO;

        IF TEST_SW
          THEN DO;
           DIAG_TEXT = MODULE||': first lookup >= key found, key '||
                 SUBSTR(STDKEY,1,3);
           CALL WRITE_TO_OPER;

         END;
      END;

     WHEN (DFHRESP(DSIDERR))             /* FILE NOT FOUND          */
       DO;
         ET_TEXT1 = 'QSR9002: QBBIL1  FILE NOT FOUND (QBSTDRAT)';
         SIGNAL ERROR;
       END;

     WHEN (DFHRESP(NOTFND))              /* KEY NOT FOUND           */
       DO;
        ET_TEXT1 = 'QSR9002: QBBIL1  KEY ' || STDKEY ||
                   'NOT FOUND ON STD RATE FILE (QBSTDRAT)';
        EXEC CICS WRITE OPERATOR TEXT(ET_TEXT1);
        PIC3 = RESPONSE;
        PIC7 = RESPONSE2;
        ET_TEXT2 = 'QSR9002: QBBIL1  KEY=' || STDKEY ||
                   ' RESP= '|| PIC3 || ' RESP2= '||PIC7;
        EXEC CICS WRITE OPERATOR TEXT(ET_TEXT2);

        /*     SIGNAL ERROR  */
        AEQCOMM.CCOTYPE  = '';        /* remove invalid upgrade code*/
                                      /* pcr0011 2/24/2003          */
         /*  CALL ASSIGN_REVIEW_INFORMATION('231','28')        3nse */
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||
                              ': First Lookup, key not found, ERR 231';
            CALL WRITE_TO_OPER;
          END;

       END;
     OTHERWISE                         /* OTHER VSAM ERROR         */
       DO;
         ET_TEXT1 = 'QSR9002: QBBIL1  ERROR ON STARTBR OF ' ||
                    'STANDARD RATE FILE (QBSTDRAT)';
         PIC3 = RESPONSE;
         PIC7 = RESPONSE2;
         ET_TEXT2 = 'QSR9002: QBBIL1  KEY=' || STDKEY ||
                                   ' RESP= '||PIC3 ||' RESP2= '||PIC7;
         SIGNAL ERROR;
       END;
   END;   /* END SELECT */

   /* ----------------------------------------------------------- */
   /* Get next record                                             */
   /* ----------------------------------------------------------- */
   /* THE SIGNAL ERROR CONDITION ON THE NOT FOUND CONDITION ABOVE */
   /* WAS REMOVED SO THAT IT COULD FIND NOT CAUSE A PROBLEM SO    */
   /* SO THE RESPONSE HAS TO BE CHECKED FOR NORMAL PROCESSING     */
   /* ----------------------------------------------------------- */
 IF RESPONSE = DFHRESP(NORMAL)
   THEN DO;
     IF TEST_SW
       THEN DO;
         DIAG_TEXT = MODULE||': Before second lookup csplchg, KEY('||
                  SUBSTR(STDKEY,1,3)||') RATEFILE('||STANDARD.CRATTYP
                  ||')';
         CALL WRITE_TO_OPER;
         DIAG_TEXT = MODULE||': CALL DATE, ('|| PRICE.DCALL||
                 ') ratefile DATE('|| STANDARD.DEFFDTE||')';
         CALL WRITE_TO_OPER;
       END;

     RECD_LENGTH = 80;

     EXEC CICS READNEXT FILE('QBSTDRAT')
                        RIDFLD(STDKEY)
                        INTO (STANDARD)
                        LENGTH(RECD_LENGTH)
                        RESP(RESPONSE)
                        RESP2(RESPONSE2);

     IF TEST_SW
       THEN DO;
          DIAG_TEXT = MODULE||
                   ': second look/normal resp csplchg, KEY('||
                  SUBSTR(STDKEY,1,3)||') RATEFILE('||STANDARD.CRATTYP
                  ||')';
          CALL WRITE_TO_OPER;
          DIAG_TEXT = MODULE||': ACTIVITY DATE, ('|| PRICE.DCALL||
                 ') ratefile DATE('|| STANDARD.DEFFDTE||')';
          CALL WRITE_TO_OPER;
        END;

   /*-----------------------------------------------------------*/
   /* MN16942409 (Dec.2003) - Add the check for CSPLCHG = 'SDT' */
   /*         so the 'UPG' rate can be used as the SDT upgrade. */
   /*-----------------------------------------------------------*/
      IF AEQCOMM.CCOTYPE  ^= 'SDT'              &
         AEQCOMM.CCOTYPE  ^=  STANDARD.CRATTYP  &
          (PRICE.DCALL    >=  STANDARD.DEFFDTE  |
           PRICE.DCALL    ^=  '')
         THEN DO;
           IF TEST_SW
             THEN DO;
               DIAG_TEXT = MODULE||': 1 blank out spl charge '||
                         AEQCOMM.CCOTYPE;
               CALL WRITE_TO_OPER;
             END;

           AEQCOMM.CCOTYPE  = '';     /* remove invalid upgrade code*/
                                      /* pcr0011 / 3NSE             */
           /* CALL ASSIGN_REVIEW_INFORMATION('231','27')       3nse */

         END;

     DO WHILE ( PRICE.DCALL      >= STANDARD.DEFFDTE  &
                RESPONSE         ^= DFHRESP(ENDFILE)  &
               (AEQCOMM.CCOTYPE  = SUBSTR(STDKEY,1,3) |
       /*       &  AEQCOMM.CGCBILCL = SUBSTR(STDKEY,5,1) ) 6NSH 4527*/                                     
             (AEQCOMM.CCOTYPE = 'SDT' & SUBSTR(STDKEY,1,3)= 'UPG')) );

       SELECT(RESPONSE);
         WHEN (DFHRESP(NORMAL))
           DO;
         /* -------------------------------------------------- */
         /*    IF COMMAREA.CCOTYPE ^= STANDARD.CRATTYP  &      */
         /*       PRICE.DCALL      <  STANDARD.DEFFDTE  THEN   */
         /*         CALL ASSIGN_REVIEW_INFORMATION('231','29') */
         /*    ELSE                                            */
         /*      DO                                            */
         /* -------------------------------------------------- */
             CALL ASSIGN_BILL_DECISION(BILL,'UPGDE - 76','- HSI SET');
  
       /*-------------- Commented out RQ05427----------------- */ 
       /*    AEQCOMM.FBILACTH    = 'Y';                        */
       /*    AEQCOMM.FBILTRVH    = 'Y';                        */
       /* ---------------------------------------------------- */

         
              AEQCOMM.FBILACTH    = STANDARD.FBILACTH;
              AEQCOMM.FBILTRVH    = STANDARD.FBILTRVH;
              AEQCOMM.FBILEXP     = STANDARD.FBILEXP;
              AEQCOMM.FBILDIST    = STANDARD.FBILDIST;
              
             IF STANDARD.CTYPE = 'D'
               THEN DO;
                 IF AEQCOMM.FINCDPRT  = 'Y' 
                    THEN DO;
                       AEQCOMM.FBILPART = STANDARD.FBILPART;
                    END;
               END;
             ELSE AEQCOMM.FBILPART   = STANDARD.FBILPART;


             IF TEST_SW
               THEN DO;
                 DIAG_TEXT = MODULE||
                    ': Second csplchg lookup key found, key ('||
                        STDKEY||') rate= '|| STANDARD.AINRATE;
                 CALL WRITE_TO_OPER;
                 DIAG_TEXT = MODULE||': DCALL '||PRICE.DCALL||
                       ' DEFFEDTE ('|| STANDARD.DEFFDTE||')';
                CALL WRITE_TO_OPER;

              END;
           END;

         WHEN (DFHRESP(DSIDERR))    /* FILE NOT FOUND               */
           DO;                      /* PASS CONTROL TO ERROR PGM    */
             ET_TEXT1 = 'QSR9002: QBBIL1  FILE NOT FOUND (QBSTDRAT)';
             SIGNAL ERROR;
           END;

         WHEN (DFHRESP(NOTFND))     /* KEY NOT FOUND                */
           DO;                      /* PASS CONTROL TO ERROR PGM    */
             ET_TEXT1 ='QSR9002: QBBIL1 UPGRADE RATE KEY NOT FOUND '||
                        'ON QBSTDRAT';
             PIC3 = RESPONSE;
             PIC7 = RESPONSE2;
             ET_TEXT2 = 'QSR9002: QBBIL1  KEY= ' || STDKEY||
                                        ' RESP= '|| PIC3 ||
                                       ' RESP2= '||PIC7;
             /* SIGNAL ERROR */
             IF TEST_SW
               THEN DO;
                 DIAG_TEXT = MODULE||': 2 blank out spl charge '||
                              AEQCOMM.CCOTYPE;
                 CALL WRITE_TO_OPER;
                 DIAG_TEXT = MODULE||
                                 ': Second csplchg lookup, key not '||
                                 'found, was ERR 231';
                 CALL WRITE_TO_OPER;
               END;

             AEQCOMM.CCOTYPE  = '';   /* remove invalid upgrade code*/
                                      /* pcr0011 3nse               */
             /* CALL ASSIGN_REVIEW_INFORMATION('231','30') */
           END;
         OTHERWISE                   /* ALL OTHER ERRORS           */
           DO;                       /* PASS CONTROL TO ERROR PGM  */
             ET_TEXT1 = 'QSR9002: QBBIL1, ERROR ON READNEXT OF ' ||
                        'STANDARD RATE FILE (QBSTDRAT)';
             PIC3 = RESPONSE;
             PIC7 = RESPONSE2;
             ET_TEXT2 = 'QSR9002: QBBIL1 KEY=' || STDKEY||
                                      ' RESP= '|| PIC3 ||
                                     ' RESP2= '||PIC7;
             SIGNAL ERROR;
           END;
       END;  /* END SELECT */

       EXEC CICS IGNORE CONDITION ENDFILE;
       EXEC CICS READNEXT FILE('QBSTDRAT')
                          RIDFLD(STDKEY)
                          INTO (STANDARD)
                          LENGTH(RECD_LENGTH)
                          RESP(RESPONSE)
                          RESP2(RESPONSE2);

     END;                              /*   END OF DO               */

     EXEC CICS ENDBR FILE('QBSTDRAT');
   END;

    IF TEST_SW
      THEN DO;
        DIAG_TEXT = MODULE||': exit find_upgrade_rate';
        CALL WRITE_TO_OPER;
      END;

 END FIND_UPGRADE_RATE;

 /*******************************************************************/
 /* FIND NON Standard rate code name is changed to FIND_INCIDENT_COD*/
 /* E_CATEGORY for the FITS RQ054527                  FITS RQ057017 */
 /*******************************************************************/

 %PAGE;
 FIND_INCIDENT_CODE_CATEGORY: PROC;
 /*******************************************************************/
 /* CHECK WHETHER CCOTYPE IS INCIDENT FEE CODE OR NON STD RATE.     */
 /* Billing flags will be set again in FIND_UPGRADE_RATE proc also  */
 /* All the conditions for the PAR,PTP,COMBO and Non std rate code  */
 /* are checked.                                        RQ4527 6NSH */
 /*******************************************************************/

   DCL STDKEY             CHAR(16)     INIT('');
   DCL STD_SEARCH_KEY     CHAR( 3)     INIT('');

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': FIND_INCIDENT_CODE_CATEGORY' ||
                           ' DOC= '||AEQCOMM.S0IDOCMN ||
                           ' KEY= '||AEQCOMM.CCOTYPE;
       CALL WRITE_TO_OPER;
   END; 

   STDKEY = AEQCOMM.CCOTYPE;     

   STD_SEARCH_KEY = SUBSTR(STDKEY,1,3);
   EXEC CICS STARTBR FILE('QBSTDRAT')
                     RIDFLD(STDKEY)
                     KEYLENGTH(5)
                     RESP(RESPONSE)
                     RESP2(RESPONSE2)
                     GENERIC GTEQ;


   SELECT(RESPONSE);
     WHEN (DFHRESP(NORMAL))
      DO;

        IF TEST_SW
          THEN DO;
           DIAG_TEXT = MODULE||': first lookup >= key found, key ' ||
                 SUBSTR(STDKEY,1,3);
           CALL WRITE_TO_OPER;
         END;
      END;

     WHEN (DFHRESP(DSIDERR))             /* FILE NOT FOUND          */
       DO;
         ET_TEXT1 = 'QSR9002: QBBIL1  FILE NOT FOUND (QBSTDRAT)';
         SIGNAL ERROR;
       END;

     WHEN (DFHRESP(NOTFND))              /* KEY NOT FOUND           */
       DO;
         IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||
                             ': First Lookup, key not found, ERR 231';
            CALL WRITE_TO_OPER;
          END;

       END;
     OTHERWISE                         /* OTHER VSAM ERROR         */
       DO;
         ET_TEXT1 = 'QSR9002: QBBIL1  ERROR ON STARTBR OF ' ||
                    'STANDARD RATE FILE (QBSTDRAT)';
         PIC3 = RESPONSE;
         PIC7 = RESPONSE2;
         ET_TEXT2 = 'QSR9002: QBBIL1  KEY=' || STDKEY ||
                         ' RESP= ' ||PIC3 || ' RESP2= ' ||PIC7;
         SIGNAL ERROR;
       END;
   END;   /* END SELECT */



   /* ----------------------------------------------------------- */
   /* Get next record                                             */
   /* ----------------------------------------------------------- */
   /* THE SIGNAL ERROR CONDITION ON THE NOT FOUND CONDITION ABOVE */
   /* WAS REMOVED SO THAT IT COULD FIND NOT CAUSE A PROBLEM SO    */
   /* SO THE RESPONSE HAS TO BE CHECKED FOR NORMAL PROCESSING     */
   /* ----------------------------------------------------------- */
   IF RESPONSE = DFHRESP(NORMAL)
     THEN DO;
        IF TEST_SW
          THEN DO;
            DIAG_TEXT = MODULE||
                          ': Before second lookup csplchg, KEY('||
                             SUBSTR(STDKEY,1,3);
            CALL WRITE_TO_OPER;
        END;

     RECD_LENGTH = 80;

     EXEC CICS READNEXT FILE('QBSTDRAT')
                        RIDFLD(STDKEY)
                        INTO (STANDARD)
                        LENGTH(RECD_LENGTH)
                        RESP(RESPONSE)
                        RESP2(RESPONSE2);

     IF TEST_SW
       THEN DO;
          DIAG_TEXT = MODULE||
                   ': second look/normal resp csplchg, KEY('||
                   SUBSTR(STDKEY,1,3)||') RATEFILE('||STANDARD.CRATTYP
                  ||') CCPFIN=' || STANDARD.CCPFIN ;
          CALL WRITE_TO_OPER;
          DIAG_TEXT = MODULE||': ACTIVITY DATE, ('|| PRICE.DCALL||
                 ') ratefile DATE('|| STANDARD.DEFFDTE||')';
          CALL WRITE_TO_OPER;
        END;


      DO WHILE ( PRICE.DCALL      >= STANDARD.DEFFDTE  &
                 RESPONSE         ^= DFHRESP(ENDFILE)  &
                 AEQCOMM.CCOTYPE  = SUBSTR(STDKEY,1,3));


        SELECT(RESPONSE);
         WHEN (DFHRESP(NORMAL))
           DO;
          /* Code changes starts here RQ054527 */
            IF TEST_SW
               THEN DO;
                 DIAG_TEXT = MODULE||': DO WHILE LOOP- NORMAL CTYPE('||
                 STANDARD.CTYPE ||') S0CFUNC(1) '|| 
                 AEQCOMM.S0CFUNC(1);

                 CALL WRITE_TO_OPER;
               END;

           SELECT (STANDARD.CTYPE); 
              WHEN ('R') 
                DO;
                  PRICE.CNONRATE = 'Y';
                  PRICE.AINRATE  = STANDARD.AINRATE;
                  PRICE.AOUTRATE = STANDARD.AOUTRATE;
		  PRICE.AINCDNT  = '';
                  TEMP_CTYPE     = STANDARD.CTYPE;
                END; 

              WHEN ('P') 
                DO;
      /*-----------------------------------------------------------*/
      /* no parts on the QSAR and the CCOTYPE indicates bill parts */
      /* only, then blank out the CCOTYPE and type of incident code*/
      /*-----------------------------------------------------------*/
                 IF AEQCOMM.S0CFUNC(1) = ''
                   THEN DO;
                     AEQCOMM.CCOTYPE      = '';
                     TEMP_CTYPE           = '';
                  END; 
      /*-----------------------------------------------------------*/
      /* SC 01,08,20,33,36,47 are valid with PAR and source        */
      /* shouldnot be equal to ACR and SQL then assign the billing */
      /* flags from the std rate table otherwise blank out the     */
      /* CCOTYPE value.                                            */
      /*-----------------------------------------------------------*/

                ELSE IF ((AEQCOMM.S0CSVC     = '01'  | 
                          AEQCOMM.S0CSVC     = '08'  |
                          AEQCOMM.S0CSVC     = '20'  | 
                          AEQCOMM.S0CSVC     = '33'  |
                          AEQCOMM.S0CSVC     = '36'  | 
                          AEQCOMM.S0CSVC     = '47') & 
                          AEQCOMM.ISOURCE   ^= 'ACR' &
                          AEQCOMM.ISOURCE   ^= 'SQL' &
                          ^PDPSI_OFFICE  )
                    THEN DO;
                          AEQCOMM.FBILACTH   = STANDARD.FBILACTH;
                          AEQCOMM.FBILTRVH   = STANDARD.FBILTRVH;
                          AEQCOMM.FBILEXP    = STANDARD.FBILEXP;
                          AEQCOMM.FBILDIST   = STANDARD.FBILDIST;
                          AEQCOMM.FBILPART   = STANDARD.FBILPART;
                          TEMP_CTYPE         = STANDARD.CTYPE;
        	 	  BILL_ONLY_PARTS    = '1'B;

                      END;
                 ELSE 
                   DO;
                     AEQCOMM.CCOTYPE      = '';
                     TEMP_CTYPE           = '';
                   END;
            END;  /* END OF WHEN (P) */
            
         WHEN ('T') 
                DO;
      /*-----------------------------------------------------------*/
      /* no parts on the QSAR and the CCOTYPE indicates bill parts */
      /* only, then blank out the CCOTYPE and type of incident code*/
      /*-----------------------------------------------------------*/
                 IF AEQCOMM.S0CFUNC(1) = ''
                   THEN DO;
                     AEQCOMM.CCOTYPE      = '';
                     TEMP_CTYPE           = '';
                  END; 
      /*-----------------------------------------------------------*/
      /* SC 01,08,20,33,36,47 are valid with PTP then assign the   */
      /* BILLING Flags from the std rate table otherwise blank out */
      /* the CCOTYPE value.                                        */
      /*-----------------------------------------------------------*/

                ELSE IF ((AEQCOMM.S0CSVC     = '01'  | 
                          AEQCOMM.S0CSVC     = '08'  |
                          AEQCOMM.S0CSVC     = '20'  | 
                          AEQCOMM.S0CSVC     = '33'  |
                          AEQCOMM.S0CSVC     = '36'  | 
                          AEQCOMM.S0CSVC     = '47') & 
                          ^PDPSI_OFFICE  )
                    THEN DO;
                          AEQCOMM.FBILACTH   = STANDARD.FBILACTH;
                          AEQCOMM.FBILTRVH   = STANDARD.FBILTRVH;
                          AEQCOMM.FBILEXP    = STANDARD.FBILEXP;
                          AEQCOMM.FBILDIST   = STANDARD.FBILDIST;
                          AEQCOMM.FBILPART   = STANDARD.FBILPART;
                          TEMP_CTYPE         = STANDARD.CTYPE;
        	 	  BILL_ONLY_PARTS    = '1'B;
                          BILL_PARTS_PTP     = '1'B;

                      END;
                 ELSE 
                   DO;
                     AEQCOMM.CCOTYPE      = '';
                     TEMP_CTYPE           = '';
                   END;
            END;  /* END OF WHEN (T ) */

          
            WHEN ('B')        
            DO;
              IF (AEQCOMM.S0CSVC  = '01' | AEQCOMM.S0CSVC = '08' )
                                        &
                 (AEQCOMM.ISOURCE = ''  | AEQCOMM.ISOURCE = 'QLX')  
                 THEN DO;
                   TEMP_CTYPE         = STANDARD.CTYPE;
                   AEQCOMM.FBILACTH   = STANDARD.FBILACTH;
                   AEQCOMM.FBILTRVH   = STANDARD.FBILTRVH;
                   AEQCOMM.FBILEXP    = STANDARD.FBILEXP;
                   AEQCOMM.FBILDIST   = STANDARD.FBILDIST;
                   AEQCOMM.FBILPART   = STANDARD.FBILPART;
         	   BILL_ONLY_PARTS    = '0'B;
                   
                 END;
                 ELSE DO;
                   AEQCOMM.CCOTYPE    = '';
                   TEMP_CTYPE         = '';
                 END;
              END;
 
            WHEN ('I', 'D')
            DO;
              TEMP_CTYPE      = STANDARD.CTYPE;
            END;
	    OTHERWISE ;
         END;       /* end of select */
    
         IF TEST_SW
            THEN DO;
              DIAG_TEXT = MODULE||
                       ': Second csplchg lookup key found, key (' ||
                        STDKEY|| ') rate= ' || STANDARD.AINRATE ;
              CALL WRITE_TO_OPER;
              DIAG_TEXT = MODULE||': DCALL ' || PRICE.DCALL ||
                   ' DEFFEDTE (' || STANDARD.DEFFDTE || ')';
              CALL WRITE_TO_OPER;
            END; 

           END;  /* END OF WHEN DO */

           WHEN (DFHRESP(DSIDERR)) /* FILE NOT FOUND            */
           DO;                     /* PASS CONTROL TO ERROR PGM */
             ET_TEXT1 = 'QSR9002: QBBIL1  FILE NOT FOUND (QBSTDRAT)';
             SIGNAL ERROR;
           END;

         OTHERWISE                   /* ALL OTHER ERRORS          */
           DO;                       /* PASS CONTROL TO ERROR PGM */
             ET_TEXT1 = 'QSR9002: QBBIL1, ERROR ON READNEXT OF ' ||
                        'STANDARD RATE FILE (QBSTDRAT)';
             PIC3 = RESPONSE;
             PIC7 = RESPONSE2;
             ET_TEXT2 = 'QSR9002: QBBIL1 KEY=' || STDKEY||
                                      ' RESP= '|| PIC3 ||
                                     ' RESP2= '||PIC7;
             SIGNAL ERROR;
           END;

        END;/* END OF SELECT */

        EXEC CICS IGNORE CONDITION ENDFILE;
        EXEC CICS READNEXT FILE('QBSTDRAT')
                          RIDFLD(STDKEY)
                          INTO (STANDARD)
                          LENGTH(RECD_LENGTH)
                          RESP(RESPONSE)
                          RESP2(RESPONSE2);

     END;                              /*   END OF DO */

     EXEC CICS ENDBR FILE('QBSTDRAT');

    END; /* END OF IF NORMAL */

    IF TEST_SW
      THEN DO;
        DIAG_TEXT = MODULE||': FIND_INCIDENT_CODE_CATEGORY';
        CALL WRITE_TO_OPER;
      END;
   
 END FIND_INCIDENT_CODE_CATEGORY; /* RQ057017 ENDS HERE */
 
 %PAGE;
 ASSIGN_BILL_DECISION: PROC(TEMP_BILL_DECISION,
                            TEMP_LOCATION,TEMP_PROC) REORDER;
 /*******************************************************************/
 /* WRITE BILL DECISION INDICATOR     - ** FOR TEST ONLY **         */
 /*******************************************************************/
   DCL TEMP_LOCATION      CHAR (20);
   DCL TEMP_PROC          CHAR (30);
   DCL TEMP_BILL_DECISION CHAR (1);
   XCOMM.BILL_DECISION = TEMP_BILL_DECISION;

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': '  || TEMP_LOCATION ||
                   ' - BILL_DECISION - '|| XCOMM.BILL_DECISION||
                   ' '||TEMP_PROC;
       CALL WRITE_TO_OPER; /* ******* TEST ONLY ****** */
     END;

 END ASSIGN_BILL_DECISION;


 %PAGE;
 /********************************************************************/
 /* FREE THE STORAGE                                                 */
 /********************************************************************/
 CICS_FREEMAIN: PROC(@PTR);

   IF TEST_SW                     /* ********** TEST ONLY ********** */
     THEN DO;
       DIAG_TEXT = MODULE||': IN FREEMAIN PROC';
       CALL WRITE_TO_OPER;
   END;

   DCL @PTR POINTER;
   DCL AREA CHAR(1) BASED(@PTR);

   IF @PTR ^= NULL THEN
     EXEC CICS FREEMAIN DATA(AREA);

   @PTR = NULL;

 END CICS_FREEMAIN;




 %PAGE;
 PRINT_DEBUG_FIELDS: PROC REORDER;
 /*******************************************************************/
 /* WRITE TO OPERATOR                 - ** FOR TEST ONLY **         */
 /*******************************************************************/
   DIAG_TEXT = MODULE||': 1  QSAR PEND VALUE        CGQHIGSE - '||
                                AEQCOMM.CGQHIGSE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 2  QSAR DELETE FLAG       NSDC_DEL - '||
                                AEQCOMM.NSDC_DEL;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 3  PART TRAILER           S0IPARTR - '||
                                AEQCOMM.S0IPARTR;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 4  SOURCE OF QSAR         ISOURCE  - '||
                                AEQCOMM.ISOURCE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 5  IBM INTERNAL           FIBM     - '||
                                AEQCOMM.FIBM;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 6  ISSC CONTRACT          FISSCNTR - '||
                                AEQCOMM.FISSCNTR;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 7  SERVICE CODE           S0CSVC   - '||
                                AEQCOMM.S0CSVC;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 8  ACTIVITY CODE          S0CHACT  - '||
                                AEQCOMM.S0CHACT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 9  BILLABLE ACT CODE      S0CBIOSA - '||
                                AEQCOMM.S0CBIOSA;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 10 WARRANTY FLAG          FWARRNTY - '||
                                AEQCOMM.FWARRNTY;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 11 MACHINE ON MA          GJCSTAT  - '||
                                AEQCOMM.GJCSTAT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 12 TSS MACHINE            FTSSMACH - '||
                                AEQCOMM.FTSSMACH;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 13 TAX CODES              CTAXCD   - '||
                                AEQCOMM.CTAXCD;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 14 PART ONLY              CHCDATIT - '||
                                AEQCOMM.CHCDATIT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 15 SOURCED FROM ONLINE    S0ISRCNS - '||
                                AEQCOMM.S0ISRCNS;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 16 MACHINE STATUS         GJCSTAT  - '||
                               AEQCOMM.GJCSTAT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 17 30% MACHINE            GJF30PCT - '||
                               AEQCOMM.GJF30PCT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 18 40% MACHINE            GJF40PCT - '||
                               AEQCOMM.GJF40PCT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 19 MACHINE SERIAL         S0IMACSE - '||
                               AEQCOMM.S0IMACSE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 20 MACHINE TYPE           S0IMACTC - '||
                               AEQCOMM.S0IMACTC;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 21 ON DSI                 GJFDSI   - '||
                               AEQCOMM.GJFDSI;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 22 MACHINE ON MPI         M_MPI    - '||
                               AEQCOMM.M_MPI;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 23 IDM                    S0CIDM   - '||
                               AEQCOMM.S0CIDM;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 24 CONTRACT               S0ICSS   - '||
                               AEQCOMM.S0ICSS;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 25 HVLC INDICATOR   HVLC_INDICATOR - '||
                               XCOMM.HVLC_INDICATOR ;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 26 NSS BILL STATUS       IBILLSTAT - '||
                               AEQCOMM.IBILLSTAT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 27 SERVICE DELIVERY FLAG GJCSDT    - '||
                               AEQCOMM.GJCSDT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 28 INCIDENT PART IND     FINCDPRT  - '||
                               AEQCOMM.FINCDPRT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 29 CONTRACT TYPE (IN/FEE)CCOTYPE   - '||
                               AEQCOMM.CCOTYPE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 30 MPI 24X7 coverage      FMPI24X7 - '||
                               AEQCOMM.FMPI24X7||' ent source '||
                               AEQCOMM.IENTSRC ;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 31 CONTRACT 24X7 COVERAGE FCNT24X7 - '||
                               AEQCOMM.FCNT24X7||' ent source '||
                               AEQCOMM.IENTSRC ;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 32 WARRANTY 24x7 COVERAGE FWAR24X7 - '||
                               AEQCOMM.FWAR24X7||' ent source '||
                               AEQCOMM.IENTSRC ;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 33 ONSITE COVERAGE        FONSITE  - '||
                               AEQCOMM.FONSITE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 34 PROBLEM NUMBER         S0CCSCPC - '||
                               AEQCOMM.S0CCSCPC;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 35 RENT.LEASE 10/11       GJCSTAT  - '||
                               AEQCOMM.GJCSTAT;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 36 CE BO/TERR     CMIBOCE/CIICETER - '||
                              AEQCOMM.CMIBOCE||'/'||AEQCOMM.CIICETER;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 37 COVERAGE TYPE          ICVGTYPE - '||
                              AEQCOMM.ICVGTYPE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 38 EMPLOYEE SERIAL        S0IEMPSE - '||
                               AEQCOMM.S0IEMPSE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 39 BWC SERVICE TYPE       ISERVTYP - '||
                               AEQCOMM.ISERVTYP;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 44 BASE WARRANTY          CBASEWAR - '||
                              AEQCOMM.CBASEWAR||' COV TYPE '     ||
                              AEQCOMM.ICVGTYPE;

   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': 45 LENOVO EMPLOYEE        FLNVEMPL - '||
                               AEQCOMM.FLNVEMPL;
   CALL WRITE_TO_OPER;

 END PRINT_DEBUG_FIELDS;

 %PAGE;
 /*******************************************************************/
 /*                                                                 */
 /*******************************************************************/
 GREGORIAN_TO_LILIAN: PROC(INGREG_DATE,LOC) RETURNS(FIXED BIN(31));
   DCL INGREG_DATE          CHAR(8);
   DCL LOC                  CHAR(1);
   DCL GREG_DATE            CHAR(255) VARYING;
   DCL OUTLIL_DATE    FIXED BIN(31);

   DCL 01 FC,                     /* Feedback token */
          03 MsgSev    REAL FIXED BINARY(15,0),
          03 MsgNo     REAL FIXED BINARY(15,0),
          03 Flags,
             05 Case      BIT(2),
             05 Severity  BIT(3),
             05 Control   BIT(3),
          03 FacID     CHAR(3),      /* Facility ID */
          03 ISI   /* Instance-Specific Information */
                       REAL FIXED BINARY(31,0);

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': DATE CONVERSION  GREG TO LIL '||
                               INGREG_DATE||' FROM LOC '||LOC;
       CALL WRITE_TO_OPER;
     END;

   GREG_DATE   = INGREG_DATE;
                     /*  GREGORIAN DATE TO LILIAN DATE              */
   CALL CEEDAYS (GREG_DATE,'YYYYMMDD',OUTLIL_DATE,FC);

   IF FBCHECK (FC, CEE000)
     THEN DO;
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': VALID DATE-GREGDATE '||
                               SUBSTR(GREG_DATE,1,8)||
                               ' LIL_DATE '||OUTLIL_DATE;
           CALL WRITE_TO_OPER;
         END;
     END;
     ELSE DO;
       DIAG_TEXT = MODULE||': CEEDAYS failed with msg '||
                            FC.MsgNo||' FROM LOC '||LOC;

       CALL WRITE_TO_OPER;
       OUTLIL_DATE = 1;
     END;

   RETURN(OUTLIL_DATE);

 END GREGORIAN_TO_LILIAN;

 %PAGE;
 /*******************************************************************/
 /*                                                                 */
 /*******************************************************************/
 LILIAN_TO_GREGORIAN: PROC(INLIL_DATE,LOC) RETURNS(CHAR(8));
   DCL INLIL_DATE    FIXED BIN(31);
   DCL LOC                 CHAR(1);
   DCL DATE_FORMAT    CHAR(255) VARYING;
   DCL OUTGREG_DATE   CHAR(80);
   DCL OUT_DATE       CHAR(8) BASED(ADDR(OUTGREG_DATE));
   DCL 01 FC2,                     /* Feedback token */
          03 MsgSev    REAL FIXED BINARY(15,0),
          03 MsgNo     REAL FIXED BINARY(15,0),
          03 Flags,
             05 Case      BIT(2),
             05 Severity  BIT(3),
             05 Control   BIT(3),
          03 FacID     CHAR(3),      /* Facility ID */
          03 ISI   /* Instance-Specific Information */
                       REAL FIXED BINARY(31,0);

   /*DATE_FORMAT = 'YYYYMMDD' */
   CALL CEEDATE (INLIL_DATE,'YYYYMMDD',OUTGREG_DATE,FC2);

    IF FBCHECK (FC2, CEE000)
     THEN DO;
       IF TEST_SW
         THEN DO;
           DIAG_TEXT = MODULE||': IN LILIAN DATE '||INLIL_DATE||
                             ' GREG DATE '||SUBSTR(OUTGREG_DATE,1,8)||
                             ' LOC '||LOC;
           CALL WRITE_TO_OPER;
         END;
     END;
     ELSE DO;
       DIAG_TEXT = MODULE||': CEEDATE failed with msg '||
                           FC2.MsgNo;
       CALL WRITE_TO_OPER;
       OUT_DATE = '19000101';
     END;

   RETURN(OUT_DATE);

 END LILIAN_TO_GREGORIAN;

 %PAGE;
 GET_DAYNUM: PROC(LILDATE,LOC) RETURNS(FIXED BIN(31));
   /* ------------------------------------------------------------- */
   /* GET THE DAY OF THE WEEK. THEN BASED ON THE SYSTEM DATE FIND   */
   /* THE FIRST FRIDAY THAT PROCESSING WILL START. THIS IS DONE BY  */
   /* FINDING OUT THE DATE IS LILIAN AND SUBTRACTING THE WEEK DAY   */
   /* FROM IT. THIS WILL PUT YOU ON THE PROCESSING FRIDAY.          */
   /*                                                               */
   /* IN PLIDATE SATURDAY IS THE FIRST DAY OF THE WEEK BASED ON A   */
   /* 1= SAT- FRI=7 WEEK                                            */
   /* ------------------------------------------------------------- */
   /* WEEK_DAY  = DAYGRG(TODAYS_GRGDATE,DAYSET,'YMD') PLIDATE CALL  */
   /* CEEDYWY 1 = SUNDAY ..... 7 = SATURDAY BASED ON A SUN -SAT WEEK*/
   /* ------------------------------------------------------------- */
   /* SATURDAY IS THE FIRST DAY OF THE WEEK BASED ON A SAT-FRI WEEK */
   /* DAYSET IS INITIALIZED TO "SAT"                                */
   /* ------------------------------------------------------------- */
   DCL LILDATE             FIXED BIN(31);
   DCL DAYNUM         REAL FIXED BIN(31,0) INIT(0);
   DCL LOC                 CHAR(1);
   DCL 01 FC3,                     /* Feedback token */
          03 MsgSev    REAL FIXED BINARY(15,0),
          03 MsgNo     REAL FIXED BINARY(15,0),
          03 Flags,
             05 Case      BIT(2),
             05 Severity  BIT(3),
             05 Control   BIT(3),
          03 FacID     CHAR(3),      /* Facility ID */
          03 ISI   /* Instance-Specific Information */
                       REAL FIXED BINARY(31,0);

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': FUNCTION GET DAYNUM ';
       CALL WRITE_TO_OPER;
     END;

   CALL CEEDYWK(LILDATE,DAYNUM,FC3);

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': AFTER CALL CEEDYWK ';
       CALL WRITE_TO_OPER;
     END;

     IF FBCHECK (FC3, CEE000)
       THEN DO;
         PIC_DAYNUM = DAYNUM;

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': DAY OF WEEK before reset: ' ||
                           PIC_DAYNUM;
             CALL WRITE_TO_OPER;
           END;
       END;
     ELSE
       DO;
         DIAG_TEXT = MODULE||': CEEDATE FAILED WITH MSG '||FC3.MSGNO;
         CALL WRITE_TO_OPER;
         SIGNAL ERROR;
       END;

    RETURN (DAYNUM);
 END GET_DAYNUM;

 /* RCQXX Included the below procedure for SDT  */

 GET_SDT_DAYNUM: PROC(LILDATE,LOC) RETURNS(FIXED BIN(31));
   /* ------------------------------------------------------------- */
   /* GET THE DAY OF THE WEEK. THEN BASED ON THE SYSTEM DATE FIND   */
   /* THE FIRST FRIDAY THAT PROCESSING WILL START. THIS IS DONE BY  */
   /* FINDING OUT THE DATE IS LILIAN AND SUBTRACTING THE WEEK DAY   */
   /* FROM IT. THIS WILL PUT YOU ON THE PROCESSING FRIDAY.          */
   /*                                                               */
   /* IN PLIDATE SATURDAY IS THE FIRST DAY OF THE WEEK BASED ON A   */
   /* 1= SAT- FRI=7 WEEK                                            */
   /* ------------------------------------------------------------- */
   /* WEEK_DAY  = DAYGRG(TODAYS_GRGDATE,DAYSET,'YMD') PLIDATE CALL  */
   /* CEEDYWY 1 = SUNDAY ..... 7 = SATURDAY BASED ON A SUN -SAT WEEK*/
   /* ------------------------------------------------------------- */
   /* SATURDAY IS THE FIRST DAY OF THE WEEK BASED ON A SAT-FRI WEEK */
   /* DAYSET IS INITIALIZED TO "SAT"                                */
   /* ------------------------------------------------------------- */
   DCL LILDATE             FIXED BIN(31);
   DCL DAYNUM         REAL FIXED BIN(31,0) INIT(0);
   DCL LOC                 CHAR(1);
   DCL 01 FC3,                     /* Feedback token */
          03 MsgSev    REAL FIXED BINARY(15,0),
          03 MsgNo     REAL FIXED BINARY(15,0),
          03 Flags,
             05 Case      BIT(2),
             05 Severity  BIT(3),
             05 Control   BIT(3),
          03 FacID     CHAR(3),      /* Facility ID */
          03 ISI   /* Instance-Specific Information */
                       REAL FIXED BINARY(31,0);

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': FUNCTION GET SDT DAYNUM ';
       CALL WRITE_TO_OPER;
     END;

   CALL CEEDYWK(LILDATE,DAYNUM,FC3);

   IF TEST_SW
     THEN DO;
       DIAG_TEXT = MODULE||': AFTER CALL CEEDYWK ';
       CALL WRITE_TO_OPER;
     END;

     IF FBCHECK (FC3, CEE000)
       THEN DO;
         PIC_DAYNUM = DAYNUM;

         IF TEST_SW
           THEN DO;
             DIAG_TEXT = MODULE||': DAY OF WEEK before reset: ' ||
                           PIC_DAYNUM;
             CALL WRITE_TO_OPER;
           END;
       END;
     ELSE
       DO;
         DIAG_TEXT = MODULE||': CEEDATE FAILED WITH MSG '||FC3.MSGNO;
         CALL WRITE_TO_OPER;
         SIGNAL ERROR;
       END;

    SELECT (DAYNUM);         /* -------------------------------- */
       WHEN(1) DAYNUM   = 2; /* CEE = 1 PLIDATE = 2 SUNDAY       */
       WHEN(2) DAYNUM   = 3; /* CEE = 2 PLIDATE = 3 MONDAYY      */
       WHEN(3) DAYNUM   = 4; /* CEE = 3 PLIDATE = 4 TUESDAY      */
       WHEN(4) DAYNUM   = 5; /* CEE = 4 PLIDATE = 5 WEDNESDAY    */
       WHEN(5) DAYNUM   = 6; /* CEE = 5 PLIDATE = 6 THURSDAY     */
       WHEN(6) DAYNUM   = 7; /* CEE = 6 PLIDATE = 7 FRIDAY       */
       WHEN(7) DAYNUM   = 1; /* CEE = 7 PLIDATE = 1 SATURDAY     */
       OTHERWISE DAYNUM = 0; /* INVALID DATE                     */
     END;                    /* END SELECT                       */
                             /* -------------------------------- */

    RETURN (DAYNUM);

 END GET_SDT_DAYNUM;   /* RCQXX ends here */

 LEAVE_QBBIL1: PROC;

   EXEC CICS RETURN;

 END LEAVE_QBBIL1;

 %PAGE;
 /*******************************************************************/
 /*******************************************************************/
 PRINT_BILLING_FLAGS_HOURS: PROC(LOC);
 DCL LOC   CHAR(1);

   DIAG_TEXT = MODULE||': LOC '||LOC||' entitlement source '||
                    AEQCOMM.IENTSRC ||' onsite? '||AEQCOMM.FONSITE||
                       ' coverage type '||AEQCOMM.ICVGTYPE;
   CALL WRITE_TO_OPER;
   DIAG_TEXT = MODULE||': BILLING FLAGS ACT/TRVL/PARTS/DIST/EXP '||
             AEQCOMM.FBILACTH||' '|| AEQCOMM.FBILTRVH||' '||
             AEQCOMM.FBILPART||' '|| AEQCOMM.FBILDIST||' '||
             AEQCOMM.FBILEXP ;
   CALL WRITE_TO_OPER;

   IF LOC = '1'
     THEN DO;
       DIAG_TEXT = MODULE||': mon (2) '||AEQCOMM.HSTRTMON||' '||
                                         AEQCOMM.HENDMON;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': tue (3) '||AEQCOMM.HSTRTTUE||' '||
                                         AEQCOMM.HENDTUE;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': wed (4) '||AEQCOMM.HSTRTWED||' '||
                                         AEQCOMM.HENDWED;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': thu (5) '||AEQCOMM.HSTRTTHU||' '||
                                         AEQCOMM.HENDTHU;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': fri (6) '||AEQCOMM.HSTRTFRI||' '||
                                         AEQCOMM.HENDFRI;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': sat (7) '||AEQCOMM.HSTRTSAT||' '||
                                         AEQCOMM.HENDSAT;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': sun (1) '||AEQCOMM.HSTRTSUN||' '||
                                         AEQCOMM.HENDSUN;
       CALL WRITE_TO_OPER;
     END;
     ELSE DO;
       DIAG_TEXT = MODULE||': mon (2) '||PIC_HSTRTMON||
                                    ' '||PIC_HENDMON;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': tue (3) '||PIC_HSTRTTUE||
                                    ' '||PIC_HENDTUE;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': wed (4) '||PIC_HSTRTWED||
                                    ' '||PIC_HENDWED;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': thu (5) '||PIC_HSTRTTHU||
                                    ' '||PIC_HENDTHU;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': fri (6) '||PIC_HSTRTFRI||
                                    ' '||PIC_HENDFRI;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': sat (7) '||PIC_HSTRTSAT||
                                    ' '||PIC_HENDSAT;
       CALL WRITE_TO_OPER;
       DIAG_TEXT = MODULE||': sun (1) '||PIC_HSTRTSUN||
                                    ' '||PIC_HENDSUN;
       CALL WRITE_TO_OPER;
     END;

 END PRINT_BILLING_FLAGS_HOURS;

 %PAGE;
 WRITE_TO_OPER: PROC;
 /*******************************************************************/
 /* WRITE TO OPERATOR                 - ** FOR TEST ONLY **         */
 /*******************************************************************/

   EXEC CICS WRITEQ TD QUEUE('CESE') FROM(DIAG_TEXT) LENGTH(80);

 END WRITE_TO_OPER;

 END QBBIL1 ;
